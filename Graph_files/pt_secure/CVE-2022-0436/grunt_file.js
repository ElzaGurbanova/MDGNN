'use strict';
var grunt = require('../grunt');
var fs = require('fs');
var path = require('path');
const v371 = {};
module.exports = v371;
var file = module.exports;
const v372 = require('glob');
file.glob = v372;
const v373 = require('minimatch');
file.minimatch = v373;
const v374 = require('findup-sync');
file.findup = v374;
var YAML = require('js-yaml');
var rimraf = require('rimraf');
var iconv = require('iconv-lite');
const v375 = require('mkdirp');
var mkdirp = v375.sync;
const v376 = process.platform;
var win32 = v376 === 'win32';
var unixifyPath = function (filepath) {
    if (win32) {
        const v377 = filepath.replace(/\\/g, '/');
        return v377;
    } else {
        return filepath;
    }
};
const v380 = function () {
    const v378 = path.join;
    var dirpath = v378.apply(path, arguments);
    const v379 = process.chdir(dirpath);
    v379;
};
file.setBase = v380;
var processPatterns = function (patterns, fn) {
    var result = [];
    const v381 = grunt.util;
    const v382 = v381._;
    const v383 = v382.flattenDeep(patterns);
    const v389 = function (pattern) {
        const v384 = pattern.indexOf('!');
        var exclusion = v384 === 0;
        if (exclusion) {
            pattern = pattern.slice(1);
        }
        var matches = fn(pattern);
        if (exclusion) {
            const v385 = grunt.util;
            const v386 = v385._;
            result = v386.difference(result, matches);
        } else {
            const v387 = grunt.util;
            const v388 = v387._;
            result = v388.union(result, matches);
        }
    };
    const v390 = v383.forEach(v389);
    v390;
    return result;
};
const v412 = function (options, patterns, filepaths) {
    const v391 = grunt.util;
    const v392 = v391.kindOf(options);
    const v393 = v392 !== 'object';
    if (v393) {
        filepaths = patterns;
        patterns = options;
        options = {};
    }
    const v394 = patterns == null;
    const v395 = filepaths == null;
    const v396 = v394 || v395;
    if (v396) {
        const v397 = [];
        return v397;
    }
    const v398 = Array.isArray(patterns);
    const v399 = !v398;
    if (v399) {
        patterns = [patterns];
    }
    const v400 = Array.isArray(filepaths);
    const v401 = !v400;
    if (v401) {
        filepaths = [filepaths];
    }
    const v402 = patterns.length;
    const v403 = v402 === 0;
    const v404 = filepaths.length;
    const v405 = v404 === 0;
    const v406 = v403 || v405;
    if (v406) {
        const v407 = [];
        return v407;
    }
    const v410 = function (pattern) {
        const v408 = file.minimatch;
        const v409 = v408.match(filepaths, pattern, options);
        return v409;
    };
    const v411 = processPatterns(patterns, v410);
    return v411;
};
file.match = v412;
const v417 = function () {
    const v413 = file.match;
    const v414 = v413.apply(file, arguments);
    const v415 = v414.length;
    const v416 = v415 > 0;
    return v416;
};
file.isMatch = v417;
const v445 = function () {
    const v418 = grunt.util;
    var args = v418.toArray(arguments);
    let options;
    const v419 = grunt.util;
    const v420 = args[0];
    const v421 = v419.kindOf(v420);
    const v422 = v421 === 'object';
    const v423 = args.shift();
    const v424 = {};
    if (v422) {
        options = v423;
    } else {
        options = v424;
    }
    let patterns;
    const v425 = args[0];
    const v426 = Array.isArray(v425);
    const v427 = args[0];
    if (v426) {
        patterns = v427;
    } else {
        patterns = args;
    }
    const v428 = patterns.length;
    const v429 = v428 === 0;
    if (v429) {
        const v430 = [];
        return v430;
    }
    const v433 = function (pattern) {
        const v431 = file.glob;
        const v432 = v431.sync(pattern, options);
        return v432;
    };
    var matches = processPatterns(patterns, v433);
    const v434 = options.filter;
    if (v434) {
        const v444 = function (filepath) {
            const v435 = options.cwd;
            const v436 = v435 || '';
            filepath = path.join(v436, filepath);
            try {
                const v437 = options.filter;
                const v438 = typeof v437;
                const v439 = v438 === 'function';
                if (v439) {
                    const v440 = options.filter(filepath);
                    return v440;
                } else {
                    const v441 = fs.statSync(filepath);
                    const v442 = options.filter;
                    const v443 = v441[v442]();
                    return v443;
                }
            } catch (e) {
                return false;
            }
        };
        matches = matches.filter(v444);
    }
    return matches;
};
file.expand = v445;
var pathSeparatorRe = /[\/\\]/g;
var extDotRe = {};
extDotRe.first = /(\.[^\/]*)?$/;
extDotRe.last = /(\.[^\/\.]*)?$/;
const v473 = function (patterns, destBase, options) {
    const v446 = grunt.util;
    const v447 = v446._;
    const v448 = {};
    const v451 = function (destBase, destPath) {
        const v449 = destBase || '';
        const v450 = path.join(v449, destPath);
        return v450;
    };
    const v452 = {
        extDot: 'first',
        rename: v451
    };
    options = v447.defaults(v448, options, v452);
    var files = [];
    var fileByDest = {};
    const v453 = file.expand(options, patterns);
    const v471 = function (src) {
        var destPath = src;
        const v454 = options.flatten;
        if (v454) {
            destPath = path.basename(destPath);
        }
        const v455 = 'ext' in options;
        if (v455) {
            const v456 = options.extDot;
            const v457 = extDotRe[v456];
            const v458 = options.ext;
            destPath = destPath.replace(v457, v458);
        }
        var dest = options.rename(destBase, destPath, options);
        const v459 = options.cwd;
        if (v459) {
            const v460 = options.cwd;
            src = path.join(v460, src);
        }
        dest = dest.replace(pathSeparatorRe, '/');
        src = src.replace(pathSeparatorRe, '/');
        const v461 = fileByDest[dest];
        if (v461) {
            const v462 = fileByDest[dest];
            const v463 = v462.src;
            const v464 = v463.push(src);
            v464;
        } else {
            const v465 = [src];
            const v466 = {
                src: v465,
                dest: dest
            };
            const v467 = files.push(v466);
            v467;
            const v468 = files.length;
            const v469 = v468 - 1;
            const v470 = files[v469];
            fileByDest[dest] = v470;
        }
    };
    const v472 = v453.forEach(v471);
    v472;
    return files;
};
file.expandMapping = v473;
const v484 = function (dirpath, mode) {
    const v474 = grunt.option('no-write');
    if (v474) {
        return;
    }
    try {
        const v475 = { mode: mode };
        const v476 = mkdirp(dirpath, v475);
        v476;
    } catch (e) {
        const v477 = grunt.util;
        const v478 = 'Unable to create directory "' + dirpath;
        const v479 = v478 + '" (Error code: ';
        const v480 = e.code;
        const v481 = v479 + v480;
        const v482 = v481 + ').';
        const v483 = v477.error(v482, e);
        throw v483;
    }
};
file.mkdir = v484;
const recurse = function (rootdir, callback, subdir) {
    let abspath;
    const v485 = path.join(rootdir, subdir);
    if (subdir) {
        abspath = v485;
    } else {
        abspath = rootdir;
    }
    const v486 = fs.readdirSync(abspath);
    const v496 = function (filename) {
        var filepath = path.join(abspath, filename);
        const v487 = fs.statSync(filepath);
        const v488 = v487.isDirectory();
        if (v488) {
            const v489 = subdir || '';
            const v490 = filename || '';
            const v491 = path.join(v489, v490);
            const v492 = unixifyPath(v491);
            const v493 = recurse(rootdir, callback, v492);
            v493;
        } else {
            const v494 = unixifyPath(filepath);
            const v495 = callback(v494, rootdir, subdir, filename);
            v495;
        }
    };
    const v497 = v486.forEach(v496);
    v497;
};
file.recurse = recurse;
file.defaultEncoding = 'utf8';
file.preserveBOM = false;
const v523 = function (filepath, options) {
    const v498 = !options;
    if (v498) {
        options = {};
    }
    var contents;
    const v499 = grunt.verbose;
    const v500 = 'Reading ' + filepath;
    const v501 = v500 + '...';
    const v502 = v499.write(v501);
    v502;
    try {
        const v503 = String(filepath);
        contents = fs.readFileSync(v503);
        const v504 = options.encoding;
        const v505 = v504 !== null;
        if (v505) {
            const v506 = options.encoding;
            const v507 = file.defaultEncoding;
            const v508 = v506 || v507;
            const v509 = file.preserveBOM;
            const v510 = !v509;
            const v511 = { stripBOM: v510 };
            contents = iconv.decode(contents, v508, v511);
        }
        const v512 = grunt.verbose;
        const v513 = v512.ok();
        v513;
        return contents;
    } catch (e) {
        const v514 = grunt.verbose;
        const v515 = v514.error();
        v515;
        const v516 = grunt.util;
        const v517 = 'Unable to read "' + filepath;
        const v518 = v517 + '" file (Error code: ';
        const v519 = e.code;
        const v520 = v518 + v519;
        const v521 = v520 + ').';
        const v522 = v516.error(v521, e);
        throw v522;
    }
};
file.read = v523;
const v539 = function (filepath, options) {
    var src = file.read(filepath, options);
    var result;
    const v524 = grunt.verbose;
    const v525 = 'Parsing ' + filepath;
    const v526 = v525 + '...';
    const v527 = v524.write(v526);
    v527;
    try {
        result = JSON.parse(src);
        const v528 = grunt.verbose;
        const v529 = v528.ok();
        v529;
        return result;
    } catch (e) {
        const v530 = grunt.verbose;
        const v531 = v530.error();
        v531;
        const v532 = grunt.util;
        const v533 = 'Unable to parse "' + filepath;
        const v534 = v533 + '" file (';
        const v535 = e.message;
        const v536 = v534 + v535;
        const v537 = v536 + ').';
        const v538 = v532.error(v537, e);
        throw v538;
    }
};
file.readJSON = v539;
const v558 = function (filepath, options, yamlOptions) {
    const v540 = !options;
    if (v540) {
        options = {};
    }
    const v541 = !yamlOptions;
    if (v541) {
        yamlOptions = {};
    }
    var src = file.read(filepath, options);
    var result;
    const v542 = grunt.verbose;
    const v543 = 'Parsing ' + filepath;
    const v544 = v543 + '...';
    const v545 = v542.write(v544);
    v545;
    try {
        const v546 = yamlOptions.unsafeLoad;
        if (v546) {
            result = YAML.load(src);
        } else {
            result = YAML.safeLoad(src);
        }
        const v547 = grunt.verbose;
        const v548 = v547.ok();
        v548;
        return result;
    } catch (e) {
        const v549 = grunt.verbose;
        const v550 = v549.error();
        v550;
        const v551 = grunt.util;
        const v552 = 'Unable to parse "' + filepath;
        const v553 = v552 + '" file (';
        const v554 = e.message;
        const v555 = v553 + v554;
        const v556 = v555 + ').';
        const v557 = v551.error(v556, e);
        throw v557;
    }
};
file.readYAML = v558;
const v590 = function (filepath, contents, options) {
    const v559 = !options;
    if (v559) {
        options = {};
    }
    var nowrite = grunt.option('no-write');
    const v560 = grunt.verbose;
    let v561;
    if (nowrite) {
        v561 = 'Not actually writing ';
    } else {
        v561 = 'Writing ';
    }
    const v562 = v561 + filepath;
    const v563 = v562 + '...';
    const v564 = v560.write(v563);
    v564;
    const v565 = path.dirname(filepath);
    const v566 = file.mkdir(v565);
    v566;
    try {
        const v567 = Buffer.isBuffer(contents);
        const v568 = !v567;
        if (v568) {
            const v569 = options.encoding;
            const v570 = file.defaultEncoding;
            const v571 = v569 || v570;
            contents = iconv.encode(contents, v571);
        }
        const v572 = !nowrite;
        if (v572) {
            const v573 = 'mode' in options;
            const v574 = options.mode;
            const v575 = { mode: v574 };
            const v576 = {};
            let v577;
            if (v573) {
                v577 = v575;
            } else {
                v577 = v576;
            }
            const v578 = fs.writeFileSync(filepath, contents, v577);
            v578;
        }
        const v579 = grunt.verbose;
        const v580 = v579.ok();
        v580;
        return true;
    } catch (e) {
        const v581 = grunt.verbose;
        const v582 = v581.error();
        v582;
        const v583 = grunt.util;
        const v584 = 'Unable to write "' + filepath;
        const v585 = v584 + '" file (Error code: ';
        const v586 = e.code;
        const v587 = v585 + v586;
        const v588 = v587 + ').';
        const v589 = v583.error(v588, e);
        throw v589;
    }
};
file.write = v590;
const copy = function (srcpath, destpath, options) {
    const v591 = file._isSymbolicLink(srcpath);
    if (v591) {
        const v592 = file._copySymbolicLink(srcpath, destpath);
        v592;
    } else {
        const v593 = file.isDir(srcpath);
        if (v593) {
            const v594 = file.mkdir(destpath);
            v594;
            const v595 = fs.readdirSync(srcpath);
            const v599 = function (filepath) {
                const v596 = path.join(srcpath, filepath);
                const v597 = path.join(destpath, filepath);
                const v598 = copy(v596, v597, options);
                v598;
            };
            const v600 = v595.forEach(v599);
            v600;
        } else {
            const v601 = file._copy(srcpath, destpath, options);
            v601;
        }
    }
};
file.copy = copy;
const v627 = function (srcpath, destpath, options) {
    const v602 = !options;
    if (v602) {
        options = {};
    }
    const v603 = options.process;
    const v604 = options.noProcess;
    const v605 = v604 !== true;
    const v606 = v603 && v605;
    const v607 = options.noProcess;
    const v608 = options.noProcess;
    const v609 = file.isMatch(v608, srcpath);
    const v610 = v607 && v609;
    const v611 = !v610;
    var process = v606 && v611;
    let readWriteOptions;
    const v612 = { encoding: null };
    if (process) {
        readWriteOptions = options;
    } else {
        readWriteOptions = v612;
    }
    var contents = file.read(srcpath, readWriteOptions);
    if (process) {
        const v613 = grunt.verbose;
        const v614 = v613.write('Processing source...');
        v614;
        try {
            contents = options.process(contents, srcpath, destpath);
            const v615 = grunt.verbose;
            const v616 = v615.ok();
            v616;
        } catch (e) {
            const v617 = grunt.verbose;
            const v618 = v617.error();
            v618;
            const v619 = grunt.util;
            const v620 = 'Error while processing "' + srcpath;
            const v621 = v620 + '" file.';
            const v622 = v619.error(v621, e);
            throw v622;
        }
    }
    const v623 = contents === false;
    if (v623) {
        const v624 = grunt.verbose;
        const v625 = v624.writeln('Write aborted.');
        v625;
    } else {
        const v626 = file.write(destpath, contents, readWriteOptions);
        v626;
    }
};
file._copy = v627;
const v668 = function (filepath, options) {
    filepath = String(filepath);
    var nowrite = grunt.option('no-write');
    const v628 = !options;
    if (v628) {
        const v629 = grunt.option('force');
        const v630 = v629 || false;
        options.force = v630;
        options = {};
        options = {};
    }
    const v631 = grunt.verbose;
    let v632;
    if (nowrite) {
        v632 = 'Not actually deleting ';
    } else {
        v632 = 'Deleting ';
    }
    const v633 = v632 + filepath;
    const v634 = v633 + '...';
    const v635 = v631.write(v634);
    v635;
    const v636 = file.exists(filepath);
    const v637 = !v636;
    if (v637) {
        const v638 = grunt.verbose;
        const v639 = v638.error();
        v639;
        const v640 = grunt.log;
        const v641 = v640.warn('Cannot delete nonexistent file.');
        v641;
        return false;
    }
    const v642 = options.force;
    const v643 = !v642;
    if (v643) {
        const v644 = file.isPathCwd(filepath);
        if (v644) {
            const v645 = grunt.verbose;
            const v646 = v645.error();
            v646;
            const v647 = grunt.fail;
            const v648 = v647.warn('Cannot delete the current working directory.');
            v648;
            return false;
        } else {
            const v649 = file.isPathInCwd(filepath);
            const v650 = !v649;
            if (v650) {
                const v651 = grunt.verbose;
                const v652 = v651.error();
                v652;
                const v653 = grunt.fail;
                const v654 = v653.warn('Cannot delete files outside the current working directory.');
                v654;
                return false;
            }
        }
    }
    try {
        const v655 = !nowrite;
        if (v655) {
            const v656 = rimraf.sync(filepath);
            v656;
        }
        const v657 = grunt.verbose;
        const v658 = v657.ok();
        v658;
        return true;
    } catch (e) {
        const v659 = grunt.verbose;
        const v660 = v659.error();
        v660;
        const v661 = grunt.util;
        const v662 = 'Unable to delete "' + filepath;
        const v663 = v662 + '" file (';
        const v664 = e.message;
        const v665 = v663 + v664;
        const v666 = v665 + ').';
        const v667 = v661.error(v666, e);
        throw v667;
    }
};
file.delete = v668;
const v671 = function () {
    const v669 = path.join;
    var filepath = v669.apply(path, arguments);
    const v670 = fs.existsSync(filepath);
    return v670;
};
file.exists = v671;
const v684 = function () {
    const v672 = path.join;
    var filepath = v672.apply(path, arguments);
    try {
        const v673 = fs.lstatSync(filepath);
        const v674 = v673.isSymbolicLink();
        return v674;
    } catch (e) {
        const v675 = e.code;
        const v676 = v675 === 'ENOENT';
        if (v676) {
            return false;
        }
        const v677 = grunt.util;
        const v678 = 'Unable to read "' + filepath;
        const v679 = v678 + '" file (Error code: ';
        const v680 = e.code;
        const v681 = v679 + v680;
        const v682 = v681 + ').';
        const v683 = v677.error(v682, e);
        throw v683;
    }
};
file.isLink = v684;
const v690 = function () {
    const v685 = path.join;
    var filepath = v685.apply(path, arguments);
    const v686 = file.exists(filepath);
    const v687 = fs.statSync(filepath);
    const v688 = v687.isDirectory();
    const v689 = v686 && v688;
    return v689;
};
file.isDir = v690;
const v696 = function () {
    const v691 = path.join;
    var filepath = v691.apply(path, arguments);
    const v692 = file.exists(filepath);
    const v693 = fs.statSync(filepath);
    const v694 = v693.isFile();
    const v695 = v692 && v694;
    return v695;
};
file.isFile = v696;
const v699 = function () {
    const v697 = path.join;
    var filepath = v697.apply(path, arguments);
    const v698 = path.isAbsolute(filepath);
    return v698;
};
file.isPathAbsolute = v699;
const v706 = function (first) {
    first = path.resolve(first);
    var i = 1;
    const v700 = arguments.length;
    let v701 = i < v700;
    while (v701) {
        const v703 = arguments[i];
        const v704 = path.resolve(v703);
        const v705 = first !== v704;
        if (v705) {
            return false;
        }
        const v702 = i++;
        v701 = i < v700;
    }
    return true;
};
file.arePathsEquivalent = v706;
const v715 = function (ancestor) {
    ancestor = path.resolve(ancestor);
    var relative;
    var i = 1;
    const v707 = arguments.length;
    let v708 = i < v707;
    while (v708) {
        const v710 = arguments[i];
        const v711 = path.resolve(v710);
        relative = path.relative(v711, ancestor);
        const v712 = relative === '';
        const v713 = /\w+/.test(relative);
        const v714 = v712 || v713;
        if (v714) {
            return false;
        }
        const v709 = i++;
        v708 = i < v707;
    }
    return true;
};
file.doesPathContain = v715;
const v721 = function () {
    const v716 = path.join;
    var filepath = v716.apply(path, arguments);
    try {
        const v717 = process.cwd();
        const v718 = fs.realpathSync(v717);
        const v719 = fs.realpathSync(filepath);
        const v720 = file.arePathsEquivalent(v718, v719);
        return v720;
    } catch (e) {
        return false;
    }
};
file.isPathCwd = v721;
const v725 = function () {
    const v722 = path.join;
    var filepath = v722.apply(path, arguments);
    const v723 = fs.lstatSync(filepath);
    const v724 = v723.isSymbolicLink();
    return v724;
};
file._isSymbolicLink = v725;
const v734 = function (srcpath, destpath) {
    var destdir = path.join(destpath, '..');
    var fileBase = path.basename(srcpath);
    const v726 = grunt.file;
    const v727 = v726.isPathAbsolute(srcpath);
    const v728 = !v727;
    if (v728) {
        const v729 = path.relative(destdir, srcpath);
        srcpath = v729 || '.';
    }
    const v730 = file.mkdir(destdir);
    v730;
    let mode;
    const v731 = grunt.file;
    const v732 = v731.isDir(srcpath);
    if (v732) {
        mode = 'dir';
    } else {
        mode = 'file';
    }
    var destpath = path.join(destpath, fileBase);
    const v733 = fs.symlinkSync(srcpath, destpath, mode);
    return v733;
};
file._copySymbolicLink = v734;
const v740 = function () {
    const v735 = path.join;
    var filepath = v735.apply(path, arguments);
    try {
        const v736 = process.cwd();
        const v737 = fs.realpathSync(v736);
        const v738 = fs.realpathSync(filepath);
        const v739 = file.doesPathContain(v737, v738);
        return v739;
    } catch (e) {
        return false;
    }
};
file.isPathInCwd = v740;