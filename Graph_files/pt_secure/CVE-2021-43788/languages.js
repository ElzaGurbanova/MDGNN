'use strict';
const fs = require('fs');
const path = require('path');
const utils = require('./utils');
const v53 = require('./constants');
const paths = v53.paths;
const plugins = require('./plugins');
const Languages = module.exports;
const languagesPath = path.join(__dirname, '../build/public/language');
const v54 = paths.nodeModules;
const v55 = path.join(v54, '/timeago/locales');
const files = fs.readdirSync(v55);
const v57 = f => {
    const v56 = f.startsWith('jquery.timeago');
    return v56;
};
const v58 = files.filter(v57);
const v61 = f => {
    const v59 = f.split('.');
    const v60 = v59[2];
    return v60;
};
const v62 = v58.map(v61);
Languages.timeagoCodes = v62;
const v73 = async function (language, namespace) {
    const v63 = `${ namespace }.json`;
    const pathToLanguageFile = path.join(languagesPath, language, v63);
    const v64 = pathToLanguageFile.startsWith(languagesPath);
    const v65 = !v64;
    if (v65) {
        const v66 = new Error('[[error:invalid-path]]');
        throw v66;
    }
    const v67 = fs.promises;
    const data = await v67.readFile(pathToLanguageFile, 'utf8');
    const v68 = JSON.parse(data);
    const v69 = {};
    const parsed = v68 || v69;
    const v70 = plugins.hooks;
    const v71 = {
        language,
        namespace,
        data: parsed
    };
    const result = await v70.fire('filter:languages.get', v71);
    const v72 = result.data;
    return v72;
};
Languages.get = v73;
let codeCache = null;
const v82 = async function () {
    const v74 = codeCache.length;
    const v75 = codeCache && v74;
    if (v75) {
        return codeCache;
    }
    try {
        const v76 = fs.promises;
        const v77 = path.join(languagesPath, 'metadata.json');
        const file = await v76.readFile(v77, 'utf8');
        const parsed = JSON.parse(file);
        codeCache = parsed.languages;
        const v78 = parsed.languages;
        return v78;
    } catch (err) {
        const v79 = err.code;
        const v80 = v79 === 'ENOENT';
        if (v80) {
            const v81 = [];
            return v81;
        }
        throw err;
    }
};
Languages.listCodes = v82;
let listCache = null;
const v97 = async function () {
    const v83 = listCache.length;
    const v84 = listCache && v83;
    if (v84) {
        return listCache;
    }
    const codes = await Languages.listCodes();
    const v88 = async folder => {
        try {
            const configPath = path.join(languagesPath, folder, 'language.json');
            const v85 = fs.promises;
            const file = await v85.readFile(configPath, 'utf8');
            const lang = JSON.parse(file);
            return lang;
        } catch (err) {
            const v86 = err.code;
            const v87 = v86 === 'ENOENT';
            if (v87) {
                return;
            }
            throw err;
        }
    };
    const v89 = codes.map(v88);
    let languages = await Promise.all(v89);
    const v96 = lang => {
        const v90 = lang.code;
        const v91 = lang && v90;
        const v92 = lang.name;
        const v93 = v91 && v92;
        const v94 = lang.dir;
        const v95 = v93 && v94;
        return v95;
    };
    languages = languages.filter(v96);
    listCache = languages;
    return languages;
};
Languages.list = v97;
const v102 = async function (userLang) {
    const languageCodes = await Languages.listCodes();
    const timeagoCode = utils.userLangToTimeagoCode(userLang);
    const v98 = languageCodes.includes(userLang);
    const v99 = Languages.timeagoCodes;
    const v100 = v99.includes(timeagoCode);
    const v101 = v98 && v100;
    if (v101) {
        return timeagoCode;
    }
    return '';
};
Languages.userTimeagoCode = v102;
const v103 = require('./promisify');
const v104 = v103(Languages);
v104;