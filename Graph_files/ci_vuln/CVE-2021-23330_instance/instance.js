var path = require('path');
const v143 = require('child_process');
var spawn = v143.spawn;
const v144 = require('child_process');
var exec = v144.exec;
const v145 = require('events');
var EventEmitter = v145.EventEmitter;
const v146 = require('debug');
var debug = v146('launchpad:local:instance');
var rimraf = require('rimraf');
var getProcessId = function (name, callback) {
    const v147 = 'ps -clx | grep \'' + name;
    const v148 = v147 + '$\' | awk \'{print $2}\' | head -1';
    const v149 = 'ps -ax | grep \'' + name;
    const v150 = v149 + '$\' | awk \'{print $2}\' | head -1';
    const v151 = 'ps -clx | grep \'' + name;
    const v152 = v151 + '$\' | awk \'{print $2}\' | head -1';
    const v153 = 'ps -ax | grep \'' + name;
    const v154 = v153 + '$\' | awk \'{print $2}\' | head -1';
    var commands = {};
    commands.darwin = v148;
    commands.linux = v150;
    commands.freebsd = v152;
    commands.sunos = v154;
    const v155 = process.platform;
    const v156 = commands[v155];
    const v164 = function (err, stdout) {
        var pid = stdout.trim();
        const v157 = debug('Got process ID', name, pid);
        v157;
        const v158 = !pid;
        if (v158) {
            const v159 = 'There does not seem to be a ' + name;
            const v160 = v159 + ' process running';
            const v161 = new Error(v160);
            const v162 = callback(v161);
            return v162;
        }
        const v163 = callback(null, pid);
        v163;
    };
    const v165 = exec(v156, v164);
    v165;
};
var Instance = function (cmd, args, settings, options) {
    const v166 = {};
    this.options = options || v166;
    var self = this;
    let childProcess;
    const v167 = args === null;
    const v168 = {};
    const v169 = settings || v168;
    const v170 = exec(cmd, v169);
    const v171 = {};
    const v172 = settings || v171;
    const v173 = spawn(cmd, args, v172);
    if (v167) {
        childProcess = v170;
    } else {
        childProcess = v173;
    }
    const v174 = args === null;
    let v175;
    if (v174) {
        v175 = 'exec';
    } else {
        v175 = 'spawn';
    }
    const v176 = v175 + ' child process with process id';
    const v177 = childProcess.pid;
    const v178 = debug(v176, v177, cmd, args);
    v178;
    const v181 = function (code, signal) {
        const v179 = {
            code: code,
            signal: signal
        };
        const v180 = self.emit('stop', v179);
        v180;
    };
    const v182 = childProcess.on('exit', v181);
    v182;
    const v183 = settings.timeout;
    const v184 = settings && v183;
    if (v184) {
        const v185 = settings.timeout;
        var timeout = v185 * 1000;
        const v189 = function () {
            const v186 = self.id;
            const v187 = debug('Intance timed out', v186, timeout);
            v187;
            const v188 = self.stop();
            v188;
        };
        const v190 = setTimeout(v189, timeout);
        v190;
    }
    const v191 = childProcess.stdout;
    this.stdout = v191;
    const v192 = childProcess.stderr;
    this.stderr = v192;
    const v193 = childProcess.pid;
    this.id = v193;
    this.process = childProcess;
    this.cmd = cmd;
    this.args = args;
};
Instance.prototype = new EventEmitter();
const v194 = Instance.prototype;
const v203 = function (callback) {
    const v195 = this.options;
    const v196 = v195.process;
    if (v196) {
        const v197 = this.options;
        const v198 = v197.process;
        const v199 = getProcessId(v198, callback);
        v199;
    } else {
        const v200 = this.process;
        const v201 = v200.pid;
        const v202 = callback(null, v201);
        v202;
    }
};
v194.getPid = v203;
const v204 = Instance.prototype;
const v255 = function (callback) {
    var self = this;
    var command;
    const v205 = self.running;
    if (v205) {
        const v206 = this.id;
        const v207 = debug('Instance was open already, not stopping', v206);
        v207;
        const v208 = {};
        const v209 = callback(null, v208);
        return v209;
    }
    if (callback) {
        const v212 = function (data) {
            const v210 = debug('Instance stopped');
            v210;
            const v211 = callback(null, data);
            v211;
        };
        const v213 = this.once('stop', v212);
        v213;
    }
    const v214 = this.options;
    const v215 = v214.clean;
    if (v215) {
        try {
            const v216 = this.id;
            const v217 = debug('Killing process', v216);
            v217;
            const v218 = this.id;
            const v219 = -v218;
            const v220 = process.kill(v219);
            v220;
        } catch (error) {
        }
    } else {
        const v221 = this.options;
        const v222 = v221.command;
        const v223 = v222.indexOf('open');
        const v224 = v223 === 0;
        if (v224) {
            const v225 = self.options;
            const v226 = v225.process;
            const v227 = 'osascript -e \'tell application "' + v226;
            command = v227 + '" to quit\'';
            const v228 = debug('Executing shutdown AppleScript', command);
            v228;
            const v229 = exec(command);
            v229;
        } else {
            const v230 = process.platform;
            const v231 = v230 === 'win32';
            if (v231) {
                const v232 = this.options;
                const v233 = v232.imageName;
                const v234 = this.cmd;
                const v235 = path.basename(v234);
                const v236 = v233 || v235;
                command = 'taskkill /IM ' + v236;
                const v237 = debug('Executing shutdown taskkil', command);
                v237;
                const v238 = exec(command);
                const v240 = function (data) {
                    const v239 = self.emit('stop', data);
                    v239;
                };
                const v241 = v238.once('exit', v240);
                v241;
            } else {
                const v242 = this.id;
                const v243 = debug('Killing process', v242);
                v243;
                const v244 = this.process;
                const v245 = v244.kill();
                v245;
            }
        }
    }
    const v246 = this.options;
    const v247 = v246.tmpdir;
    if (v247) {
        const v248 = this.options;
        const v249 = v248.tmpdir;
        const v250 = debug('Removing tmpdir', v249);
        v250;
        const v251 = this.options;
        const v252 = v251.tmpdir;
        const v253 = function () {
        };
        const v254 = rimraf(v252, v253);
        v254;
    }
};
v204.stop = v255;
exports.Instance = Instance;
const v284 = function (cmd, args, settings, options, callback) {
    var getInstance = function () {
        const v256 = debug('Starting instance', cmd, args);
        v256;
        const v257 = new Instance(cmd, args, settings, options);
        return v257;
    };
    const v258 = options.process;
    const v259 = options.multi;
    const v260 = !v259;
    const v261 = v258 && v260;
    if (v261) {
        const v262 = options.process;
        const v280 = function (err, pid) {
            const v263 = !err;
            const v264 = options.opensTab;
            const v265 = !v264;
            const v266 = v263 && v265;
            if (v266) {
                const v267 = options.process;
                const v268 = v267 + ' seems already running with process id ';
                const v269 = v268 + pid;
                const v270 = new Error(v269);
                const v271 = callback(v270);
                return v271;
            }
            var instance = getInstance();
            const v272 = !err;
            const v273 = options.opensTab;
            const v274 = v272 && v273;
            const v275 = options.clean;
            const v276 = !v275;
            const v277 = v274 && v276;
            if (v277) {
                const v278 = debug('Marking instance as already running (but is able to open a tab)');
                v278;
                instance.running = true;
            }
            const v279 = callback(null, instance);
            return v279;
        };
        const v281 = getProcessId(v262, v280);
        v281;
    } else {
        const v282 = getInstance();
        const v283 = callback(null, v282);
        v283;
    }
};
exports.start = v284;