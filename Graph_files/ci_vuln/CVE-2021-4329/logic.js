;
const v349 = function (root, factory) {
    const v340 = typeof define;
    const v341 = v340 === 'function';
    const v342 = define.amd;
    const v343 = v341 && v342;
    if (v343) {
        const v344 = define(factory);
        v344;
    } else {
        const v345 = typeof exports;
        const v346 = v345 === 'object';
        if (v346) {
            const v347 = factory();
            module.exports = v347;
        } else {
            const v348 = factory();
            root.jsonLogic = v348;
        }
    }
};
const v677 = function () {
    'use strict';
    const v350 = Array.isArray;
    const v351 = !v350;
    if (v351) {
        const v356 = function (arg) {
            const v352 = Object.prototype;
            const v353 = v352.toString;
            const v354 = v353.call(arg);
            const v355 = v354 === '[object Array]';
            return v355;
        };
        Array.isArray = v356;
    }
    const arrayUnique = function (array) {
        var a = [];
        var i = 0;
        var l = array.length;
        let v357 = i < l;
        while (v357) {
            const v359 = array[i];
            const v360 = a.indexOf(v359);
            const v361 = -1;
            const v362 = v360 === v361;
            if (v362) {
                const v363 = array[i];
                const v364 = a.push(v363);
                v364;
            }
            const v358 = i++;
            v357 = i < l;
        }
        return a;
    };
    var jsonLogic = {};
    const v366 = function (a, b) {
        const v365 = a == b;
        return v365;
    };
    const v368 = function (a, b) {
        const v367 = a === b;
        return v367;
    };
    const v370 = function (a, b) {
        const v369 = a != b;
        return v369;
    };
    const v372 = function (a, b) {
        const v371 = a !== b;
        return v371;
    };
    const v374 = function (a, b) {
        const v373 = a > b;
        return v373;
    };
    const v376 = function (a, b) {
        const v375 = a >= b;
        return v375;
    };
    const v383 = function (a, b, c) {
        const v377 = c === undefined;
        const v378 = a < b;
        const v379 = a < b;
        const v380 = b < c;
        const v381 = v379 && v380;
        let v382;
        if (v377) {
            v382 = v378;
        } else {
            v382 = v381;
        }
        return v382;
    };
    const v390 = function (a, b, c) {
        const v384 = c === undefined;
        const v385 = a <= b;
        const v386 = a <= b;
        const v387 = b <= c;
        const v388 = v386 && v387;
        let v389;
        if (v384) {
            v389 = v385;
        } else {
            v389 = v388;
        }
        return v389;
    };
    const v392 = function (a) {
        const v391 = jsonLogic.truthy(a);
        return v391;
    };
    const v395 = function (a) {
        const v393 = jsonLogic.truthy(a);
        const v394 = !v393;
        return v394;
    };
    const v397 = function (a, b) {
        const v396 = a % b;
        return v396;
    };
    const v399 = function (a) {
        const v398 = console.log(a);
        v398;
        return a;
    };
    const v408 = function (a, b) {
        const v400 = !b;
        const v401 = b.indexOf;
        const v402 = typeof v401;
        const v403 = v402 === 'undefined';
        const v404 = v400 || v403;
        if (v404) {
            return false;
        }
        const v405 = b.indexOf(a);
        const v406 = -1;
        const v407 = v405 !== v406;
        return v407;
    };
    const v412 = function () {
        const v409 = Array.prototype;
        const v410 = v409.join;
        const v411 = v410.call(arguments, '');
        return v411;
    };
    const v420 = function (source, start, end) {
        const v413 = end < 0;
        if (v413) {
            const v414 = String(source);
            var temp = v414.substr(start);
            const v415 = temp.length;
            const v416 = v415 + end;
            const v417 = temp.substr(0, v416);
            return v417;
        }
        const v418 = String(source);
        const v419 = v418.substr(start, end);
        return v419;
    };
    const v428 = function () {
        const v421 = Array.prototype;
        const v422 = v421.reduce;
        const v426 = function (a, b) {
            const v423 = parseFloat(a, 10);
            const v424 = parseFloat(b, 10);
            const v425 = v423 + v424;
            return v425;
        };
        const v427 = v422.call(arguments, v426, 0);
        return v427;
    };
    const v436 = function () {
        const v429 = Array.prototype;
        const v430 = v429.reduce;
        const v434 = function (a, b) {
            const v431 = parseFloat(a, 10);
            const v432 = parseFloat(b, 10);
            const v433 = v431 * v432;
            return v433;
        };
        const v435 = v430.call(arguments, v434);
        return v435;
    };
    const v440 = function (a, b) {
        const v437 = b === undefined;
        if (v437) {
            const v438 = -a;
            return v438;
        } else {
            const v439 = a - b;
            return v439;
        }
    };
    const v442 = function (a, b) {
        const v441 = a / b;
        return v441;
    };
    const v445 = function () {
        const v443 = Math.min;
        const v444 = v443.apply(this, arguments);
        return v444;
    };
    const v448 = function () {
        const v446 = Math.max;
        const v447 = v446.apply(this, arguments);
        return v447;
    };
    const v455 = function () {
        const v449 = Array.prototype;
        const v450 = v449.reduce;
        const v452 = function (a, b) {
            const v451 = a.concat(b);
            return v451;
        };
        const v453 = [];
        const v454 = v450.call(arguments, v452, v453);
        return v454;
    };
    const v472 = function (a, b) {
        let not_found;
        const v456 = b === undefined;
        if (v456) {
            not_found = null;
        } else {
            not_found = b;
        }
        var data = this;
        const v457 = typeof a;
        const v458 = v457 === 'undefined';
        const v459 = a === '';
        const v460 = v458 || v459;
        const v461 = a === null;
        const v462 = v460 || v461;
        if (v462) {
            return data;
        }
        const v463 = String(a);
        var sub_props = v463.split('.');
        var i = 0;
        const v464 = sub_props.length;
        let v465 = i < v464;
        while (v465) {
            const v467 = data === null;
            const v468 = data === undefined;
            const v469 = v467 || v468;
            if (v469) {
                return not_found;
            }
            const v470 = sub_props[i];
            data = data[v470];
            const v471 = data === undefined;
            if (v471) {
                return not_found;
            }
            const v466 = i++;
            v465 = i < v464;
        }
        return data;
    };
    const v484 = function () {
        var missing = [];
        let keys;
        const v473 = arguments[0];
        const v474 = Array.isArray(v473);
        const v475 = arguments[0];
        if (v474) {
            keys = v475;
        } else {
            keys = arguments;
        }
        var i = 0;
        const v476 = keys.length;
        let v477 = i < v476;
        while (v477) {
            var key = keys[i];
            const v479 = { 'var': key };
            var value = jsonLogic.apply(v479, this);
            const v480 = value === null;
            const v481 = value === '';
            const v482 = v480 || v481;
            if (v482) {
                const v483 = missing.push(key);
                v483;
            }
            const v478 = i++;
            v477 = i < v476;
        }
        return missing;
    };
    const v491 = function (need_count, options) {
        const v485 = { 'missing': options };
        var are_missing = jsonLogic.apply(v485, this);
        const v486 = options.length;
        const v487 = are_missing.length;
        const v488 = v486 - v487;
        const v489 = v488 >= need_count;
        if (v489) {
            const v490 = [];
            return v490;
        } else {
            return are_missing;
        }
    };
    var operations = {};
    operations['=='] = v366;
    operations['==='] = v368;
    operations['!='] = v370;
    operations['!=='] = v372;
    operations['>'] = v374;
    operations['>='] = v376;
    operations['<'] = v383;
    operations['<='] = v390;
    operations['!!'] = v392;
    operations['!'] = v395;
    operations['%'] = v397;
    operations['log'] = v399;
    operations['in'] = v408;
    operations['cat'] = v412;
    operations['substr'] = v420;
    operations['+'] = v428;
    operations['*'] = v436;
    operations['-'] = v440;
    operations['/'] = v442;
    operations['min'] = v445;
    operations['max'] = v448;
    operations['merge'] = v455;
    operations['var'] = v472;
    operations['missing'] = v484;
    operations['missing_some'] = v491;
    const v503 = function (logic) {
        const v492 = typeof logic;
        const v493 = v492 === 'object';
        const v494 = logic !== null;
        const v495 = v493 && v494;
        const v496 = Array.isArray(logic);
        const v497 = !v496;
        const v498 = v495 && v497;
        const v499 = Object.keys(logic);
        const v500 = v499.length;
        const v501 = v500 === 1;
        const v502 = v498 && v501;
        return v502;
    };
    jsonLogic.is_logic = v503;
    const v510 = function (value) {
        const v504 = Array.isArray(value);
        const v505 = value.length;
        const v506 = v505 === 0;
        const v507 = v504 && v506;
        if (v507) {
            return false;
        }
        const v508 = !value;
        const v509 = !v508;
        return v509;
    };
    jsonLogic.truthy = v510;
    const v513 = function (logic) {
        const v511 = Object.keys(logic);
        const v512 = v511[0];
        return v512;
    };
    jsonLogic.get_operator = v513;
    const v516 = function (logic) {
        const v514 = jsonLogic.get_operator(logic);
        const v515 = logic[v514];
        return v515;
    };
    jsonLogic.get_values = v516;
    const v626 = function (logic, data) {
        const v517 = Array.isArray(logic);
        if (v517) {
            const v519 = function (l) {
                const v518 = jsonLogic.apply(l, data);
                return v518;
            };
            const v520 = logic.map(v519);
            return v520;
        }
        const v521 = jsonLogic.is_logic(logic);
        const v522 = !v521;
        if (v522) {
            return logic;
        }
        var op = jsonLogic.get_operator(logic);
        var values = logic[op];
        var i;
        var current;
        var scopedLogic;
        var scopedData;
        var filtered;
        var initial;
        const v523 = Array.isArray(values);
        const v524 = !v523;
        if (v524) {
            values = [values];
        }
        const v525 = op === 'if';
        const v526 = op == '?:';
        const v527 = v525 || v526;
        if (v527) {
            i = 0
            const v528 = values.length;
            const v529 = v528 - 1;
            let v530 = i < v529;
            while (v530) {
                const v531 = values[i];
                const v532 = jsonLogic.apply(v531, data);
                const v533 = jsonLogic.truthy(v532);
                if (v533) {
                    const v534 = i + 1;
                    const v535 = values[v534];
                    const v536 = jsonLogic.apply(v535, data);
                    return v536;
                }
                v530 = i < v529;
            }
            const v537 = values.length;
            const v538 = i + 1;
            const v539 = v537 === v538;
            if (v539) {
                const v540 = values[i];
                const v541 = jsonLogic.apply(v540, data);
                return v541;
            }
            return null;
        } else {
            const v542 = op === 'and';
            if (v542) {
                i = 0
                const v543 = values.length;
                let v544 = i < v543;
                while (v544) {
                    const v545 = values[i];
                    current = jsonLogic.apply(v545, data);
                    const v546 = jsonLogic.truthy(current);
                    const v547 = !v546;
                    if (v547) {
                        return current;
                    }
                    v544 = i < v543;
                }
                return current;
            } else {
                const v548 = op === 'or';
                if (v548) {
                    i = 0
                    const v549 = values.length;
                    let v550 = i < v549;
                    while (v550) {
                        const v551 = values[i];
                        current = jsonLogic.apply(v551, data);
                        const v552 = jsonLogic.truthy(current);
                        if (v552) {
                            return current;
                        }
                        v550 = i < v549;
                    }
                    return current;
                } else {
                    const v553 = op === 'filter';
                    if (v553) {
                        const v554 = values[0];
                        scopedData = jsonLogic.apply(v554, data);
                        scopedLogic = values[1];
                        const v555 = Array.isArray(scopedData);
                        const v556 = !v555;
                        if (v556) {
                            const v557 = [];
                            return v557;
                        }
                        const v560 = function (datum) {
                            const v558 = jsonLogic.apply(scopedLogic, datum);
                            const v559 = jsonLogic.truthy(v558);
                            return v559;
                        };
                        const v561 = scopedData.filter(v560);
                        return v561;
                    } else {
                        const v562 = op === 'map';
                        if (v562) {
                            const v563 = values[0];
                            scopedData = jsonLogic.apply(v563, data);
                            scopedLogic = values[1];
                            const v564 = Array.isArray(scopedData);
                            const v565 = !v564;
                            if (v565) {
                                const v566 = [];
                                return v566;
                            }
                            const v568 = function (datum) {
                                const v567 = jsonLogic.apply(scopedLogic, datum);
                                return v567;
                            };
                            const v569 = scopedData.map(v568);
                            return v569;
                        } else {
                            const v570 = op === 'reduce';
                            if (v570) {
                                const v571 = values[0];
                                scopedData = jsonLogic.apply(v571, data);
                                scopedLogic = values[1];
                                const v572 = values[2];
                                const v573 = typeof v572;
                                const v574 = v573 !== 'undefined';
                                const v575 = values[2];
                                if (v574) {
                                    initial = v575;
                                } else {
                                    initial = null;
                                }
                                const v576 = Array.isArray(scopedData);
                                const v577 = !v576;
                                if (v577) {
                                    return initial;
                                }
                                const v580 = function (accumulator, current) {
                                    const v578 = {
                                        current: current,
                                        accumulator: accumulator
                                    };
                                    const v579 = jsonLogic.apply(scopedLogic, v578);
                                    return v579;
                                };
                                const v581 = scopedData.reduce(v580, initial);
                                return v581;
                            } else {
                                const v582 = op === 'all';
                                if (v582) {
                                    const v583 = values[0];
                                    scopedData = jsonLogic.apply(v583, data);
                                    scopedLogic = values[1];
                                    const v584 = scopedData.length;
                                    const v585 = !v584;
                                    if (v585) {
                                        return false;
                                    }
                                    i = 0
                                    const v586 = scopedData.length;
                                    let v587 = i < v586;
                                    while (v587) {
                                        const v588 = scopedData[i];
                                        const v589 = jsonLogic.apply(scopedLogic, v588);
                                        const v590 = jsonLogic.truthy(v589);
                                        const v591 = !v590;
                                        if (v591) {
                                            return false;
                                        }
                                        v587 = i < v586;
                                    }
                                    return true;
                                } else {
                                    const v592 = op === 'none';
                                    if (v592) {
                                        const v593 = { filter: values };
                                        filtered = jsonLogic.apply(v593, data);
                                        const v594 = filtered.length;
                                        const v595 = v594 === 0;
                                        return v595;
                                    } else {
                                        const v596 = op === 'some';
                                        if (v596) {
                                            const v597 = { filter: values };
                                            filtered = jsonLogic.apply(v597, data);
                                            const v598 = filtered.length;
                                            const v599 = v598 > 0;
                                            return v599;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        const v601 = function (val) {
            const v600 = jsonLogic.apply(val, data);
            return v600;
        };
        values = values.map(v601);
        const v602 = operations[op];
        const v603 = typeof v602;
        const v604 = v603 === 'function';
        if (v604) {
            const v605 = operations[op];
            const v606 = v605.apply(data, values);
            return v606;
        } else {
            const v607 = op.indexOf('.');
            const v608 = v607 > 0;
            if (v608) {
                const v609 = String(op);
                var sub_ops = v609.split('.');
                var operation = operations;
                i = 0
                const v610 = sub_ops.length;
                let v611 = i < v610;
                while (v611) {
                    const v613 = sub_ops[i];
                    operation = operation[v613];
                    const v614 = operation === undefined;
                    if (v614) {
                        const v615 = 'Unrecognized operation ' + op;
                        const v616 = v615 + ' (failed at ';
                        const v617 = i + 1;
                        const v618 = sub_ops.slice(0, v617);
                        const v619 = v618.join('.');
                        const v620 = v616 + v619;
                        const v621 = v620 + ')';
                        const v622 = new Error(v621);
                        throw v622;
                    }
                    const v612 = i++;
                    v611 = i < v610;
                }
                const v623 = operation.apply(data, values);
                return v623;
            }
        }
        const v624 = 'Unrecognized operation ' + op;
        const v625 = new Error(v624);
        throw v625;
    };
    jsonLogic.apply = v626;
    const v639 = function (logic) {
        var collection = [];
        const v627 = jsonLogic.is_logic(logic);
        if (v627) {
            var op = jsonLogic.get_operator(logic);
            var values = logic[op];
            const v628 = Array.isArray(values);
            const v629 = !v628;
            if (v629) {
                values = [values];
            }
            const v630 = op === 'var';
            if (v630) {
                const v631 = values[0];
                const v632 = collection.push(v631);
                v632;
            } else {
                const v636 = function (val) {
                    const v633 = collection.push;
                    const v634 = jsonLogic.uses_data(val);
                    const v635 = v633.apply(collection, v634);
                    v635;
                };
                const v637 = values.map(v636);
                v637;
            }
        }
        const v638 = arrayUnique(collection);
        return v638;
    };
    jsonLogic.uses_data = v639;
    const v640 = function (name, code) {
        operations[name] = code;
    };
    jsonLogic.add_operation = v640;
    const v643 = function (name) {
        const v641 = operations[name];
        const v642 = delete v641;
        v642;
    };
    jsonLogic.rm_operation = v643;
    const v676 = function (rule, pattern) {
        const v644 = pattern === rule;
        if (v644) {
            return true;
        }
        const v645 = pattern === '@';
        if (v645) {
            return true;
        }
        const v646 = pattern === 'number';
        if (v646) {
            const v647 = typeof rule;
            const v648 = v647 === 'number';
            return v648;
        }
        const v649 = pattern === 'string';
        if (v649) {
            const v650 = typeof rule;
            const v651 = v650 === 'string';
            return v651;
        }
        const v652 = pattern === 'array';
        if (v652) {
            const v653 = Array.isArray(rule);
            const v654 = jsonLogic.is_logic(rule);
            const v655 = !v654;
            const v656 = v653 && v655;
            return v656;
        }
        const v657 = jsonLogic.is_logic(pattern);
        if (v657) {
            const v658 = jsonLogic.is_logic(rule);
            if (v658) {
                var pattern_op = jsonLogic.get_operator(pattern);
                var rule_op = jsonLogic.get_operator(rule);
                const v659 = pattern_op === '@';
                const v660 = pattern_op === rule_op;
                const v661 = v659 || v660;
                if (v661) {
                    const v662 = jsonLogic.get_values(rule, false);
                    const v663 = jsonLogic.get_values(pattern, false);
                    const v664 = jsonLogic.rule_like(v662, v663);
                    return v664;
                }
            }
            return false;
        }
        const v665 = Array.isArray(pattern);
        if (v665) {
            const v666 = Array.isArray(rule);
            if (v666) {
                const v667 = pattern.length;
                const v668 = rule.length;
                const v669 = v667 !== v668;
                if (v669) {
                    return false;
                }
                var i = 0;
                const v670 = pattern.length;
                let v671 = i < v670;
                while (v671) {
                    const v672 = rule[i];
                    const v673 = pattern[i];
                    const v674 = jsonLogic.rule_like(v672, v673);
                    const v675 = !v674;
                    if (v675) {
                        return false;
                    }
                    v671 = i < v670;
                }
                return true;
            } else {
                return false;
            }
        }
        return false;
    };
    jsonLogic.rule_like = v676;
    return jsonLogic;
};
const v678 = v349(this, v677);
v678;