'use strict';
var os = require('os');
const v102 = require('child_process');
var exec = v102.exec;
var async = require('async');
const trim_exec = function (cmd, cb) {
    const v110 = function (err, out) {
        const v103 = out.toString();
        const v104 = v103 != '';
        const v105 = out && v104;
        if (v105) {
            const v106 = out.toString();
            const v107 = v106.trim();
            const v108 = cb(null, v107);
            v108;
        } else {
            const v109 = cb(err);
            v109;
        }
    };
    const v111 = exec(cmd, v110);
    v111;
};
const determine_nic_type = function (str) {
    const v112 = str.match(/Ethernet/);
    const v113 = str.match(/Wi-?Fi|AirPort/i);
    const v114 = str.match(/FireWire/);
    const v115 = str.match(/Thunderbolt/);
    const v116 = str.match(/Bluetooth/);
    const v117 = str.match(/USB 10\/100\/1000 LAN/);
    let v118;
    if (v117) {
        v118 = 'USB Ethernet Adapter';
    } else {
        v118 = 'Other';
    }
    let v119;
    if (v116) {
        v119 = 'Bluetooth';
    } else {
        v119 = v118;
    }
    let v120;
    if (v115) {
        v120 = 'Thunderbolt';
    } else {
        v120 = v119;
    }
    let v121;
    if (v114) {
        v121 = 'FireWire';
    } else {
        v121 = v120;
    }
    let v122;
    if (v113) {
        v122 = 'Wireless';
    } else {
        v122 = v121;
    }
    let v123;
    if (v112) {
        v123 = 'Wired';
    } else {
        v123 = v122;
    }
    return v123;
};
const v138 = function (cb) {
    var cmd = 'netstat -rn | grep UG | awk \'{print $NF}\'';
    const v136 = function (err, stdout) {
        if (err) {
            const v124 = cb(err);
            return v124;
        }
        const v125 = stdout.toString();
        const v126 = v125.trim();
        var raw = v126.split('\n');
        const v127 = raw.length;
        const v128 = v127 === 0;
        const v129 = [''];
        const v130 = raw === v129;
        const v131 = v128 || v130;
        if (v131) {
            const v132 = new Error('No active network interface found.');
            const v133 = cb(v132);
            return v133;
        }
        const v134 = raw[0];
        const v135 = cb(null, v134);
        v135;
    };
    const v137 = exec(cmd, v136);
    v137;
};
exports.get_active_network_interface_name = v138;
const v141 = function (nic_name, cb) {
    const v139 = 'networksetup -getmacaddress ' + nic_name;
    var cmd = v139 + ' | awk \'{print $3}\'';
    const v140 = trim_exec(cmd, cb);
    v140;
};
exports.mac_address_for = v141;
const v144 = function (nic_name, cb) {
    const v142 = 'ipconfig getoption ' + nic_name;
    var cmd = v142 + ' router';
    const v143 = trim_exec(cmd, cb);
    v143;
};
exports.gateway_ip_for = v144;
const v147 = function (nic_name, cb) {
    const v145 = 'ipconfig getoption ' + nic_name;
    var cmd = v145 + ' subnet_mask';
    const v146 = trim_exec(cmd, cb);
    v146;
};
exports.netmask_for = v147;
const v150 = function (nic_name, cb) {
    const v148 = 'netstat -rn | grep ' + nic_name;
    var cmd = v148 + ' | grep UG | wc -l | sed -e "s/1/active/" | sed -e "s/0/inactive/"';
    const v149 = trim_exec(cmd, cb);
    v149;
};
exports.status_for = v150;
const v202 = function (cb) {
    var count = 0;
    var list = [];
    var nics = os.networkInterfaces();
    const append_data = function (obj) {
        const v153 = function (cb) {
            const v151 = obj.name;
            const v152 = exports.gateway_ip_for(v151, cb);
            v152;
        };
        const v156 = function (cb) {
            const v154 = obj.name;
            const v155 = exports.netmask_for(v154, cb);
            v155;
        };
        const v159 = function (cb) {
            const v157 = obj.name;
            const v158 = exports.status_for(v157, cb);
            v158;
        };
        const v160 = [
            v153,
            v156,
            v159
        ];
        const v171 = function (err, results) {
            const v161 = results[0];
            if (v161) {
                const v162 = results[0];
                obj.gateway_ip = v162;
            }
            const v163 = results[1];
            if (v163) {
                const v164 = results[1];
                obj.netmask = v164;
            }
            const v165 = results[2];
            if (v165) {
                const v166 = results[2];
                obj.status = v166;
            }
            const v167 = list.push(obj);
            v167;
            const v168 = --count;
            const v169 = cb(null, list);
            const v170 = v168 || v169;
            v170;
        };
        const v172 = async.parallel(v160, v171);
        v172;
    };
    const v200 = function (err, out) {
        if (err) {
            const v173 = cb(err);
            return v173;
        }
        const v174 = out.toString();
        const v175 = v174.split(/Hardware/);
        var blocks = v175.slice(1);
        count = blocks.length;
        const v195 = function (block) {
            var parts = block.match(/Port: (.+)/);
            var mac = block.match(/Address: ([A-Fa-f0-9:-]+)/);
            var name = block.match(/Device: (\w+)/);
            const v176 = !parts;
            const v177 = !mac;
            const v178 = v176 || v177;
            const v179 = !name;
            const v180 = v178 || v179;
            if (v180) {
                const v181 = --count;
                return v181;
            }
            var obj = {};
            var port = parts[1];
            const v182 = name[1];
            obj.name = v182;
            obj.desc = port;
            const v183 = determine_nic_type(port);
            obj.type = v183;
            obj.ip_address = null;
            const v184 = mac[1];
            obj.mac_address = v184;
            const v185 = obj.name;
            const v186 = nics[v185];
            const v187 = [];
            const v188 = v186 || v187;
            const v192 = function (type) {
                const v189 = type.family;
                const v190 = v189 == 'IPv4';
                if (v190) {
                    const v191 = type.address;
                    obj.ip_address = v191;
                }
            };
            const v193 = v188.forEach(v192);
            v193;
            const v194 = append_data(obj);
            v194;
        };
        const v196 = blocks.forEach(v195);
        v196;
        const v197 = count == 0;
        if (v197) {
            const v198 = new Error('No interfaces found.');
            const v199 = cb(v198);
            v199;
        }
    };
    const v201 = exec('networksetup -listallhardwareports', v200);
    v201;
};
exports.get_network_interfaces_list = v202;