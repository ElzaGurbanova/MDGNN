;
const v353 = function (root, factory) {
    const v344 = typeof define;
    const v345 = v344 === 'function';
    const v346 = define.amd;
    const v347 = v345 && v346;
    if (v347) {
        const v348 = define(factory);
        v348;
    } else {
        const v349 = typeof exports;
        const v350 = v349 === 'object';
        if (v350) {
            const v351 = factory();
            module.exports = v351;
        } else {
            const v352 = factory();
            root.jsonLogic = v352;
        }
    }
};
const v685 = function () {
    'use strict';
    const v354 = Array.isArray;
    const v355 = !v354;
    if (v355) {
        const v360 = function (arg) {
            const v356 = Object.prototype;
            const v357 = v356.toString;
            const v358 = v357.call(arg);
            const v359 = v358 === '[object Array]';
            return v359;
        };
        Array.isArray = v360;
    }
    const arrayUnique = function (array) {
        var a = [];
        var i = 0;
        var l = array.length;
        let v361 = i < l;
        while (v361) {
            const v363 = array[i];
            const v364 = a.indexOf(v363);
            const v365 = -1;
            const v366 = v364 === v365;
            if (v366) {
                const v367 = array[i];
                const v368 = a.push(v367);
                v368;
            }
            const v362 = i++;
            v361 = i < l;
        }
        return a;
    };
    var jsonLogic = {};
    const v370 = function (a, b) {
        const v369 = a == b;
        return v369;
    };
    const v372 = function (a, b) {
        const v371 = a === b;
        return v371;
    };
    const v374 = function (a, b) {
        const v373 = a != b;
        return v373;
    };
    const v376 = function (a, b) {
        const v375 = a !== b;
        return v375;
    };
    const v378 = function (a, b) {
        const v377 = a > b;
        return v377;
    };
    const v380 = function (a, b) {
        const v379 = a >= b;
        return v379;
    };
    const v387 = function (a, b, c) {
        const v381 = c === undefined;
        const v382 = a < b;
        const v383 = a < b;
        const v384 = b < c;
        const v385 = v383 && v384;
        let v386;
        if (v381) {
            v386 = v382;
        } else {
            v386 = v385;
        }
        return v386;
    };
    const v394 = function (a, b, c) {
        const v388 = c === undefined;
        const v389 = a <= b;
        const v390 = a <= b;
        const v391 = b <= c;
        const v392 = v390 && v391;
        let v393;
        if (v388) {
            v393 = v389;
        } else {
            v393 = v392;
        }
        return v393;
    };
    const v396 = function (a) {
        const v395 = jsonLogic.truthy(a);
        return v395;
    };
    const v399 = function (a) {
        const v397 = jsonLogic.truthy(a);
        const v398 = !v397;
        return v398;
    };
    const v401 = function (a, b) {
        const v400 = a % b;
        return v400;
    };
    const v403 = function (a) {
        const v402 = console.log(a);
        v402;
        return a;
    };
    const v412 = function (a, b) {
        const v404 = !b;
        const v405 = b.indexOf;
        const v406 = typeof v405;
        const v407 = v406 === 'undefined';
        const v408 = v404 || v407;
        if (v408) {
            return false;
        }
        const v409 = b.indexOf(a);
        const v410 = -1;
        const v411 = v409 !== v410;
        return v411;
    };
    const v416 = function () {
        const v413 = Array.prototype;
        const v414 = v413.join;
        const v415 = v414.call(arguments, '');
        return v415;
    };
    const v424 = function (source, start, end) {
        const v417 = end < 0;
        if (v417) {
            const v418 = String(source);
            var temp = v418.substr(start);
            const v419 = temp.length;
            const v420 = v419 + end;
            const v421 = temp.substr(0, v420);
            return v421;
        }
        const v422 = String(source);
        const v423 = v422.substr(start, end);
        return v423;
    };
    const v432 = function () {
        const v425 = Array.prototype;
        const v426 = v425.reduce;
        const v430 = function (a, b) {
            const v427 = parseFloat(a, 10);
            const v428 = parseFloat(b, 10);
            const v429 = v427 + v428;
            return v429;
        };
        const v431 = v426.call(arguments, v430, 0);
        return v431;
    };
    const v440 = function () {
        const v433 = Array.prototype;
        const v434 = v433.reduce;
        const v438 = function (a, b) {
            const v435 = parseFloat(a, 10);
            const v436 = parseFloat(b, 10);
            const v437 = v435 * v436;
            return v437;
        };
        const v439 = v434.call(arguments, v438);
        return v439;
    };
    const v444 = function (a, b) {
        const v441 = b === undefined;
        if (v441) {
            const v442 = -a;
            return v442;
        } else {
            const v443 = a - b;
            return v443;
        }
    };
    const v446 = function (a, b) {
        const v445 = a / b;
        return v445;
    };
    const v449 = function () {
        const v447 = Math.min;
        const v448 = v447.apply(this, arguments);
        return v448;
    };
    const v452 = function () {
        const v450 = Math.max;
        const v451 = v450.apply(this, arguments);
        return v451;
    };
    const v459 = function () {
        const v453 = Array.prototype;
        const v454 = v453.reduce;
        const v456 = function (a, b) {
            const v455 = a.concat(b);
            return v455;
        };
        const v457 = [];
        const v458 = v454.call(arguments, v456, v457);
        return v458;
    };
    const v476 = function (a, b) {
        let not_found;
        const v460 = b === undefined;
        if (v460) {
            not_found = null;
        } else {
            not_found = b;
        }
        var data = this;
        const v461 = typeof a;
        const v462 = v461 === 'undefined';
        const v463 = a === '';
        const v464 = v462 || v463;
        const v465 = a === null;
        const v466 = v464 || v465;
        if (v466) {
            return data;
        }
        const v467 = String(a);
        var sub_props = v467.split('.');
        var i = 0;
        const v468 = sub_props.length;
        let v469 = i < v468;
        while (v469) {
            const v471 = data === null;
            const v472 = data === undefined;
            const v473 = v471 || v472;
            if (v473) {
                return not_found;
            }
            const v474 = sub_props[i];
            data = data[v474];
            const v475 = data === undefined;
            if (v475) {
                return not_found;
            }
            const v470 = i++;
            v469 = i < v468;
        }
        return data;
    };
    const v488 = function () {
        var missing = [];
        let keys;
        const v477 = arguments[0];
        const v478 = Array.isArray(v477);
        const v479 = arguments[0];
        if (v478) {
            keys = v479;
        } else {
            keys = arguments;
        }
        var i = 0;
        const v480 = keys.length;
        let v481 = i < v480;
        while (v481) {
            var key = keys[i];
            const v483 = { 'var': key };
            var value = jsonLogic.apply(v483, this);
            const v484 = value === null;
            const v485 = value === '';
            const v486 = v484 || v485;
            if (v486) {
                const v487 = missing.push(key);
                v487;
            }
            const v482 = i++;
            v481 = i < v480;
        }
        return missing;
    };
    const v495 = function (need_count, options) {
        const v489 = { 'missing': options };
        var are_missing = jsonLogic.apply(v489, this);
        const v490 = options.length;
        const v491 = are_missing.length;
        const v492 = v490 - v491;
        const v493 = v492 >= need_count;
        if (v493) {
            const v494 = [];
            return v494;
        } else {
            return are_missing;
        }
    };
    var operations = {};
    operations['=='] = v370;
    operations['==='] = v372;
    operations['!='] = v374;
    operations['!=='] = v376;
    operations['>'] = v378;
    operations['>='] = v380;
    operations['<'] = v387;
    operations['<='] = v394;
    operations['!!'] = v396;
    operations['!'] = v399;
    operations['%'] = v401;
    operations['log'] = v403;
    operations['in'] = v412;
    operations['cat'] = v416;
    operations['substr'] = v424;
    operations['+'] = v432;
    operations['*'] = v440;
    operations['-'] = v444;
    operations['/'] = v446;
    operations['min'] = v449;
    operations['max'] = v452;
    operations['merge'] = v459;
    operations['var'] = v476;
    operations['missing'] = v488;
    operations['missing_some'] = v495;
    const v507 = function (logic) {
        const v496 = typeof logic;
        const v497 = v496 === 'object';
        const v498 = logic !== null;
        const v499 = v497 && v498;
        const v500 = Array.isArray(logic);
        const v501 = !v500;
        const v502 = v499 && v501;
        const v503 = Object.keys(logic);
        const v504 = v503.length;
        const v505 = v504 === 1;
        const v506 = v502 && v505;
        return v506;
    };
    jsonLogic.is_logic = v507;
    const v514 = function (value) {
        const v508 = Array.isArray(value);
        const v509 = value.length;
        const v510 = v509 === 0;
        const v511 = v508 && v510;
        if (v511) {
            return false;
        }
        const v512 = !value;
        const v513 = !v512;
        return v513;
    };
    jsonLogic.truthy = v514;
    const v517 = function (logic) {
        const v515 = Object.keys(logic);
        const v516 = v515[0];
        return v516;
    };
    jsonLogic.get_operator = v517;
    const v520 = function (logic) {
        const v518 = jsonLogic.get_operator(logic);
        const v519 = logic[v518];
        return v519;
    };
    jsonLogic.get_values = v520;
    const v634 = function (logic, data) {
        const v521 = Array.isArray(logic);
        if (v521) {
            const v523 = function (l) {
                const v522 = jsonLogic.apply(l, data);
                return v522;
            };
            const v524 = logic.map(v523);
            return v524;
        }
        const v525 = jsonLogic.is_logic(logic);
        const v526 = !v525;
        if (v526) {
            return logic;
        }
        var op = jsonLogic.get_operator(logic);
        var values = logic[op];
        var i;
        var current;
        var scopedLogic;
        var scopedData;
        var filtered;
        var initial;
        const v527 = Array.isArray(values);
        const v528 = !v527;
        if (v528) {
            values = [values];
        }
        const v529 = op === 'if';
        const v530 = op == '?:';
        const v531 = v529 || v530;
        if (v531) {
            i = 0
            const v532 = values.length;
            const v533 = v532 - 1;
            let v534 = i < v533;
            while (v534) {
                const v535 = values[i];
                const v536 = jsonLogic.apply(v535, data);
                const v537 = jsonLogic.truthy(v536);
                if (v537) {
                    const v538 = i + 1;
                    const v539 = values[v538];
                    const v540 = jsonLogic.apply(v539, data);
                    return v540;
                }
                v534 = i < v533;
            }
            const v541 = values.length;
            const v542 = i + 1;
            const v543 = v541 === v542;
            if (v543) {
                const v544 = values[i];
                const v545 = jsonLogic.apply(v544, data);
                return v545;
            }
            return null;
        } else {
            const v546 = op === 'and';
            if (v546) {
                i = 0
                const v547 = values.length;
                let v548 = i < v547;
                while (v548) {
                    const v549 = values[i];
                    current = jsonLogic.apply(v549, data);
                    const v550 = jsonLogic.truthy(current);
                    const v551 = !v550;
                    if (v551) {
                        return current;
                    }
                    v548 = i < v547;
                }
                return current;
            } else {
                const v552 = op === 'or';
                if (v552) {
                    i = 0
                    const v553 = values.length;
                    let v554 = i < v553;
                    while (v554) {
                        const v555 = values[i];
                        current = jsonLogic.apply(v555, data);
                        const v556 = jsonLogic.truthy(current);
                        if (v556) {
                            return current;
                        }
                        v554 = i < v553;
                    }
                    return current;
                } else {
                    const v557 = op === 'filter';
                    if (v557) {
                        const v558 = values[0];
                        scopedData = jsonLogic.apply(v558, data);
                        scopedLogic = values[1];
                        const v559 = Array.isArray(scopedData);
                        const v560 = !v559;
                        if (v560) {
                            const v561 = [];
                            return v561;
                        }
                        const v564 = function (datum) {
                            const v562 = jsonLogic.apply(scopedLogic, datum);
                            const v563 = jsonLogic.truthy(v562);
                            return v563;
                        };
                        const v565 = scopedData.filter(v564);
                        return v565;
                    } else {
                        const v566 = op === 'map';
                        if (v566) {
                            const v567 = values[0];
                            scopedData = jsonLogic.apply(v567, data);
                            scopedLogic = values[1];
                            const v568 = Array.isArray(scopedData);
                            const v569 = !v568;
                            if (v569) {
                                const v570 = [];
                                return v570;
                            }
                            const v572 = function (datum) {
                                const v571 = jsonLogic.apply(scopedLogic, datum);
                                return v571;
                            };
                            const v573 = scopedData.map(v572);
                            return v573;
                        } else {
                            const v574 = op === 'reduce';
                            if (v574) {
                                const v575 = values[0];
                                scopedData = jsonLogic.apply(v575, data);
                                scopedLogic = values[1];
                                const v576 = values[2];
                                const v577 = typeof v576;
                                const v578 = v577 !== 'undefined';
                                const v579 = values[2];
                                if (v578) {
                                    initial = v579;
                                } else {
                                    initial = null;
                                }
                                const v580 = Array.isArray(scopedData);
                                const v581 = !v580;
                                if (v581) {
                                    return initial;
                                }
                                const v584 = function (accumulator, current) {
                                    const v582 = {
                                        current: current,
                                        accumulator: accumulator
                                    };
                                    const v583 = jsonLogic.apply(scopedLogic, v582);
                                    return v583;
                                };
                                const v585 = scopedData.reduce(v584, initial);
                                return v585;
                            } else {
                                const v586 = op === 'all';
                                if (v586) {
                                    const v587 = values[0];
                                    scopedData = jsonLogic.apply(v587, data);
                                    scopedLogic = values[1];
                                    const v588 = scopedData.length;
                                    const v589 = !v588;
                                    if (v589) {
                                        return false;
                                    }
                                    i = 0
                                    const v590 = scopedData.length;
                                    let v591 = i < v590;
                                    while (v591) {
                                        const v592 = scopedData[i];
                                        const v593 = jsonLogic.apply(scopedLogic, v592);
                                        const v594 = jsonLogic.truthy(v593);
                                        const v595 = !v594;
                                        if (v595) {
                                            return false;
                                        }
                                        v591 = i < v590;
                                    }
                                    return true;
                                } else {
                                    const v596 = op === 'none';
                                    if (v596) {
                                        const v597 = { filter: values };
                                        filtered = jsonLogic.apply(v597, data);
                                        const v598 = filtered.length;
                                        const v599 = v598 === 0;
                                        return v599;
                                    } else {
                                        const v600 = op === 'some';
                                        if (v600) {
                                            const v601 = { filter: values };
                                            filtered = jsonLogic.apply(v601, data);
                                            const v602 = filtered.length;
                                            const v603 = v602 > 0;
                                            return v603;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        const v605 = function (val) {
            const v604 = jsonLogic.apply(val, data);
            return v604;
        };
        values = values.map(v605);
        const v606 = operations.hasOwnProperty(op);
        const v607 = operations[op];
        const v608 = typeof v607;
        const v609 = v608 === 'function';
        const v610 = v606 && v609;
        if (v610) {
            const v611 = operations[op];
            const v612 = v611.apply(data, values);
            return v612;
        } else {
            const v613 = op.indexOf('.');
            const v614 = v613 > 0;
            if (v614) {
                const v615 = String(op);
                var sub_ops = v615.split('.');
                var operation = operations;
                i = 0
                const v616 = sub_ops.length;
                let v617 = i < v616;
                while (v617) {
                    const v619 = sub_ops[i];
                    const v620 = operation.hasOwnProperty(v619);
                    const v621 = !v620;
                    if (v621) {
                        const v622 = 'Unrecognized operation ' + op;
                        const v623 = v622 + ' (failed at ';
                        const v624 = i + 1;
                        const v625 = sub_ops.slice(0, v624);
                        const v626 = v625.join('.');
                        const v627 = v623 + v626;
                        const v628 = v627 + ')';
                        const v629 = new Error(v628);
                        throw v629;
                    }
                    const v630 = sub_ops[i];
                    operation = operation[v630];
                    const v618 = i++;
                    v617 = i < v616;
                }
                const v631 = operation.apply(data, values);
                return v631;
            }
        }
        const v632 = 'Unrecognized operation ' + op;
        const v633 = new Error(v632);
        throw v633;
    };
    jsonLogic.apply = v634;
    const v647 = function (logic) {
        var collection = [];
        const v635 = jsonLogic.is_logic(logic);
        if (v635) {
            var op = jsonLogic.get_operator(logic);
            var values = logic[op];
            const v636 = Array.isArray(values);
            const v637 = !v636;
            if (v637) {
                values = [values];
            }
            const v638 = op === 'var';
            if (v638) {
                const v639 = values[0];
                const v640 = collection.push(v639);
                v640;
            } else {
                const v644 = function (val) {
                    const v641 = collection.push;
                    const v642 = jsonLogic.uses_data(val);
                    const v643 = v641.apply(collection, v642);
                    v643;
                };
                const v645 = values.map(v644);
                v645;
            }
        }
        const v646 = arrayUnique(collection);
        return v646;
    };
    jsonLogic.uses_data = v647;
    const v648 = function (name, code) {
        operations[name] = code;
    };
    jsonLogic.add_operation = v648;
    const v651 = function (name) {
        const v649 = operations[name];
        const v650 = delete v649;
        v650;
    };
    jsonLogic.rm_operation = v651;
    const v684 = function (rule, pattern) {
        const v652 = pattern === rule;
        if (v652) {
            return true;
        }
        const v653 = pattern === '@';
        if (v653) {
            return true;
        }
        const v654 = pattern === 'number';
        if (v654) {
            const v655 = typeof rule;
            const v656 = v655 === 'number';
            return v656;
        }
        const v657 = pattern === 'string';
        if (v657) {
            const v658 = typeof rule;
            const v659 = v658 === 'string';
            return v659;
        }
        const v660 = pattern === 'array';
        if (v660) {
            const v661 = Array.isArray(rule);
            const v662 = jsonLogic.is_logic(rule);
            const v663 = !v662;
            const v664 = v661 && v663;
            return v664;
        }
        const v665 = jsonLogic.is_logic(pattern);
        if (v665) {
            const v666 = jsonLogic.is_logic(rule);
            if (v666) {
                var pattern_op = jsonLogic.get_operator(pattern);
                var rule_op = jsonLogic.get_operator(rule);
                const v667 = pattern_op === '@';
                const v668 = pattern_op === rule_op;
                const v669 = v667 || v668;
                if (v669) {
                    const v670 = jsonLogic.get_values(rule, false);
                    const v671 = jsonLogic.get_values(pattern, false);
                    const v672 = jsonLogic.rule_like(v670, v671);
                    return v672;
                }
            }
            return false;
        }
        const v673 = Array.isArray(pattern);
        if (v673) {
            const v674 = Array.isArray(rule);
            if (v674) {
                const v675 = pattern.length;
                const v676 = rule.length;
                const v677 = v675 !== v676;
                if (v677) {
                    return false;
                }
                var i = 0;
                const v678 = pattern.length;
                let v679 = i < v678;
                while (v679) {
                    const v680 = rule[i];
                    const v681 = pattern[i];
                    const v682 = jsonLogic.rule_like(v680, v681);
                    const v683 = !v682;
                    if (v683) {
                        return false;
                    }
                    v679 = i < v678;
                }
                return true;
            } else {
                return false;
            }
        }
        return false;
    };
    jsonLogic.rule_like = v684;
    return jsonLogic;
};
const v686 = v353(this, v685);
v686;