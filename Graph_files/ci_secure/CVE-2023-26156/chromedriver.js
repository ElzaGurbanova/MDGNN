const fs = require('fs');
const path = require('path');
const tcpPortUsed = require('tcp-port-used');
const getPortFromArgs = function (args) {
    let port = 9515;
    const v36 = !args;
    if (v36) {
        return port;
    }
    const portRegexp = /--port=(\d*)/;
    const v38 = function (arg) {
        const v37 = portRegexp.test(arg);
        return v37;
    };
    const portArg = args.find(v38);
    if (portArg) {
        const v39 = portRegexp.exec(portArg);
        const v40 = v39[1];
        port = parseInt(v40);
    }
    return port;
};
const v41 = process.env;
const v42 = path.join(__dirname, 'chromedriver');
const v43 = path.delimiter;
const v44 = v42 + v43;
const v45 = process.env;
const v46 = v45.PATH;
v41.PATH = v44 + v46;
let crpath;
const v47 = process.platform;
const v48 = v47 === 'win32';
const v49 = path.join(__dirname, 'chromedriver', 'chromedriver.exe');
const v50 = path.join(__dirname, 'chromedriver', 'chromedriver');
if (v48) {
    crpath = v49;
} else {
    crpath = v50;
}
const version = '119.0.6045.105';
let defaultInstance = null;
const start = function (args, returnPromise) {
    let command = crpath;
    const v51 = fs.existsSync(command);
    const v52 = !v51;
    if (v52) {
        const v53 = console.log('Could not find chromedriver in default path: ', command);
        v53;
        const v54 = console.log('Falling back to use global chromedriver bin');
        v54;
        const v55 = process.platform;
        const v56 = v55 === 'win32';
        if (v56) {
            command = 'chromedriver.exe';
        } else {
            command = 'chromedriver';
        }
    }
    const v57 = require('child_process');
    const cp = v57.spawn(command, args);
    const v58 = cp.stdout;
    const v59 = process.stdout;
    const v60 = v58.pipe(v59);
    v60;
    const v61 = cp.stderr;
    const v62 = process.stderr;
    const v63 = v61.pipe(v62);
    v63;
    defaultInstance = cp;
    const v64 = !returnPromise;
    if (v64) {
        return cp;
    }
    const port = getPortFromArgs(args);
    const pollInterval = 100;
    const timeout = 10000;
    const v65 = tcpPortUsed.waitUntilUsed(port, pollInterval, timeout);
    const v66 = function () {
        return cp;
    };
    const v67 = v65.then(v66);
    return v67;
};
const stop = function () {
    const v68 = defaultInstance != null;
    if (v68) {
        const v69 = defaultInstance.kill();
        v69;
    }
    defaultInstance = null;
};
const v70 = {};
v70.path = crpath;
v70.version = version;
v70.start = start;
v70.stop = stop;
v70.defaultInstance = function () {
    return defaultInstance;
};
module.exports = v70;