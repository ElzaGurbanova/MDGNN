'use strict';
var wmic = require('wmic');
var os = require('os');
const get_wmic_ip_value = function (what, nic_name, cb) {
    const v92 = function (err, mac) {
        const v78 = !mac;
        const v79 = err || v78;
        if (v79) {
            const v80 = new Error('No MAC Address found.');
            const v81 = err || v80;
            const v82 = cb(v81);
            return v82;
        }
        const v83 = 'MACAddress = \'' + mac;
        const v84 = v83 + '\'';
        const v90 = function (err, out) {
            if (err) {
                const v85 = cb(err);
                return v85;
            }
            const v86 = out.split(',');
            const v87 = v86[0];
            const v88 = v87.replace(/[^0-9\.]/g, '');
            const v89 = cb(null, v88);
            v89;
        };
        const v91 = wmic.get_value('nicconfig', what, v84, v90);
        v91;
    };
    const v93 = exports.mac_address_for(nic_name, v92);
    v93;
};
const v95 = function (cb) {
    const v94 = wmic.get_value('nic', 'NetConnectionID', 'NetConnectionStatus = 2', cb);
    v94;
};
exports.get_active_network_interface_name = v95;
const v97 = function (nic_name, cb) {
    const v96 = get_wmic_ip_value('IPSubnet', nic_name, cb);
    v96;
};
exports.netmask_for = v97;
const v99 = function (nic_name, cb) {
    const v98 = get_wmic_ip_value('DefaultIPGateway', nic_name, cb);
    v98;
};
exports.gateway_ip_for = v99;
const v102 = function (nic_name, cb) {
    const v100 = 'NetConnectionID = \'' + nic_name;
    var cond = v100 + '\'';
    const v101 = wmic.get_value('nic', 'MACAddress', cond, cb);
    v101;
};
exports.mac_address_for = v102;
const v154 = function (callback) {
    var count;
    var list = [];
    var node_nics = os.networkInterfaces();
    const done = function () {
        const v103 = --count;
        const v104 = callback(null, list);
        const v105 = v103 || v104;
        v105;
    };
    const set_gateway = function (obj) {
        const v106 = obj.name;
        const v111 = function (err, res) {
            const v107 = res != '';
            const v108 = res && v107;
            let v109;
            if (v108) {
                v109 = res;
            } else {
                v109 = null;
            }
            obj.gateway_ip = v109;
            const v110 = done();
            v110;
        };
        const v112 = exports.gateway_ip_for(v106, v111);
        v112;
    };
    const set_netmask = function (obj) {
        const v113 = obj.name;
        const v117 = function (err, res) {
            const v114 = res != '';
            const v115 = res && v114;
            let v116;
            if (v115) {
                v116 = res;
            } else {
                v116 = null;
            }
            obj.netmask = v116;
        };
        const v118 = exports.netmask_for(v113, v117);
        v118;
    };
    const v152 = function (err, nics) {
        if (err) {
            const v119 = callback(err);
            return v119;
        }
        count = nics.length;
        const v120 = count == 0;
        if (v120) {
            const v121 = new Error('No interfaces found.');
            const v122 = cb(v121);
            return v122;
        }
        const v150 = function (nic) {
            const v123 = nic.Name;
            const v124 = nic.NetConnectionID;
            const v125 = v124 != '';
            const v126 = v123 && v125;
            const v127 = nic.MACAddress;
            const v128 = v127 != '';
            const v129 = v126 && v128;
            if (v129) {
                const v130 = nic.NetConnectionID;
                const v131 = nic.MACAddress;
                const v132 = nic.IPAddress;
                const v133 = nic.Manufacturer;
                const v134 = nic.Description;
                const v135 = nic.Name;
                const v136 = v135.match(/wi-?fi|wireless/i);
                let v137;
                if (v136) {
                    v137 = 'Wireless';
                } else {
                    v137 = 'Wired';
                }
                var obj = {};
                obj.name = v130;
                obj.mac_address = v131;
                obj.ip_address = v132;
                obj.vendor = v133;
                obj.model = v134;
                obj.type = v137;
                const v138 = obj.name;
                const v139 = node_nics[v138];
                const v140 = [];
                var node_nic = v139 || v140;
                const v144 = function (type) {
                    const v141 = type.family;
                    const v142 = v141 == 'IPv4';
                    if (v142) {
                        const v143 = type.address;
                        obj.ip_address = v143;
                    }
                };
                const v145 = node_nic.forEach(v144);
                v145;
                const v146 = list.push(obj);
                v146;
                const v147 = set_netmask(obj);
                v147;
                const v148 = set_gateway(obj);
                v148;
            } else {
                const v149 = done();
                v149;
            }
        };
        const v151 = nics.forEach(v150);
        v151;
    };
    const v153 = wmic.get_list('nic', v152);
    v153;
};
exports.get_network_interfaces_list = v154;