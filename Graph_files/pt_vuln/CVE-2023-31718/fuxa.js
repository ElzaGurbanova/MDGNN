var express = require('express');
const authJwt = require('../jwt-helper');
const fs = require('fs');
const path = require('path');
var runtime;
var secureFnc;
var checkGroupsFnc;
const v100 = function (_runtime, _secureFnc, _checkGroupsFnc) {
    runtime = _runtime;
    secureFnc = _secureFnc;
    checkGroupsFnc = _checkGroupsFnc;
};
const v197 = function () {
    var commandApp = express();
    const v106 = function (req, res, next) {
        const v101 = runtime.project;
        const v102 = !v101;
        if (v102) {
            const v103 = res.status(404);
            const v104 = v103.end();
            v104;
        } else {
            const v105 = next();
            v105;
        }
    };
    const v107 = commandApp.use(v106);
    v107;
    const v144 = function (req, res, next) {
        var groups = checkGroupsFnc(req);
        const v108 = res.statusCode;
        const v109 = v108 === 403;
        if (v109) {
            const v110 = runtime.logger;
            const v111 = v110.error('api post command: Tocken Expired');
            v111;
        } else {
            const v112 = authJwt.adminGroups;
            const v113 = v112.indexOf(groups);
            const v114 = -1;
            const v115 = v113 === v114;
            if (v115) {
                const v116 = res.status(401);
                const v117 = {
                    error: 'unauthorized_error',
                    message: 'Unauthorized!'
                };
                const v118 = v116.json(v117);
                v118;
                const v119 = runtime.logger;
                const v120 = v119.error('api post command: Unauthorized');
                v120;
            } else {
                try {
                    const v121 = req.body;
                    const v122 = v121.params;
                    const v123 = v122.cmd;
                    const v124 = CommanTypeEnum.reportBuild;
                    const v125 = v123 === v124;
                    if (v125) {
                        const v126 = runtime.jobsMgr;
                        const v127 = req.body;
                        const v128 = v127.params;
                        const v129 = v128.report;
                        const v130 = v126.forceReport(v129);
                        if (v130) {
                            const v131 = res.end();
                            v131;
                        } else {
                            const v132 = res.status(400);
                            const v133 = {
                                error: 'not_found',
                                message: 'report not found!'
                            };
                            const v134 = v132.json(v133);
                            v134;
                            const v135 = runtime.logger;
                            const v136 = 'api post buildreport: ' + 'report not found!';
                            const v137 = v135.error(v136);
                            v137;
                        }
                    }
                } catch (error) {
                    const v138 = res.status(400);
                    const v139 = {
                        error: 'error',
                        message: error
                    };
                    const v140 = v138.json(v139);
                    v140;
                    const v141 = runtime.logger;
                    const v142 = 'api post buildreport: ' + error;
                    const v143 = v141.error(v142);
                    v143;
                }
            }
        }
    };
    const v145 = commandApp.post('/api/command', secureFnc, v144);
    v145;
    const v195 = function (req, res) {
        var groups = checkGroupsFnc(req);
        const v146 = res.statusCode;
        const v147 = v146 === 403;
        if (v147) {
            const v148 = runtime.logger;
            const v149 = v148.error('api post command: Tocken Expired');
            v149;
        } else {
            const v150 = authJwt.adminGroups;
            const v151 = v150.indexOf(groups);
            const v152 = -1;
            const v153 = v151 === v152;
            if (v153) {
                const v154 = res.status(401);
                const v155 = {
                    error: 'unauthorized_error',
                    message: 'Unauthorized!'
                };
                const v156 = v154.json(v155);
                v156;
                const v157 = runtime.logger;
                const v158 = v157.error('api post command: Unauthorized');
                v158;
            } else {
                const v159 = req.query;
                const v160 = v159.cmd;
                const v161 = CommanTypeEnum.reportDownload;
                const v162 = v160 === v161;
                if (v162) {
                    try {
                        const v163 = runtime.settings;
                        const v164 = v163.reportsDir;
                        const v165 = req.query;
                        const v166 = v165.name;
                        var reportPath = path.join(v164, v166);
                        const v167 = fs.existsSync(reportPath);
                        const v168 = !v167;
                        if (v168) {
                            const v169 = process.cwd();
                            const v170 = runtime.settings;
                            const v171 = v170.reportsDir;
                            const v172 = req.query;
                            const v173 = v172.name;
                            reportPath = path.join(v169, v171, v173);
                        }
                        const v174 = fs.existsSync(reportPath);
                        if (v174) {
                            const v178 = err => {
                                if (err) {
                                    const v175 = runtime.logger;
                                    const v176 = 'api get download: ' + err;
                                    const v177 = v175.error(v176);
                                    v177;
                                }
                            };
                            const v179 = res.sendFile(reportPath, v178);
                            v179;
                        } else {
                            const v180 = res.status(400);
                            const v181 = {
                                error: 'not_found',
                                message: 'report not found!'
                            };
                            const v182 = v180.json(v181);
                            v182;
                            const v183 = runtime.logger;
                            const v184 = 'api get download: ' + 'report not found!';
                            const v185 = v183.error(v184);
                            v185;
                        }
                    } catch (error) {
                        const v186 = res.status(400);
                        const v187 = {
                            error: 'error',
                            message: error
                        };
                        const v188 = v186.json(v187);
                        v188;
                        const v189 = runtime.logger;
                        const v190 = 'api get download: ' + error;
                        const v191 = v189.error(v190);
                        v191;
                    }
                } else {
                    const v192 = res.status(400);
                    const v193 = {
                        error: 'not_found',
                        message: 'command not found!'
                    };
                    const v194 = v192.json(v193);
                    v194;
                }
            }
        }
    };
    const v196 = commandApp.get('/api/download', v195);
    v196;
    return commandApp;
};
const v198 = {};
v198.init = v100;
v198.app = v197;
module.exports = v198;
const CommanTypeEnum = {};
CommanTypeEnum.reportBuild = 'REPORT-BUILD';
CommanTypeEnum.reportDelete = 'REPORT-DELETE';
CommanTypeEnum.reportDownload = 'REPORT-DOWNLOAD';