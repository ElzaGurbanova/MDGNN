var http = require('http');
var test = require('tape');
var glance = require('../');
const v114 = {
    port: 1666,
    dir: './test/glance-test'
};
var glanceServer = glance(v114);
const v119 = function (t) {
    const v115 = t.plan(1);
    v115;
    const v117 = function () {
        const v116 = glanceServer.start();
        v116;
    };
    const v118 = t.doesNotThrow(v117);
    v118;
};
const v120 = test('doesnt explode immediately', v119);
v120;
const v134 = function (t) {
    const v132 = function (res) {
        const v121 = t.plan(3);
        v121;
        var text = '';
        const v122 = res.statusCode;
        const v123 = t.strictEqual(v122, 200);
        v123;
        const v124 = res.headers;
        const v125 = v124['content-type'];
        const v126 = t.strictEqual(v125, 'text/plain');
        v126;
        const v127 = function (data) {
            text += data;
        };
        const v128 = res.on('data', v127);
        v128;
        const v130 = function () {
            const v129 = t.strictEqual(text, 'howdy!');
            v129;
        };
        const v131 = res.on('end', v130);
        v131;
    };
    const v133 = http.get('http://localhost:1666/file.txt', v132);
    v133;
};
const v135 = test('serves plaintext with headers', v134);
v135;
const v149 = function (t) {
    const v147 = function (res) {
        const v136 = t.plan(3);
        v136;
        var uritext = '';
        const v137 = res.statusCode;
        const v138 = t.strictEqual(v137, 200);
        v138;
        const v139 = res.headers;
        const v140 = v139['content-type'];
        const v141 = t.strictEqual(v140, 'text/html');
        v141;
        const v142 = function (data) {
            uritext += data;
        };
        const v143 = res.on('data', v142);
        v143;
        const v145 = function () {
            const v144 = t.strictEqual(uritext, 'hey, now!');
            v144;
        };
        const v146 = res.on('end', v145);
        v146;
    };
    const v148 = http.get('http://localhost:1666/file%20with%20space.html', v147);
    v148;
};
const v150 = test('deals with uri encoding', v149);
v150;
const v156 = function (t) {
    const v151 = t.plan(1);
    v151;
    const v154 = function (res) {
        const v152 = res.statusCode;
        const v153 = t.strictEqual(v152, 404);
        v153;
    };
    const v155 = http.get('http://localhost:1666/nofile.md', v154);
    v155;
};
const v157 = test('404s on file not found', v156);
v157;
const v163 = function (t) {
    const v158 = t.plan(1);
    v158;
    glanceServer.hideindex = true;
    const v161 = function (res) {
        glanceServer.hideindex = false;
        const v159 = res.statusCode;
        const v160 = t.strictEqual(v159, 403);
        v160;
    };
    const v162 = http.get('http://localhost:1666/', v161);
    v162;
};
const v164 = test('403s on dir list if configured', v163);
v164;
const v170 = function (t) {
    const v165 = t.plan(1);
    v165;
    const v168 = function (res) {
        const v166 = res.statusCode;
        const v167 = t.notStrictEqual(v166, 200);
        v167;
    };
    const v169 = http.get('http://localhost:1666/../index.js', v168);
    v169;
};
const v171 = test('fails if path traversal is attempted', v170);
v171;
const v184 = function (t) {
    const v172 = t.plan(2);
    v172;
    var data = [];
    const v182 = function (res) {
        const v173 = res.statusCode;
        const v174 = t.strictEqual(v173, 200);
        v174;
        const v175 = data.push;
        const v176 = v175.bind(data);
        const v177 = res.on('data', v176);
        v177;
        const v180 = function () {
            const v178 = data.join('');
            const v179 = t.strictEqual(v178, 'wee\n');
            v179;
        };
        const v181 = res.on('end', v180);
        v181;
    };
    const v183 = http.get('http://localhost:1666/', v182);
    v183;
};
const v185 = test('serves index page', v184);
v185;
const v192 = function (t) {
    const v186 = t.plan(3);
    v186;
    var badMethods = [
        'POST',
        'DELETE',
        'PUT'
    ];
    const v188 = function (method) {
        var options = {};
        options.host = 'localhost';
        options.port = 1666;
        options.path = '/file.txt';
        options.method = method;
        var req = http.request(options, verifyCode);
        const v187 = req.end();
        v187;
    };
    const v189 = badMethods.forEach(v188);
    v189;
    const verifyCode = function (res) {
        const v190 = res.statusCode;
        const v191 = t.strictEqual(v190, 405);
        v191;
    };
};
const v193 = test('405s on everything but GET', v192);
v193;
const v203 = function (t) {
    const v194 = t.plan(2);
    v194;
    const v197 = function (res) {
        const v195 = res.statusCode;
        const v196 = t.strictEqual(v195, 200);
        v196;
    };
    const v198 = http.get('http://localhost:1666/.test/whatever.txt', v197);
    v198;
    const v201 = function (res) {
        const v199 = res.statusCode;
        const v200 = t.strictEqual(v199, 200);
        v200;
    };
    const v202 = http.get('http://localhost:1666/test1/.test2/lol.txt', v201);
    v202;
};
const v204 = test('serves files from within dot dirs by default', v203);
v204;
const v219 = function (t) {
    const v205 = t.plan(3);
    v205;
    var data = [];
    const v217 = function (res) {
        const v207 = function (chunk) {
            const v206 = data.push(chunk);
            v206;
        };
        const v208 = res.on('data', v207);
        v208;
        const v215 = function () {
            var response = data.join('');
            const v209 = /\<img/.test(response);
            const v210 = t.notOk(v209, 'raw image tag is not on page');
            v210;
            const v211 = /\&lt;img/.test(response);
            const v212 = t.ok(v211, 'name is replaced with html escape');
            v212;
            const v213 = /\%3Cimg/.test(response);
            const v214 = t.ok(v213, 'link is replaced with uriEncode');
            v214;
        };
        const v216 = res.on('end', v215);
        v216;
    };
    const v218 = http.get('http://localhost:1666/test1/', v217);
    v218;
};
const v220 = test('sanitizes filenames', v219);
v220;
const v225 = function (t) {
    const v221 = t.plan(1);
    v221;
    const v223 = function () {
        const v222 = glanceServer.stop();
        v222;
    };
    const v224 = t.doesNotThrow(v223);
    v224;
};
const v226 = test('shuts down without exploding', v225);
v226;