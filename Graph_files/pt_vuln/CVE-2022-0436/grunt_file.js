'use strict';
var grunt = require('../grunt');
var fs = require('fs');
var path = require('path');
const v356 = {};
module.exports = v356;
var file = module.exports;
const v357 = require('glob');
file.glob = v357;
const v358 = require('minimatch');
file.minimatch = v358;
const v359 = require('findup-sync');
file.findup = v359;
var YAML = require('js-yaml');
var rimraf = require('rimraf');
var iconv = require('iconv-lite');
const v360 = require('mkdirp');
var mkdirp = v360.sync;
const v361 = process.platform;
var win32 = v361 === 'win32';
var unixifyPath = function (filepath) {
    if (win32) {
        const v362 = filepath.replace(/\\/g, '/');
        return v362;
    } else {
        return filepath;
    }
};
const v365 = function () {
    const v363 = path.join;
    var dirpath = v363.apply(path, arguments);
    const v364 = process.chdir(dirpath);
    v364;
};
file.setBase = v365;
var processPatterns = function (patterns, fn) {
    var result = [];
    const v366 = grunt.util;
    const v367 = v366._;
    const v368 = v367.flattenDeep(patterns);
    const v374 = function (pattern) {
        const v369 = pattern.indexOf('!');
        var exclusion = v369 === 0;
        if (exclusion) {
            pattern = pattern.slice(1);
        }
        var matches = fn(pattern);
        if (exclusion) {
            const v370 = grunt.util;
            const v371 = v370._;
            result = v371.difference(result, matches);
        } else {
            const v372 = grunt.util;
            const v373 = v372._;
            result = v373.union(result, matches);
        }
    };
    const v375 = v368.forEach(v374);
    v375;
    return result;
};
const v397 = function (options, patterns, filepaths) {
    const v376 = grunt.util;
    const v377 = v376.kindOf(options);
    const v378 = v377 !== 'object';
    if (v378) {
        filepaths = patterns;
        patterns = options;
        options = {};
    }
    const v379 = patterns == null;
    const v380 = filepaths == null;
    const v381 = v379 || v380;
    if (v381) {
        const v382 = [];
        return v382;
    }
    const v383 = Array.isArray(patterns);
    const v384 = !v383;
    if (v384) {
        patterns = [patterns];
    }
    const v385 = Array.isArray(filepaths);
    const v386 = !v385;
    if (v386) {
        filepaths = [filepaths];
    }
    const v387 = patterns.length;
    const v388 = v387 === 0;
    const v389 = filepaths.length;
    const v390 = v389 === 0;
    const v391 = v388 || v390;
    if (v391) {
        const v392 = [];
        return v392;
    }
    const v395 = function (pattern) {
        const v393 = file.minimatch;
        const v394 = v393.match(filepaths, pattern, options);
        return v394;
    };
    const v396 = processPatterns(patterns, v395);
    return v396;
};
file.match = v397;
const v402 = function () {
    const v398 = file.match;
    const v399 = v398.apply(file, arguments);
    const v400 = v399.length;
    const v401 = v400 > 0;
    return v401;
};
file.isMatch = v402;
const v430 = function () {
    const v403 = grunt.util;
    var args = v403.toArray(arguments);
    let options;
    const v404 = grunt.util;
    const v405 = args[0];
    const v406 = v404.kindOf(v405);
    const v407 = v406 === 'object';
    const v408 = args.shift();
    const v409 = {};
    if (v407) {
        options = v408;
    } else {
        options = v409;
    }
    let patterns;
    const v410 = args[0];
    const v411 = Array.isArray(v410);
    const v412 = args[0];
    if (v411) {
        patterns = v412;
    } else {
        patterns = args;
    }
    const v413 = patterns.length;
    const v414 = v413 === 0;
    if (v414) {
        const v415 = [];
        return v415;
    }
    const v418 = function (pattern) {
        const v416 = file.glob;
        const v417 = v416.sync(pattern, options);
        return v417;
    };
    var matches = processPatterns(patterns, v418);
    const v419 = options.filter;
    if (v419) {
        const v429 = function (filepath) {
            const v420 = options.cwd;
            const v421 = v420 || '';
            filepath = path.join(v421, filepath);
            try {
                const v422 = options.filter;
                const v423 = typeof v422;
                const v424 = v423 === 'function';
                if (v424) {
                    const v425 = options.filter(filepath);
                    return v425;
                } else {
                    const v426 = fs.statSync(filepath);
                    const v427 = options.filter;
                    const v428 = v426[v427]();
                    return v428;
                }
            } catch (e) {
                return false;
            }
        };
        matches = matches.filter(v429);
    }
    return matches;
};
file.expand = v430;
var pathSeparatorRe = /[\/\\]/g;
var extDotRe = {};
extDotRe.first = /(\.[^\/]*)?$/;
extDotRe.last = /(\.[^\/\.]*)?$/;
const v458 = function (patterns, destBase, options) {
    const v431 = grunt.util;
    const v432 = v431._;
    const v433 = {};
    const v436 = function (destBase, destPath) {
        const v434 = destBase || '';
        const v435 = path.join(v434, destPath);
        return v435;
    };
    const v437 = {
        extDot: 'first',
        rename: v436
    };
    options = v432.defaults(v433, options, v437);
    var files = [];
    var fileByDest = {};
    const v438 = file.expand(options, patterns);
    const v456 = function (src) {
        var destPath = src;
        const v439 = options.flatten;
        if (v439) {
            destPath = path.basename(destPath);
        }
        const v440 = 'ext' in options;
        if (v440) {
            const v441 = options.extDot;
            const v442 = extDotRe[v441];
            const v443 = options.ext;
            destPath = destPath.replace(v442, v443);
        }
        var dest = options.rename(destBase, destPath, options);
        const v444 = options.cwd;
        if (v444) {
            const v445 = options.cwd;
            src = path.join(v445, src);
        }
        dest = dest.replace(pathSeparatorRe, '/');
        src = src.replace(pathSeparatorRe, '/');
        const v446 = fileByDest[dest];
        if (v446) {
            const v447 = fileByDest[dest];
            const v448 = v447.src;
            const v449 = v448.push(src);
            v449;
        } else {
            const v450 = [src];
            const v451 = {
                src: v450,
                dest: dest
            };
            const v452 = files.push(v451);
            v452;
            const v453 = files.length;
            const v454 = v453 - 1;
            const v455 = files[v454];
            fileByDest[dest] = v455;
        }
    };
    const v457 = v438.forEach(v456);
    v457;
    return files;
};
file.expandMapping = v458;
const v469 = function (dirpath, mode) {
    const v459 = grunt.option('no-write');
    if (v459) {
        return;
    }
    try {
        const v460 = { mode: mode };
        const v461 = mkdirp(dirpath, v460);
        v461;
    } catch (e) {
        const v462 = grunt.util;
        const v463 = 'Unable to create directory "' + dirpath;
        const v464 = v463 + '" (Error code: ';
        const v465 = e.code;
        const v466 = v464 + v465;
        const v467 = v466 + ').';
        const v468 = v462.error(v467, e);
        throw v468;
    }
};
file.mkdir = v469;
const recurse = function (rootdir, callback, subdir) {
    let abspath;
    const v470 = path.join(rootdir, subdir);
    if (subdir) {
        abspath = v470;
    } else {
        abspath = rootdir;
    }
    const v471 = fs.readdirSync(abspath);
    const v481 = function (filename) {
        var filepath = path.join(abspath, filename);
        const v472 = fs.statSync(filepath);
        const v473 = v472.isDirectory();
        if (v473) {
            const v474 = subdir || '';
            const v475 = filename || '';
            const v476 = path.join(v474, v475);
            const v477 = unixifyPath(v476);
            const v478 = recurse(rootdir, callback, v477);
            v478;
        } else {
            const v479 = unixifyPath(filepath);
            const v480 = callback(v479, rootdir, subdir, filename);
            v480;
        }
    };
    const v482 = v471.forEach(v481);
    v482;
};
file.recurse = recurse;
file.defaultEncoding = 'utf8';
file.preserveBOM = false;
const v508 = function (filepath, options) {
    const v483 = !options;
    if (v483) {
        options = {};
    }
    var contents;
    const v484 = grunt.verbose;
    const v485 = 'Reading ' + filepath;
    const v486 = v485 + '...';
    const v487 = v484.write(v486);
    v487;
    try {
        const v488 = String(filepath);
        contents = fs.readFileSync(v488);
        const v489 = options.encoding;
        const v490 = v489 !== null;
        if (v490) {
            const v491 = options.encoding;
            const v492 = file.defaultEncoding;
            const v493 = v491 || v492;
            const v494 = file.preserveBOM;
            const v495 = !v494;
            const v496 = { stripBOM: v495 };
            contents = iconv.decode(contents, v493, v496);
        }
        const v497 = grunt.verbose;
        const v498 = v497.ok();
        v498;
        return contents;
    } catch (e) {
        const v499 = grunt.verbose;
        const v500 = v499.error();
        v500;
        const v501 = grunt.util;
        const v502 = 'Unable to read "' + filepath;
        const v503 = v502 + '" file (Error code: ';
        const v504 = e.code;
        const v505 = v503 + v504;
        const v506 = v505 + ').';
        const v507 = v501.error(v506, e);
        throw v507;
    }
};
file.read = v508;
const v524 = function (filepath, options) {
    var src = file.read(filepath, options);
    var result;
    const v509 = grunt.verbose;
    const v510 = 'Parsing ' + filepath;
    const v511 = v510 + '...';
    const v512 = v509.write(v511);
    v512;
    try {
        result = JSON.parse(src);
        const v513 = grunt.verbose;
        const v514 = v513.ok();
        v514;
        return result;
    } catch (e) {
        const v515 = grunt.verbose;
        const v516 = v515.error();
        v516;
        const v517 = grunt.util;
        const v518 = 'Unable to parse "' + filepath;
        const v519 = v518 + '" file (';
        const v520 = e.message;
        const v521 = v519 + v520;
        const v522 = v521 + ').';
        const v523 = v517.error(v522, e);
        throw v523;
    }
};
file.readJSON = v524;
const v543 = function (filepath, options, yamlOptions) {
    const v525 = !options;
    if (v525) {
        options = {};
    }
    const v526 = !yamlOptions;
    if (v526) {
        yamlOptions = {};
    }
    var src = file.read(filepath, options);
    var result;
    const v527 = grunt.verbose;
    const v528 = 'Parsing ' + filepath;
    const v529 = v528 + '...';
    const v530 = v527.write(v529);
    v530;
    try {
        const v531 = yamlOptions.unsafeLoad;
        if (v531) {
            result = YAML.load(src);
        } else {
            result = YAML.safeLoad(src);
        }
        const v532 = grunt.verbose;
        const v533 = v532.ok();
        v533;
        return result;
    } catch (e) {
        const v534 = grunt.verbose;
        const v535 = v534.error();
        v535;
        const v536 = grunt.util;
        const v537 = 'Unable to parse "' + filepath;
        const v538 = v537 + '" file (';
        const v539 = e.message;
        const v540 = v538 + v539;
        const v541 = v540 + ').';
        const v542 = v536.error(v541, e);
        throw v542;
    }
};
file.readYAML = v543;
const v575 = function (filepath, contents, options) {
    const v544 = !options;
    if (v544) {
        options = {};
    }
    var nowrite = grunt.option('no-write');
    const v545 = grunt.verbose;
    let v546;
    if (nowrite) {
        v546 = 'Not actually writing ';
    } else {
        v546 = 'Writing ';
    }
    const v547 = v546 + filepath;
    const v548 = v547 + '...';
    const v549 = v545.write(v548);
    v549;
    const v550 = path.dirname(filepath);
    const v551 = file.mkdir(v550);
    v551;
    try {
        const v552 = Buffer.isBuffer(contents);
        const v553 = !v552;
        if (v553) {
            const v554 = options.encoding;
            const v555 = file.defaultEncoding;
            const v556 = v554 || v555;
            contents = iconv.encode(contents, v556);
        }
        const v557 = !nowrite;
        if (v557) {
            const v558 = 'mode' in options;
            const v559 = options.mode;
            const v560 = { mode: v559 };
            const v561 = {};
            let v562;
            if (v558) {
                v562 = v560;
            } else {
                v562 = v561;
            }
            const v563 = fs.writeFileSync(filepath, contents, v562);
            v563;
        }
        const v564 = grunt.verbose;
        const v565 = v564.ok();
        v565;
        return true;
    } catch (e) {
        const v566 = grunt.verbose;
        const v567 = v566.error();
        v567;
        const v568 = grunt.util;
        const v569 = 'Unable to write "' + filepath;
        const v570 = v569 + '" file (Error code: ';
        const v571 = e.code;
        const v572 = v570 + v571;
        const v573 = v572 + ').';
        const v574 = v568.error(v573, e);
        throw v574;
    }
};
file.write = v575;
const copy = function (srcpath, destpath, options) {
    const v576 = file.isDir(srcpath);
    if (v576) {
        const v577 = file.mkdir(destpath);
        v577;
        const v578 = fs.readdirSync(srcpath);
        const v582 = function (filepath) {
            const v579 = path.join(srcpath, filepath);
            const v580 = path.join(destpath, filepath);
            const v581 = copy(v579, v580, options);
            v581;
        };
        const v583 = v578.forEach(v582);
        v583;
    } else {
        const v584 = file._copy(srcpath, destpath, options);
        v584;
    }
};
file.copy = copy;
const v610 = function (srcpath, destpath, options) {
    const v585 = !options;
    if (v585) {
        options = {};
    }
    const v586 = options.process;
    const v587 = options.noProcess;
    const v588 = v587 !== true;
    const v589 = v586 && v588;
    const v590 = options.noProcess;
    const v591 = options.noProcess;
    const v592 = file.isMatch(v591, srcpath);
    const v593 = v590 && v592;
    const v594 = !v593;
    var process = v589 && v594;
    let readWriteOptions;
    const v595 = { encoding: null };
    if (process) {
        readWriteOptions = options;
    } else {
        readWriteOptions = v595;
    }
    var contents = file.read(srcpath, readWriteOptions);
    if (process) {
        const v596 = grunt.verbose;
        const v597 = v596.write('Processing source...');
        v597;
        try {
            contents = options.process(contents, srcpath, destpath);
            const v598 = grunt.verbose;
            const v599 = v598.ok();
            v599;
        } catch (e) {
            const v600 = grunt.verbose;
            const v601 = v600.error();
            v601;
            const v602 = grunt.util;
            const v603 = 'Error while processing "' + srcpath;
            const v604 = v603 + '" file.';
            const v605 = v602.error(v604, e);
            throw v605;
        }
    }
    const v606 = contents === false;
    if (v606) {
        const v607 = grunt.verbose;
        const v608 = v607.writeln('Write aborted.');
        v608;
    } else {
        const v609 = file.write(destpath, contents, readWriteOptions);
        v609;
    }
};
file._copy = v610;
const v651 = function (filepath, options) {
    filepath = String(filepath);
    var nowrite = grunt.option('no-write');
    const v611 = !options;
    if (v611) {
        const v612 = grunt.option('force');
        const v613 = v612 || false;
        options.force = v613;
        options = {};
        options = {};
    }
    const v614 = grunt.verbose;
    let v615;
    if (nowrite) {
        v615 = 'Not actually deleting ';
    } else {
        v615 = 'Deleting ';
    }
    const v616 = v615 + filepath;
    const v617 = v616 + '...';
    const v618 = v614.write(v617);
    v618;
    const v619 = file.exists(filepath);
    const v620 = !v619;
    if (v620) {
        const v621 = grunt.verbose;
        const v622 = v621.error();
        v622;
        const v623 = grunt.log;
        const v624 = v623.warn('Cannot delete nonexistent file.');
        v624;
        return false;
    }
    const v625 = options.force;
    const v626 = !v625;
    if (v626) {
        const v627 = file.isPathCwd(filepath);
        if (v627) {
            const v628 = grunt.verbose;
            const v629 = v628.error();
            v629;
            const v630 = grunt.fail;
            const v631 = v630.warn('Cannot delete the current working directory.');
            v631;
            return false;
        } else {
            const v632 = file.isPathInCwd(filepath);
            const v633 = !v632;
            if (v633) {
                const v634 = grunt.verbose;
                const v635 = v634.error();
                v635;
                const v636 = grunt.fail;
                const v637 = v636.warn('Cannot delete files outside the current working directory.');
                v637;
                return false;
            }
        }
    }
    try {
        const v638 = !nowrite;
        if (v638) {
            const v639 = rimraf.sync(filepath);
            v639;
        }
        const v640 = grunt.verbose;
        const v641 = v640.ok();
        v641;
        return true;
    } catch (e) {
        const v642 = grunt.verbose;
        const v643 = v642.error();
        v643;
        const v644 = grunt.util;
        const v645 = 'Unable to delete "' + filepath;
        const v646 = v645 + '" file (';
        const v647 = e.message;
        const v648 = v646 + v647;
        const v649 = v648 + ').';
        const v650 = v644.error(v649, e);
        throw v650;
    }
};
file.delete = v651;
const v654 = function () {
    const v652 = path.join;
    var filepath = v652.apply(path, arguments);
    const v653 = fs.existsSync(filepath);
    return v653;
};
file.exists = v654;
const v667 = function () {
    const v655 = path.join;
    var filepath = v655.apply(path, arguments);
    try {
        const v656 = fs.lstatSync(filepath);
        const v657 = v656.isSymbolicLink();
        return v657;
    } catch (e) {
        const v658 = e.code;
        const v659 = v658 === 'ENOENT';
        if (v659) {
            return false;
        }
        const v660 = grunt.util;
        const v661 = 'Unable to read "' + filepath;
        const v662 = v661 + '" file (Error code: ';
        const v663 = e.code;
        const v664 = v662 + v663;
        const v665 = v664 + ').';
        const v666 = v660.error(v665, e);
        throw v666;
    }
};
file.isLink = v667;
const v673 = function () {
    const v668 = path.join;
    var filepath = v668.apply(path, arguments);
    const v669 = file.exists(filepath);
    const v670 = fs.statSync(filepath);
    const v671 = v670.isDirectory();
    const v672 = v669 && v671;
    return v672;
};
file.isDir = v673;
const v679 = function () {
    const v674 = path.join;
    var filepath = v674.apply(path, arguments);
    const v675 = file.exists(filepath);
    const v676 = fs.statSync(filepath);
    const v677 = v676.isFile();
    const v678 = v675 && v677;
    return v678;
};
file.isFile = v679;
const v682 = function () {
    const v680 = path.join;
    var filepath = v680.apply(path, arguments);
    const v681 = path.isAbsolute(filepath);
    return v681;
};
file.isPathAbsolute = v682;
const v689 = function (first) {
    first = path.resolve(first);
    var i = 1;
    const v683 = arguments.length;
    let v684 = i < v683;
    while (v684) {
        const v686 = arguments[i];
        const v687 = path.resolve(v686);
        const v688 = first !== v687;
        if (v688) {
            return false;
        }
        const v685 = i++;
        v684 = i < v683;
    }
    return true;
};
file.arePathsEquivalent = v689;
const v698 = function (ancestor) {
    ancestor = path.resolve(ancestor);
    var relative;
    var i = 1;
    const v690 = arguments.length;
    let v691 = i < v690;
    while (v691) {
        const v693 = arguments[i];
        const v694 = path.resolve(v693);
        relative = path.relative(v694, ancestor);
        const v695 = relative === '';
        const v696 = /\w+/.test(relative);
        const v697 = v695 || v696;
        if (v697) {
            return false;
        }
        const v692 = i++;
        v691 = i < v690;
    }
    return true;
};
file.doesPathContain = v698;
const v704 = function () {
    const v699 = path.join;
    var filepath = v699.apply(path, arguments);
    try {
        const v700 = process.cwd();
        const v701 = fs.realpathSync(v700);
        const v702 = fs.realpathSync(filepath);
        const v703 = file.arePathsEquivalent(v701, v702);
        return v703;
    } catch (e) {
        return false;
    }
};
file.isPathCwd = v704;
const v710 = function () {
    const v705 = path.join;
    var filepath = v705.apply(path, arguments);
    try {
        const v706 = process.cwd();
        const v707 = fs.realpathSync(v706);
        const v708 = fs.realpathSync(filepath);
        const v709 = file.doesPathContain(v707, v708);
        return v709;
    } catch (e) {
        return false;
    }
};
file.isPathInCwd = v710;