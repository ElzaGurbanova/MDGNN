let net = require('net');
let http = require('http');
let fs = require('fs');
let path = require('path');
let os = require('os');
let args = process.argv;
const v82 = process.env;
const v83 = v82.PORT;
const v84 = +v83;
let port = v84;
let root = './';
let i = 2;
const v85 = args.length;
let v86 = i < v85;
while (v86) {
    let arg = args[i];
    const v88 = +arg;
    port = v88 || port;
    const v89 = fs.existsSync(arg);
    if (v89) {
        root = arg;
    }
    const v87 = i++;
    v86 = i < v85;
}
let contentTypes = {};
contentTypes['.html'] = 'text/html';
contentTypes['.php'] = 'text/plain';
contentTypes['.woff'] = 'font/woff';
contentTypes['.woff2'] = 'font/woff2';
contentTypes['.ttf'] = 'font/ttf';
contentTypes['.txt'] = 'text/plain';
contentTypes['.md'] = 'text/plain';
contentTypes['.js'] = 'text/javascript';
contentTypes['.mjs'] = 'text/javascript';
contentTypes['.ts'] = 'text/plain';
contentTypes['.css'] = 'text/css';
contentTypes['.csv'] = 'text/csv';
contentTypes['.json'] = 'application/json';
contentTypes['.xml'] = 'application/xml';
contentTypes['.wav'] = 'audio/wav';
contentTypes['.weba'] = 'audio/webm';
contentTypes['.webm'] = 'video/webm';
contentTypes['.webp'] = 'image/webp';
contentTypes['.mp3'] = 'audio/mpeg';
contentTypes['.aac'] = 'audio/aac';
contentTypes['.avi'] = 'video/x-msvideo';
contentTypes['.mp4'] = 'video/mp4';
contentTypes['.mpeg'] = 'video/mpeg';
contentTypes['.oga'] = 'audio/ogg';
contentTypes['.ogv'] = 'video/ogg';
contentTypes['.opus'] = 'audio/opus';
contentTypes['.png'] = 'image/png';
contentTypes['.jpeg'] = 'image/jpeg';
contentTypes['.jpg'] = 'image/jpeg';
contentTypes['.epub'] = 'application/epub+zip';
const checkPort = function (port) {
    const v100 = resolve => {
        const v91 = socket => {
            const v90 = socket.end();
            v90;
        };
        let server = net.createServer(v91);
        const v94 = () => {
            const v92 = server.close();
            v92;
            const v93 = resolve('used');
            v93;
        };
        const v95 = server.on('error', v94);
        v95;
        const v98 = () => {
            const v96 = server.close();
            v96;
            const v97 = resolve('not used');
            v97;
        };
        const v99 = server.listen(port, v98);
        v99;
    };
    const v101 = new Promise(v100);
    return v101;
};
const getPort = async function () {
    if (port) {
        return port;
    }
    (port = 8080)
    let v102 = port < 65535;
    while (v102) {
        let res = await checkPort(port);
        const v103 = res === 'not used';
        if (v103) {
            return port;
        }
        v102 = port < 65535;
    }
    return 0;
};
const end = function (res, status, content) {
    const v104 = res.writeHead(status);
    v104;
    const v105 = res.write(content);
    v105;
    const v106 = res.end();
    v106;
};
let templatePart1 = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>
`.trim();
let templatePart2 = `
  </title>
</head>
<body>
`.trim();
let templatePart3 = `
</body>
</html>
`.trim();
const main = async function () {
    let port = await getPort();
    const v146 = (req, res) => {
        try {
            const v107 = new Date();
            let now = v107.toLocaleString();
            const v108 = `[${ now }]`;
            const v109 = req.method;
            const v110 = req.url;
            const v111 = console.log(v108, v109, v110);
            v111;
            const v112 = req.method;
            switch (v112) {
            case 'GET': {
                    const v113 = req.url;
                    const v114 = decodeURIComponent(v113);
                    let filename = v114.replace(/^\//, './');
                    let file = path.join(root, filename);
                    const v115 = fs.existsSync(file);
                    const v116 = !v115;
                    if (v116) {
                        const v117 = `File not found: ${ file }`;
                        const v118 = end(res, 404, v117);
                        v118;
                        break;
                    }
                    let stat = fs.statSync(file);
                    const v119 = stat.isDirectory();
                    if (v119) {
                        let dir = file;
                        let files = fs.readdirSync(dir);
                        const v120 = res.setHeader('Content-Type', 'text/html');
                        v120;
                        const v121 = res.write(templatePart1);
                        v121;
                        const v122 = path.basename(filename);
                        const v123 = res.write(v122);
                        v123;
                        const v124 = res.write(templatePart2);
                        v124;
                        let file;
                        for (file of files) {
                            const v125 = req.url;
                            let href = `${ v125 }/${ file }`.replace(/^\/\//, '/');
                            const v126 = path.join(dir, file);
                            let stat = fs.statSync(v126);
                            let type;
                            const v127 = stat.isDirectory();
                            if (v127) {
                                type = 'D';
                            } else {
                                type = 'F';
                            }
                            const v128 = `[${ type }] <a href="${ href }">${ file }</a><br>`;
                            const v129 = res.write(v128);
                            v129;
                        }
                        const v130 = files.length;
                        const v131 = v130 === 0;
                        if (v131) {
                            const v132 = `[empty directory]`;
                            const v133 = res.write(v132);
                            v133;
                        }
                        const v134 = res.write(templatePart3);
                        v134;
                        const v135 = res.end();
                        v135;
                        break;
                    }
                    let ext = path.extname(filename);
                    let contentType = contentTypes[ext];
                    if (contentType) {
                        const v136 = res.setHeader('Content-Type', contentType);
                        v136;
                    }
                    const v137 = fs.createReadStream(file);
                    const v138 = v137.pipe(res);
                    v138;
                    break;
                }
            default: {
                    const v139 = res.writeHead(405);
                    v139;
                    const v140 = req.method;
                    const v141 = `unknown method: ${ v140 }`;
                    const v142 = res.write(v141);
                    v142;
                    const v143 = res.end();
                    v143;
                }
            }
        } catch (error) {
            const v144 = String(error);
            const v145 = end(res, 500, v144);
            v145;
        }
    };
    let server = http.createServer(v146);
    const v160 = () => {
        const v147 = server.address();
        const v148 = v147.port;
        port = port || v148;
        const v149 = `listening on http://localhost:${ port }`;
        const v150 = console.log(v149);
        v150;
        const v151 = os.networkInterfaces();
        const v152 = Object.entries(v151);
        const v158 = ([name, addresses]) => {
            const v156 = address => {
                let host = address.address;
                const v153 = host.includes(':');
                if (v153) {
                    host = `[${ host }]`;
                }
                const v154 = `listening on http://${ host }:${ port } (${ name })`;
                const v155 = console.log(v154);
                v155;
            };
            const v157 = addresses.forEach(v156);
            v157;
        };
        const v159 = v152.forEach(v158);
        v159;
    };
    const v161 = server.listen(port, v160);
    v161;
};
const v162 = main();
v162;