'use strict';
const fs = require('fs');
const path = require('path');
const utils = require('./utils');
const v51 = require('./constants');
const paths = v51.paths;
const plugins = require('./plugins');
const Languages = module.exports;
const languagesPath = path.join(__dirname, '../build/public/language');
const v52 = paths.nodeModules;
const v53 = path.join(v52, '/timeago/locales');
const files = fs.readdirSync(v53);
const v55 = f => {
    const v54 = f.startsWith('jquery.timeago');
    return v54;
};
const v56 = files.filter(v55);
const v59 = f => {
    const v57 = f.split('.');
    const v58 = v57[2];
    return v58;
};
const v60 = v56.map(v59);
Languages.timeagoCodes = v60;
const v69 = async function (language, namespace) {
    const v61 = fs.promises;
    const v62 = `${ namespace }.json`;
    const v63 = path.join(languagesPath, language, v62);
    const data = await v61.readFile(v63, 'utf8');
    const v64 = JSON.parse(data);
    const v65 = {};
    const parsed = v64 || v65;
    const v66 = plugins.hooks;
    const v67 = {
        language,
        namespace,
        data: parsed
    };
    const result = await v66.fire('filter:languages.get', v67);
    const v68 = result.data;
    return v68;
};
Languages.get = v69;
let codeCache = null;
const v78 = async function () {
    const v70 = codeCache.length;
    const v71 = codeCache && v70;
    if (v71) {
        return codeCache;
    }
    try {
        const v72 = fs.promises;
        const v73 = path.join(languagesPath, 'metadata.json');
        const file = await v72.readFile(v73, 'utf8');
        const parsed = JSON.parse(file);
        codeCache = parsed.languages;
        const v74 = parsed.languages;
        return v74;
    } catch (err) {
        const v75 = err.code;
        const v76 = v75 === 'ENOENT';
        if (v76) {
            const v77 = [];
            return v77;
        }
        throw err;
    }
};
Languages.listCodes = v78;
let listCache = null;
const v93 = async function () {
    const v79 = listCache.length;
    const v80 = listCache && v79;
    if (v80) {
        return listCache;
    }
    const codes = await Languages.listCodes();
    const v84 = async folder => {
        try {
            const configPath = path.join(languagesPath, folder, 'language.json');
            const v81 = fs.promises;
            const file = await v81.readFile(configPath, 'utf8');
            const lang = JSON.parse(file);
            return lang;
        } catch (err) {
            const v82 = err.code;
            const v83 = v82 === 'ENOENT';
            if (v83) {
                return;
            }
            throw err;
        }
    };
    const v85 = codes.map(v84);
    let languages = await Promise.all(v85);
    const v92 = lang => {
        const v86 = lang.code;
        const v87 = lang && v86;
        const v88 = lang.name;
        const v89 = v87 && v88;
        const v90 = lang.dir;
        const v91 = v89 && v90;
        return v91;
    };
    languages = languages.filter(v92);
    listCache = languages;
    return languages;
};
Languages.list = v93;
const v98 = async function (userLang) {
    const languageCodes = await Languages.listCodes();
    const timeagoCode = utils.userLangToTimeagoCode(userLang);
    const v94 = languageCodes.includes(userLang);
    const v95 = Languages.timeagoCodes;
    const v96 = v95.includes(timeagoCode);
    const v97 = v94 && v96;
    if (v97) {
        return timeagoCode;
    }
    return '';
};
Languages.userTimeagoCode = v98;
const v99 = require('./promisify');
const v100 = v99(Languages);
v100;