const path = require('path');
const http = require('http');
const fs = require('fs');
const v142 = require('stream');
const Transform = v142.Transform;
const chalk = require('chalk');
const MSG404 = 'not found';
const CODE404 = 404;
import {
    giveHtmlFile,
    giveFile,
    isDirectory,
    isFile
} from './helpers';
const v143 = fs.constants;
const v144 = !v143;
if (v144) {
    const v145 = {};
    v145.R_OK = 4;
    fs.constants = v145;
}
const liteDevServer = ({folder = 'public', page404 = null, listen = 3000, liveReload = true, webSocketPort = 8080, watchFolders = ['public'], autoInjectClientJS = true, proxy = [], liveReloadDelay = 0, historyApiFallback = false, reloadDelayOnClient = 100, giveDefaultPage = true, defaultPageFirst = 'index.html', defaultPageSecond = 'index.htm', serverName = 'liteDevServer', pathRewrite = null}) => {
    const v146 = `${ __dirname }/client.js`;
    const v147 = fs.readFileSync(v146, 'utf8');
    const v148 = v147.replace(/webSocketPort/g, webSocketPort);
    const clientScript = v148.replace(/reloadDelay/g, reloadDelayOnClient);
    const _transform = function (chunk, enc, cb) {
        if (autoInjectClientJS) {
            const v149 = chunk + '';
            const v150 = `$1 \n<script>${ clientScript }</script>`;
            const newChunk = v149.replace(/(<head>)/, v150);
            const v151 = this.push(newChunk);
            v151;
        } else {
            const v152 = this.push(chunk);
            v152;
        }
        const v153 = cb();
        v153;
    };
    let wss = null;
    const watchers = [];
    if (liveReload) {
        const EventEmitter = require('events');
        const liveReloadEM = new EventEmitter();
        const ws = require('ws');
        const v154 = { port: webSocketPort };
        wss = new ws.Server(v154);
        const v161 = connection => {
            const v155 = console.log('\nlite-dev-server: The WebSocket connection is established successfully');
            v155;
            const reloadHandler = () => {
                const v156 = connection.send('reload page');
                v156;
            };
            const v157 = liveReloadEM.on('reload', reloadHandler);
            v157;
            const v159 = () => {
                const v158 = liveReloadEM.removeListener('reload', reloadHandler);
                v158;
            };
            const v160 = connection.on('close', v159);
            v160;
        };
        const v162 = wss.on('connection', v161);
        v162;
        const v168 = folder => {
            try {
                const v163 = `${ folder }`;
                const v164 = fs.accessSync(v163);
                v164;
                return true;
            } catch (err) {
                const v165 = err + '';
                const v166 = chalk.red(v165);
                const v167 = console.log(v166);
                v167;
                return false;
            }
        };
        watchFolders = watchFolders.filter(v168);
        const v169 = `\nwatchFolders ${ watchFolders }`;
        const v170 = chalk.green(v169);
        const v171 = console.log(v170);
        v171;
        const v180 = folder => {
            const v172 = `${ folder }`;
            const v173 = { recursive: true };
            const v177 = () => {
                const v175 = function () {
                    const v174 = liveReloadEM.emit('reload');
                    v174;
                };
                const v176 = setTimeout(v175, liveReloadDelay);
                v176;
            };
            const v178 = fs.watch(v172, v173, v177);
            const v179 = watchers.push(v178);
            v179;
        };
        const v181 = watchFolders.forEach(v180);
        v181;
    }
    if (page404) {
        try {
            const v182 = `${ folder }/${ page404 }`;
            const v183 = fs.constants;
            const v184 = v183.R_OK;
            const v185 = fs.accessSync(v182, v184);
            v185;
        } catch (err) {
            const v186 = err + '';
            const v187 = chalk.red(v186);
            const v188 = console.log(v187);
            v188;
        }
    }
    const v267 = async (req, res) => {
        let url = req.url;
        const ext = path.extname(url);
        const v189 = req.url;
        const v190 = `<-- ${ v189 } ${ serverName }`;
        const v191 = chalk.blue(v190);
        const v192 = console.log(v191);
        v192;
        const v200 = item => {
            const v193 = req.url;
            const v194 = item.path;
            const v195 = v193.match(v194);
            const v196 = item.host;
            const v197 = v195 && v196;
            const v198 = item.port;
            const v199 = v197 && v198;
            return v199;
        };
        const matchedProxy = proxy.find(v200);
        if (matchedProxy) {
            const pathRewrite = matchedProxy.pathRewrite;
            const v201 = typeof pathRewrite;
            const v202 = v201 === 'object';
            const v203 = pathRewrite && v202;
            if (v203) {
                const v204 = pathRewrite.pattern;
                const v205 = pathRewrite.replacement;
                url = url.replace(v204, v205);
            }
            const v206 = matchedProxy.host;
            const v207 = matchedProxy.port;
            const v208 = req.method;
            const v209 = req.headers;
            const options = {};
            options.hostname = v206;
            options.port = v207;
            options.path = url;
            options.method = v208;
            options.headers = v209;
            const v214 = _res => {
                const v210 = _res.statusCode;
                const v211 = _res.headers;
                const v212 = res.writeHead(v210, v211);
                v212;
                const v213 = _res.pipe(res);
                v213;
            };
            const request = http.request(options, v214);
            const v215 = request.end();
            v215;
        } else {
            if (pathRewrite) {
                const v216 = [];
                const v217 = v216.concat(pathRewrite);
                const v224 = i => {
                    const v218 = i.pattern;
                    const v219 = i && v218;
                    const v220 = i.replacement;
                    const v221 = v219 && v220;
                    if (v221) {
                        const v222 = i.pattern;
                        const v223 = i.replacement;
                        url = url.replace(v222, v223);
                    }
                };
                const v225 = v217.forEach(v224);
                v225;
            }
            const injectStream = new Transform();
            injectStream._transform = _transform;
            const v226 = req.url;
            const v227 = v226 === '/';
            const v228 = !ext;
            const v229 = historyApiFallback && v228;
            const v230 = v227 || v229;
            if (v230) {
                try {
                    const v231 = `${ folder }/${ defaultPageFirst }`;
                    await giveHtmlFile(res, v231, injectStream);
                } catch (err) {
                    try {
                        const v232 = `${ folder }/${ defaultPageSecond }`;
                        await giveHtmlFile(res, v232, injectStream);
                    } catch (err) {
                        const v233 = err + '';
                        const v234 = chalk.red(v233);
                        const v235 = console.log(v234);
                        v235;
                        res.statusCode = CODE404;
                        if (page404) {
                            const v236 = `${ folder }/${ page404 }`;
                            await giveHtmlFile(res, v236, injectStream);
                        } else {
                            const v237 = res.end(MSG404);
                            v237;
                        }
                    }
                }
            } else {
                try {
                    try {
                        const v238 = req.url;
                        const v239 = `${ folder }${ v238 }`;
                        await isFile(v239);
                        const v240 = ext === '.html';
                        const v241 = ext === '.htm';
                        const v242 = v240 || v241;
                        if (v242) {
                            const v243 = req.url;
                            const v244 = `${ folder }${ v243 }`;
                            await giveHtmlFile(res, v244, injectStream);
                        } else {
                            const v245 = req.url;
                            const v246 = `${ folder }${ v245 }`;
                            await giveFile(res, v246, ext);
                        }
                    } catch (err) {
                        try {
                            if (giveDefaultPage) {
                                const v247 = req.url;
                                const v248 = `${ folder }${ v247 }`;
                                await isDirectory(v248);
                                try {
                                    const v249 = req.url;
                                    const v250 = `${ folder }${ v249 }${ defaultPageFirst }`;
                                    await giveHtmlFile(res, v250, injectStream);
                                } catch (err) {
                                    try {
                                        const v251 = req.url;
                                        const v252 = `${ folder }${ v251 }${ defaultPageSecond }`;
                                        await giveHtmlFile(res, v252, injectStream);
                                    } catch (err) {
                                        const v253 = err + '';
                                        const v254 = chalk.red(v253);
                                        const v255 = console.log(v254);
                                        v255;
                                        res.statusCode = CODE404;
                                        if (page404) {
                                            const v256 = `${ folder }/${ page404 }`;
                                            await giveHtmlFile(res, v256, injectStream);
                                        } else {
                                            const v257 = res.end(MSG404);
                                            v257;
                                        }
                                    }
                                }
                            } else {
                                const v258 = new Error('giveDefaultPage is false');
                                throw v258;
                            }
                        } catch (err) {
                            const v259 = err + '';
                            const v260 = chalk.red(v259);
                            const v261 = console.log(v260);
                            v261;
                        }
                    }
                } catch (err) {
                    const v262 = err + '';
                    const v263 = chalk.red(v262);
                    const v264 = console.log(v263);
                    v264;
                    res.statusCode = CODE404;
                    if (page404) {
                        const v265 = `${ folder }/${ page404 }`;
                        await giveHtmlFile(res, v265, injectStream);
                    } else {
                        const v266 = res.end(MSG404);
                        v266;
                    }
                }
            }
        }
    };
    const server = http.createServer(v267);
    const v268 = server.listen(listen);
    v268;
    const v269 = server.address();
    const v270 = v269.port;
    const v271 = `lite-dev-server listening on port ${ v270 }`;
    const v272 = chalk.green(v271);
    const v273 = console.log(v272);
    v273;
    server.wss = wss;
    server.watchers = watchers;
    const v282 = () => {
        const v274 = watchers.length;
        const v275 = watchers && v274;
        if (v275) {
            const v280 = watcher => {
                const v276 = watcher.close;
                const v277 = watcher && v276;
                const v278 = watcher.close();
                const v279 = v277 && v278;
                return v279;
            };
            const v281 = watchers.forEach(v280);
            v281;
        }
    };
    server.closeAllWatchers = v282;
    return server;
};
module.exports = liteDevServer;