const fs = require('fs');
const path = require('path');
const tcpPortUsed = require('tcp-port-used');
const getPortFromArgs = function (args) {
    let port = 9515;
    const v40 = !args;
    if (v40) {
        return port;
    }
    const portRegexp = /--port=(\d*)/;
    const v42 = function (arg) {
        const v41 = portRegexp.test(arg);
        return v41;
    };
    const portArg = args.find(v42);
    if (portArg) {
        const v43 = portRegexp.exec(portArg);
        const v44 = v43[1];
        port = parseInt(v44);
    }
    return port;
};
const v45 = process.env;
const v46 = path.join(__dirname, 'chromedriver');
const v47 = path.delimiter;
const v48 = v46 + v47;
const v49 = process.env;
const v50 = v49.PATH;
v45.PATH = v48 + v50;
const v51 = process.platform;
const v52 = v51 === 'win32';
const v53 = path.join(__dirname, 'chromedriver', 'chromedriver.exe');
const v54 = path.join(__dirname, 'chromedriver', 'chromedriver');
let v55;
if (v52) {
    v55 = v53;
} else {
    v55 = v54;
}
exports.path = v55;
exports.version = '119.0.6045.105';
const v73 = function (args, returnPromise) {
    let command = exports.path;
    const v56 = fs.existsSync(command);
    const v57 = !v56;
    if (v57) {
        const v58 = console.log('Could not find chromedriver in default path: ', command);
        v58;
        const v59 = console.log('Falling back to use global chromedriver bin');
        v59;
        const v60 = process.platform;
        const v61 = v60 === 'win32';
        if (v61) {
            command = 'chromedriver.exe';
        } else {
            command = 'chromedriver';
        }
    }
    const v62 = require('child_process');
    const cp = v62.spawn(command, args);
    const v63 = cp.stdout;
    const v64 = process.stdout;
    const v65 = v63.pipe(v64);
    v65;
    const v66 = cp.stderr;
    const v67 = process.stderr;
    const v68 = v66.pipe(v67);
    v68;
    exports.defaultInstance = cp;
    const v69 = !returnPromise;
    if (v69) {
        return cp;
    }
    const port = getPortFromArgs(args);
    const pollInterval = 100;
    const timeout = 10000;
    const v70 = tcpPortUsed.waitUntilUsed(port, pollInterval, timeout);
    const v71 = function () {
        return cp;
    };
    const v72 = v70.then(v71);
    return v72;
};
exports.start = v73;
const v78 = function () {
    const v74 = exports.defaultInstance;
    const v75 = v74 != null;
    if (v75) {
        const v76 = exports.defaultInstance;
        const v77 = v76.kill();
        v77;
    }
};
exports.stop = v78;