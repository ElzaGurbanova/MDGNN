var fs = require('fs');
const v67 = require('child_process');
var exec = v67.exec;
const v68 = require('child_process');
var execFile = v68.execFile;
var Q = require('q');
var path = require('path');
var plist = require('plist');
var utils = require('./utils');
const v69 = require('debug');
var debug = v69('launchpad:local:version');
var validPath = function (filename) {
    var filter = /[`!@#$%^&*()_+\-=\[\]{};'"|,<>?~]/;
    const v70 = filter.test(filename);
    if (v70) {
        const v71 = console.log('\nInvalid characters inside the path to the browser\n');
        v71;
        return;
    }
    return filename;
};
const v132 = function (browser) {
    const v72 = !browser;
    const v73 = browser.path;
    const v74 = !v73;
    const v75 = v72 || v74;
    if (v75) {
        const v76 = Q(null);
        return v76;
    }
    const v77 = process.platform;
    const v78 = v77 === 'win32';
    if (v78) {
        const v79 = '"' + __dirname;
        const v80 = browser.command;
        const v81 = 'ShowVer.exe" "' + v80;
        const v82 = v81 + '"';
        var command = path.join(v79, '..', '..', 'resources', v82);
        var deferred = Q.defer();
        const v83 = debug('Retrieving version for windows executable', command);
        v83;
        const v84 = command.split(' ');
        const v85 = v84[0];
        const v86 = command.split(' ');
        const v87 = v86.slice(1);
        const v98 = function (error, stdout) {
            var regex = /ProductVersion:\s*(.*)/;
            const v88 = typeof stdout;
            const v89 = v88 === 'string';
            const v90 = regex.test(stdout);
            const v91 = v89 && v90;
            if (v91) {
                const v92 = stdout.match(regex);
                const v93 = v92[1];
                browser.version = v93;
                const v94 = browser.name;
                const v95 = browser.version;
                const v96 = debug('Found browser version', v94, v95);
                v96;
            }
            const v97 = deferred.resolve(browser);
            return v97;
        };
        const v99 = execFile(v85, v87, v98);
        v99;
        const v100 = deferred.promise;
        return v100;
    }
    const v101 = browser.plistPath;
    if (v101) {
        try {
            const v102 = browser.path;
            const v103 = browser.plistPath;
            const v104 = path.join(v102, v103);
            const v105 = fs.readFileSync(v104);
            var plistInfo = v105.toString();
            const v106 = debug('Getting Browser information from pList', plistInfo);
            v106;
            var data = plist.parse(plistInfo);
            const v107 = browser.versionKey;
            const v108 = data[v107];
            const v109 = browser.versionKey2;
            const v110 = data[v109];
            browser.version = v108 || v110;
            const v111 = browser.name;
            const v112 = browser.version;
            const v113 = debug('Found browser version', v111, v112);
            v113;
            const v114 = Q(browser);
            return v114;
        } catch (e) {
            const v115 = browser.name;
            const v116 = 'Unable to get ' + v115;
            const v117 = v116 + ' version.';
            const v118 = new Error(v117);
            const v119 = Q.reject(v118);
            return v119;
        }
    }
    const v120 = browser.path;
    const v121 = validPath(v120);
    const v122 = v121 + ' --version';
    const v123 = Q.nfcall(exec, v122);
    const v129 = function (stdout) {
        const v124 = browser.path;
        const v125 = validPath(v124);
        const v126 = 'Ran ' + v125;
        const v127 = v126 + ' --version';
        const v128 = debug(v127, stdout);
        v128;
        var version = utils.getStdout(stdout);
        if (version) {
            browser.version = version;
        }
        return browser;
    };
    const v130 = function () {
        return browser;
    };
    const v131 = v123.then(v129, v130);
    return v131;
};
module.exports = v132;