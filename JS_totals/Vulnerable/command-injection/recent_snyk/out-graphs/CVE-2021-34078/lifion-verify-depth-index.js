'use strict';
const v100 = require('chalk');
const blue = v100.blue;
const bold = v100.bold;
const green = v100.green;
const red = v100.red;
const path = require('path');
const semver = require('semver');
const v101 = require('child_process');
const exec = v101.exec;
const v102 = require('util');
const promisify = v102.promisify;
const execAsync = promisify(exec);
const getLatestVersions = async function (name) {
    const v104 = `npm view ${ name } versions --json`;
    const v103 = await execAsync(v104);
    const stdout = v103.stdout;
    try {
        const v105 = JSON.parse(stdout);
        return v105;
    } catch (err) {
        const v106 = err.toString();
        const v107 = new Error(`Failed to parse output from NPM view - ${ v106 }`);
        throw v107;
    }
};
const getLatestTag = async function (name) {
    try {
        const v109 = `npm view ${ name } dist-tags --json`;
        const v108 = await execAsync(v109);
        const stdout = v108.stdout;
        const v110 = JSON.parse(stdout);
        const latest = v110.latest;
        return latest;
    } catch (err) {
        const v111 = err.toString();
        const v112 = new Error(`Failed to parse output from NPM view - ${ v111 }`);
        throw v112;
    }
};
const getLatestVersion = async function (name, wanted) {
    const versions = await getLatestVersions(name);
    const latest = await getLatestTag(name);
    const v114 = i => {
        const v113 = semver.satisfies(i, wanted);
        return v113;
    };
    const applicableVersions = versions.filter(v114);
    const v116 = (a, b) => {
        const v115 = semver.rcompare(a, b);
        return v115;
    };
    const v117 = applicableVersions.sort(v116);
    v117;
    const v118 = applicableVersions[0];
    const v119 = semver.lt(latest, v118);
    const v120 = latest && v119;
    if (v120) {
        return latest;
    }
    const v121 = applicableVersions[0];
    return v121;
};
const getInstalledVersion = function (currentDir, name) {
    try {
        const v122 = path.join(currentDir, 'node_modules', name, 'package.json');
        const v123 = require(v122);
        const v124 = v123.version;
        return v124;
    } catch (err) {
        return null;
    }
};
const pushPkgs = function ({dir, logger, deps = {}, type, pkgs}) {
    const v125 = Object.keys(deps);
    const v143 = async name => {
        let wanted = deps[name];
        const v126 = wanted.startsWith('^');
        const v127 = !v126;
        if (v127) {
            wanted = `^${ wanted }`;
        }
        const installed = getInstalledVersion(dir, name);
        const latest = await getLatestVersion(name, wanted);
        const wantedFixed = wanted.slice(1);
        const v128 = installed === null;
        const v129 = wantedFixed !== installed;
        const v130 = v128 || v129;
        const v131 = installed !== latest;
        const shouldBeInstalled = v130 || v131;
        if (shouldBeInstalled) {
            let warning;
            const v132 = installed !== null;
            const v133 = wantedFixed !== installed;
            let v134;
            if (v133) {
                v134 = wantedFixed;
            } else {
                v134 = installed;
            }
            const v135 = red(v134);
            const v136 = green(latest);
            const v137 = red('not installed');
            if (v132) {
                warning = `outdated: ${ v135 } â†’ ${ v136 }`;
            } else {
                warning = v137;
            }
            const v138 = red(name);
            const v139 = `${ v138 } is ${ warning }`;
            const v140 = logger.info(v139);
            v140;
        }
        const v141 = {
            installed,
            latest,
            name,
            shouldBeInstalled,
            type,
            wanted
        };
        const v142 = pkgs.push(v141);
        v142;
    };
    const v144 = v125.map(v143);
    return v144;
};
const getPkgIds = function (filteredPkgs) {
    const v146 = ({latest, name}) => {
        const v145 = `${ name }@${ latest }`;
        return v145;
    };
    const v147 = filteredPkgs.map(v146);
    const v148 = v147.join(' ');
    return v148;
};
const verifyDeps = async function ({autoUpgrade = false, dir, logger = console} = {}) {
    const v150 = path.join(dir, 'package.json');
    const v149 = require(v150);
    const dependencies = v149.dependencies;
    const devDependencies = v149.devDependencies;
    const v151 = blue('Verifying dependencies\u2026\n');
    const v152 = logger.info(v151);
    v152;
    const pkgs = [];
    const v153 = {
        deps: dependencies,
        dir,
        logger,
        pkgs,
        type: 'prod'
    };
    const v154 = pushPkgs(v153);
    const v155 = {
        deps: devDependencies,
        dir,
        logger,
        pkgs,
        type: 'dev'
    };
    const v156 = pushPkgs(v155);
    const v157 = [
        ...v154,
        ...v156
    ];
    await Promise.all(v157);
    const v158 = ({shouldBeInstalled}) => {
        return shouldBeInstalled;
    };
    const toInstall = pkgs.filter(v158);
    const v159 = toInstall.length;
    const v160 = v159 > 0;
    if (v160) {
        const v162 = ({type}) => {
            const v161 = type === 'prod';
            return v161;
        };
        const prodPkgs = toInstall.filter(v162);
        let upgradePackages = '';
        const v163 = prodPkgs.length;
        const v164 = v163 > 0;
        if (v164) {
            const v165 = getPkgIds(prodPkgs);
            const v166 = `npm i ${ v165 } `;
            upgradePackages = upgradePackages.concat(v166);
        }
        const v168 = ({type}) => {
            const v167 = type === 'dev';
            return v167;
        };
        const devPkgs = toInstall.filter(v168);
        const v169 = devPkgs.length;
        const v170 = v169 > 0;
        if (v170) {
            const v171 = getPkgIds(devPkgs);
            const v172 = `\nnpm i -D ${ v171 } `;
            upgradePackages = upgradePackages.concat(v172);
        }
        if (autoUpgrade) {
            const v173 = logger.info('UPGRADING\u2026');
            v173;
            const v174 = logger.info(upgradePackages);
            v174;
            const v175 = getPkgIds(prodPkgs);
            const v176 = `npm i ${ v175 }`;
            const prodResult = await execAsync(v176);
            const v177 = getPkgIds(devPkgs);
            const v178 = `npm i -D ${ v177 }`;
            const devResult = await execAsync(v178);
            const v179 = bold('Upgraded dependencies:\n');
            const v180 = prodResult.stdout;
            const v181 = `${ v179 }${ v180 }`;
            const v182 = green(v181);
            const v183 = `${ v182 }`;
            const v184 = logger.info(v183);
            v184;
            const v185 = bold('Upgraded development dependencies:\n');
            const v186 = devResult.stdout;
            const v187 = `${ v185 }${ v186 }`;
            const v188 = green(v187);
            const v189 = `${ v188 }`;
            const v190 = logger.info(v189);
            v190;
        } else {
            const v191 = bold('To resolve this, run:');
            const v192 = `\n${ v191 }`;
            const v193 = logger.info(v192);
            v193;
            const v194 = logger.info(upgradePackages);
            v194;
            const v195 = red('Please update your installed modules.');
            const v196 = new Error(v195);
            throw v196;
        }
    } else {
        const v197 = green('All NPM modules are up to date.');
        const v198 = logger.info(v197);
        v198;
    }
};
module.exports = verifyDeps;