'use strict';
var os = require('os');
const v87 = require('child_process');
var exec = v87.exec;
var async = require('async');
const trim_exec = function (cmd, cb) {
    const v95 = function (err, out) {
        const v88 = out.toString();
        const v89 = v88 != '';
        const v90 = out && v89;
        if (v90) {
            const v91 = out.toString();
            const v92 = v91.trim();
            const v93 = cb(null, v92);
            v93;
        } else {
            const v94 = cb(err);
            v94;
        }
    };
    const v96 = exec(cmd, v95);
    v96;
};
const v111 = function (cb) {
    var cmd = 'netstat -rn | grep UG | awk \'{print $NF}\'';
    const v109 = function (err, stdout) {
        if (err) {
            const v97 = cb(err);
            return v97;
        }
        const v98 = stdout.toString();
        const v99 = v98.trim();
        var raw = v99.split('\n');
        const v100 = raw.length;
        const v101 = v100 === 0;
        const v102 = [''];
        const v103 = raw === v102;
        const v104 = v101 || v103;
        if (v104) {
            const v105 = new Error('No active network interface found.');
            const v106 = cb(v105);
            return v106;
        }
        const v107 = raw[0];
        const v108 = cb(null, v107);
        v108;
    };
    const v110 = exec(cmd, v109);
    v110;
};
exports.get_active_network_interface_name = v111;
const v117 = function (nic_name, cb) {
    const v112 = 'cat /proc/net/wireless | grep ' + nic_name;
    const v115 = function (err, out) {
        let v113;
        if (err) {
            v113 = 'Wired';
        } else {
            v113 = 'Wireless';
        }
        const v114 = cb(null, v113);
        return v114;
    };
    const v116 = exec(v112, v115);
    v116;
};
exports.interface_type_for = v117;
const v120 = function (nic_name, cb) {
    const v118 = 'cat /sys/class/net/' + nic_name;
    var cmd = v118 + '/address';
    const v119 = trim_exec(cmd, cb);
    v119;
};
exports.mac_address_for = v120;
const v124 = function (nic_name, cb) {
    const v121 = 'ip r | grep ' + nic_name;
    const v122 = v121 + ' | grep default | cut -d \' \' -f 3 | head -n1';
    const v123 = trim_exec(v122, cb);
    v123;
};
exports.gateway_ip_for = v124;
const v127 = function (nic_name, cb) {
    const v125 = 'ifconfig ' + nic_name;
    var cmd = v125 + ' 2> /dev/null | egrep \'netmask|Mask:\' | awk \'{print $4}\' | sed \'s/Mask://\'';
    const v126 = trim_exec(cmd, cb);
    v126;
};
exports.netmask_for = v127;
const v172 = function (cb) {
    var count = 0;
    var list = [];
    var nics = os.networkInterfaces();
    const append_data = function (obj) {
        const v130 = function (cb) {
            const v128 = obj.name;
            const v129 = exports.mac_address_for(v128, cb);
            v129;
        };
        const v133 = function (cb) {
            const v131 = obj.name;
            const v132 = exports.gateway_ip_for(v131, cb);
            v132;
        };
        const v136 = function (cb) {
            const v134 = obj.name;
            const v135 = exports.netmask_for(v134, cb);
            v135;
        };
        const v139 = function (cb) {
            const v137 = obj.name;
            const v138 = exports.interface_type_for(v137, cb);
            v138;
        };
        const v140 = [
            v130,
            v133,
            v136,
            v139
        ];
        const v153 = function (err, results) {
            const v141 = results[0];
            if (v141) {
                const v142 = results[0];
                obj.mac_address = v142;
            }
            const v143 = results[1];
            if (v143) {
                const v144 = results[1];
                obj.gateway_ip = v144;
            }
            const v145 = results[2];
            if (v145) {
                const v146 = results[2];
                obj.netmask = v146;
            }
            const v147 = results[3];
            if (v147) {
                const v148 = results[3];
                obj.type = v148;
            }
            const v149 = list.push(obj);
            v149;
            const v150 = --count;
            const v151 = cb(null, list);
            const v152 = v150 || v151;
            v152;
        };
        const v154 = async.parallel(v140, v153);
        v154;
    };
    let key;
    for (key in nics) {
        const v155 = key != 'lo0';
        const v156 = key != 'lo';
        const v157 = v155 && v156;
        const v158 = key.match(/^tun/);
        const v159 = !v158;
        const v160 = v157 && v159;
        if (v160) {
            const v161 = count++;
            v161;
            var obj = {};
            obj.name = key;
            const v162 = nics[key];
            const v166 = function (type) {
                const v163 = type.family;
                const v164 = v163 == 'IPv4';
                if (v164) {
                    const v165 = type.address;
                    obj.ip_address = v165;
                }
            };
            const v167 = v162.forEach(v166);
            v167;
            const v168 = append_data(obj);
            v168;
        }
    }
    const v169 = count == 0;
    if (v169) {
        const v170 = new Error('No interfaces found.');
        const v171 = cb(v170);
        v171;
    }
};
exports.get_network_interfaces_list = v172;