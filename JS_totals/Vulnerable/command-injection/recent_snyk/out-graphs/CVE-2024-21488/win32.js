'use strict';
var wmic = require('wmic');
const v79 = require('child_process');
var exec = v79.exec;
var os = require('os');
const get_wmic_ip_value = function (what, nic_name, cb) {
    const v94 = function (err, mac) {
        const v80 = !mac;
        const v81 = err || v80;
        if (v81) {
            const v82 = new Error('No MAC Address found.');
            const v83 = err || v82;
            const v84 = cb(v83);
            return v84;
        }
        const v85 = 'MACAddress = \'' + mac;
        const v86 = v85 + '\'';
        const v92 = function (err, out) {
            if (err) {
                const v87 = cb(err);
                return v87;
            }
            const v88 = out.split(',');
            const v89 = v88[0];
            const v90 = v89.replace(/[^0-9\.]/g, '');
            const v91 = cb(null, v90);
            v91;
        };
        const v93 = wmic.get_value('nicconfig', what, v86, v92);
        v93;
    };
    const v95 = exports.mac_address_for(nic_name, v94);
    v95;
};
const v97 = function (cb) {
    const v96 = wmic.get_value('nic', 'NetConnectionID', 'NetConnectionStatus = 2', cb);
    v96;
};
exports.get_active_network_interface_name = v97;
const v99 = function (nic_name, cb) {
    const v98 = get_wmic_ip_value('IPSubnet', nic_name, cb);
    v98;
};
exports.netmask_for = v99;
const v101 = function (nic_name, cb) {
    const v100 = get_wmic_ip_value('DefaultIPGateway', nic_name, cb);
    v100;
};
exports.gateway_ip_for = v101;
const v104 = function (nic_name, cb) {
    const v102 = 'NetConnectionID = \'' + nic_name;
    var cond = v102 + '\'';
    const v103 = wmic.get_value('nic', 'MACAddress', cond, cb);
    v103;
};
exports.mac_address_for = v104;
const v156 = function (callback) {
    var count;
    var list = [];
    var node_nics = os.networkInterfaces();
    const done = function () {
        const v105 = --count;
        const v106 = callback(null, list);
        const v107 = v105 || v106;
        v107;
    };
    const set_gateway = function (obj) {
        const v108 = obj.name;
        const v113 = function (err, res) {
            const v109 = res != '';
            const v110 = res && v109;
            let v111;
            if (v110) {
                v111 = res;
            } else {
                v111 = null;
            }
            obj.gateway_ip = v111;
            const v112 = done();
            v112;
        };
        const v114 = exports.gateway_ip_for(v108, v113);
        v114;
    };
    const set_netmask = function (obj) {
        const v115 = obj.name;
        const v119 = function (err, res) {
            const v116 = res != '';
            const v117 = res && v116;
            let v118;
            if (v117) {
                v118 = res;
            } else {
                v118 = null;
            }
            obj.netmask = v118;
        };
        const v120 = exports.netmask_for(v115, v119);
        v120;
    };
    const v154 = function (err, nics) {
        if (err) {
            const v121 = callback(err);
            return v121;
        }
        count = nics.length;
        const v122 = count == 0;
        if (v122) {
            const v123 = new Error('No interfaces found.');
            const v124 = cb(v123);
            return v124;
        }
        const v152 = function (nic) {
            const v125 = nic.Name;
            const v126 = nic.NetConnectionID;
            const v127 = v126 != '';
            const v128 = v125 && v127;
            const v129 = nic.MACAddress;
            const v130 = v129 != '';
            const v131 = v128 && v130;
            if (v131) {
                const v132 = nic.NetConnectionID;
                const v133 = nic.MACAddress;
                const v134 = nic.IPAddress;
                const v135 = nic.Manufacturer;
                const v136 = nic.Description;
                const v137 = nic.Name;
                const v138 = v137.match(/wi-?fi|wireless/i);
                let v139;
                if (v138) {
                    v139 = 'Wireless';
                } else {
                    v139 = 'Wired';
                }
                var obj = {};
                obj.name = v132;
                obj.mac_address = v133;
                obj.ip_address = v134;
                obj.vendor = v135;
                obj.model = v136;
                obj.type = v139;
                const v140 = obj.name;
                const v141 = node_nics[v140];
                const v142 = [];
                var node_nic = v141 || v142;
                const v146 = function (type) {
                    const v143 = type.family;
                    const v144 = v143 == 'IPv4';
                    if (v144) {
                        const v145 = type.address;
                        obj.ip_address = v145;
                    }
                };
                const v147 = node_nic.forEach(v146);
                v147;
                const v148 = list.push(obj);
                v148;
                const v149 = set_netmask(obj);
                v149;
                const v150 = set_gateway(obj);
                v150;
            } else {
                const v151 = done();
                v151;
            }
        };
        const v153 = nics.forEach(v152);
        v153;
    };
    const v155 = wmic.get_list('nic', v154);
    v155;
};
exports.get_network_interfaces_list = v156;