const DEFAULT_INDEX = 'index.html';
const HTTP_STATUS_OK = 200;
const HTTP_STATUS_PARTIAL_CONTENT = 206;
const HTTP_STATUS_NOT_MODIFIED = 304;
const HTTP_STATUS_ERR = 500;
const HTTP_STATUS_BAD_REQUEST = 400;
const HTTP_STATUS_FORBIDDEN = 403;
const HTTP_STATUS_NOT_FOUND = 404;
const HTTP_STATUS_INVALID_METHOD = 405;
const HTTP_STATUS_REQUEST_RANGE_NOT_SATISFIABLE = 416;
const VALID_HTTP_METHODS = [
    'GET',
    'HEAD'
];
const RANGE_REQUEST_HEADER_TEST = /^bytes=/;
const RANGE_REQUEST_HEADER_PATTERN = /\d*-\d*/g;
const TIME_MS_PRECISION = 3;
const MULTIPART_SEPARATOR = '--MULTIPARTSEPERATORaufielqbghgzwr';
const NEWLINE = '\n';
const v321 = require('events');
var EventEmitter = v321.EventEmitter;
var util = require('util');
var http = require('http');
var url = require('url');
var mime = require('mime');
var path = require('path');
var fs = require('fs');
const v322 = Array.prototype;
var slice = v322.slice;
var emberScript = require('./src/live/embedScript');
var monitor = require('./src/live/monitor');
module.exports = StaticServer;
const StaticServer = function (options) {
    const v323 = {};
    options = options || v323;
    const v324 = options.rootPath;
    const v325 = !v324;
    if (v325) {
        const v326 = new Error('Root path not specified');
        throw v326;
    }
    const v327 = options.templates;
    const v328 = !v327;
    if (v328) {
        const v329 = {};
        options.templates = v329;
    }
    const v330 = options.name;
    this.name = v330;
    const v331 = options.host;
    this.host = v331;
    const v332 = options.port;
    this.port = v332;
    const v333 = options.cors;
    this.cors = v333;
    const v334 = options.restartCommand;
    this.restartCommand = v334;
    const v335 = options.rootPath;
    const v336 = path.resolve(v335);
    this.rootPath = v336;
    const v337 = options.followSymlink;
    const v338 = !v337;
    const v339 = !v338;
    this.followSymlink = v339;
    const v340 = options.templates;
    const v341 = v340.index;
    const v342 = v341 || DEFAULT_INDEX;
    const v343 = options.templates;
    const v344 = v343.notFound;
    const v345 = {};
    v345['index'] = v342;
    v345['notFound'] = v344;
    this.templates = v345;
    this.monitor = monitor;
    const v346 = options.index;
    if (v346) {
        const v347 = console.log('options.index is now deprecated please use options.templates.index instead.');
        v347;
        const v348 = this.templates;
        const v349 = options.index;
        v348.index = v349;
    }
    const v350 = {
        configurable: true,
        enumerable: false,
        writable: true,
        value: null
    };
    const v351 = Object.defineProperty(this, '_socket', v350);
    v351;
};
const v352 = util.inherits(StaticServer, EventEmitter);
v352;
const v353 = http.STATUS_CODES;
StaticServer.STATUS_CODES = v353;
const v354 = StaticServer.prototype;
const start = function (callback) {
    const v355 = requestHandler(this);
    const v356 = http.createServer(v355);
    const v357 = this.port;
    const v358 = this.host;
    const v359 = v356.listen(v357, v358, callback);
    this._socket = v359;
    const v360 = this.monitor;
    const v361 = this._socket;
    const v362 = this.rootPath;
    const v363 = this.restartCommand;
    const v364 = v360.watch(v361, v362, v363);
    v364;
};
v354.start = start;
const v365 = StaticServer.prototype;
const stop = function () {
    const v366 = this._socket;
    if (v366) {
        const v367 = this._socket;
        const v368 = v367.close();
        v368;
        this._socket = null;
    }
};
v365.stop = stop;
const v369 = StaticServer.prototype;
const restart = function (reason, callback) {
    const v370 = this.stop();
    v370;
    const v371 = this.emit('restart', reason);
    v371;
    const v372 = requestHandler(this);
    const v373 = http.createServer(v372);
    const v374 = this.port;
    const v375 = this.host;
    const v376 = v373.listen(v374, v375, callback);
    this._socket = v376;
};
v369.restart = restart;
const requestHandler = function (server) {
    const v420 = function handler(req, res) {
        const v377 = req.url;
        const v378 = url.parse(v377);
        const v379 = v378.pathname;
        req.path = v379;
        var uri = req.path;
        const v380 = server.rootPath;
        var filename = path.join(v380, uri);
        var timestamp = process.hrtime();
        const v390 = function getElapsedTime() {
            var elapsed = process.hrtime(timestamp);
            const v381 = elapsed[0];
            const v382 = elapsed[0];
            const v383 = v382 + 's ';
            let v384;
            if (v381) {
                v384 = v383;
            } else {
                v384 = '';
            }
            const v385 = elapsed[1];
            const v386 = v385 / 1000000;
            const v387 = v386.toFixed(TIME_MS_PRECISION);
            const v388 = v384 + v387;
            const v389 = v388 + 'ms';
            return v389;
        };
        const v391 = { get: v390 };
        const v392 = Object.defineProperty(req, 'elapsedTime', v391);
        v392;
        const v393 = {};
        res.headers = v393;
        const v394 = server.name;
        if (v394) {
            const v395 = res.headers;
            const v396 = server.name;
            v395['X-Powered-By'] = v396;
        }
        const v397 = server.cors;
        if (v397) {
            const v398 = res.headers;
            const v399 = server.cors;
            v398['Access-Control-Allow-Origin'] = v399;
        }
        const v400 = server.emit('request', req);
        v400;
        const v401 = req.method;
        const v402 = VALID_HTTP_METHODS.indexOf(v401);
        const v403 = -1;
        const v404 = v402 === v403;
        if (v404) {
            const v405 = sendError(server, req, res, null, HTTP_STATUS_INVALID_METHOD);
            return v405;
        } else {
            const v406 = server.rootPath;
            const v407 = validPath(v406, filename);
            const v408 = !v407;
            if (v408) {
                const v409 = sendError(server, req, res, null, HTTP_STATUS_FORBIDDEN);
                return v409;
            }
        }
        const v410 = server.templates;
        const v411 = v410.index;
        const v412 = path.join(filename, v411);
        const v413 = [
            filename,
            v412
        ];
        const v418 = function (err, stat, file, index) {
            if (err) {
                const v414 = handleError(server, req, res, err);
                v414;
            } else {
                const v415 = stat.isDirectory();
                if (v415) {
                    const v416 = sendError(server, req, res, null, HTTP_STATUS_FORBIDDEN);
                    v416;
                } else {
                    const v417 = sendFile(server, req, res, stat, file);
                    v417;
                }
            }
        };
        const v419 = getFileStats(server, v413, v418);
        v419;
    };
    return v420;
};
const handleError = function (server, req, res, err) {
    const v421 = server.templates;
    const v422 = v421.notFound;
    if (v422) {
        const v423 = server.templates;
        const v424 = v423.notFound;
        const v425 = [v424];
        const v428 = function (err, stat, file, index) {
            if (err) {
                const v426 = sendError(server, req, res, null, HTTP_STATUS_NOT_FOUND);
                v426;
            } else {
                res.status = HTTP_STATUS_NOT_FOUND;
                const v427 = sendFile(server, req, res, stat, file);
                v427;
            }
        };
        const v429 = getFileStats(server, v425, v428);
        v429;
    } else {
        const v430 = sendError(server, req, res, null, HTTP_STATUS_NOT_FOUND);
        v430;
    }
};
const validPath = function (rootPath, file) {
    var resolvedPath = path.resolve(rootPath, file);
    const v431 = resolvedPath.indexOf(rootPath);
    const v432 = v431 === 0;
    return v432;
};
const getFileStats = function (server, files, callback) {
    var dirFound;
    var dirStat;
    var dirIndex;
    const checkNext = function (err, index) {
        const v433 = files.length;
        if (v433) {
            const v434 = files.shift();
            const v435 = index + 1;
            const v436 = next(v434, v435);
            v436;
        } else {
            if (dirFound) {
                const v437 = callback(null, dirStat, dirFound, dirIndex);
                v437;
            } else {
                const v438 = new Error('File not found');
                const v439 = err || v438;
                const v440 = callback(v439);
                v440;
            }
        }
    };
    const next = function (file, index) {
        const v458 = function (err, stat) {
            if (err) {
                const v441 = checkNext(err, index);
                v441;
            } else {
                const v442 = stat.isSymbolicLink();
                if (v442) {
                    const v443 = server.followSymlink;
                    if (v443) {
                        const v450 = function (err, fileRef) {
                            if (err) {
                                const v444 = checkNext(err, index);
                                v444;
                            } else {
                                const v445 = path.isAbsolute(fileRef);
                                const v446 = !v445;
                                if (v446) {
                                    const v447 = path.dirname(file);
                                    fileRef = path.join(v447, fileRef);
                                }
                                const v448 = server.emit('symbolicLink', fileRef);
                                v448;
                                const v449 = next(fileRef, index);
                                v449;
                            }
                        };
                        const v451 = fs.readlink(file, v450);
                        v451;
                    } else {
                        const v452 = new Error('Symbolic link not allowed');
                        const v453 = callback(v452);
                        v453;
                    }
                } else {
                    const v454 = stat.isDirectory();
                    if (v454) {
                        const v455 = !dirFound;
                        if (v455) {
                            dirFound = file;
                            dirStat = stat;
                            dirIndex = index;
                        }
                        const v456 = checkNext(null, index);
                        v456;
                    } else {
                        const v457 = callback(null, stat, file, index);
                        v457;
                    }
                }
            }
        };
        const v459 = fs.lstat(file, v458);
        v459;
    };
    const v460 = checkNext(null, 0);
    v460;
};
const validateClientCache = function (server, req, res, stat) {
    const v461 = stat.mtime;
    var mtime = v461.getTime();
    const v462 = req.headers;
    var clientETag = v462['if-none-match'];
    const v463 = req.headers;
    const v464 = v463['if-modified-since'];
    var clientMTime = Date.parse(v464);
    const v465 = clientMTime || clientETag;
    const v466 = !clientETag;
    const v467 = res.headers;
    const v468 = v467['Etag'];
    const v469 = clientETag === v468;
    const v470 = v466 || v469;
    const v471 = v465 && v470;
    const v472 = !clientMTime;
    const v473 = clientMTime >= mtime;
    const v474 = v472 || v473;
    const v475 = v471 && v474;
    if (v475) {
        const v476 = [
            'Content-Encoding',
            'Content-Language',
            'Content-Length',
            'Content-Location',
            'Content-MD5',
            'Content-Range',
            'Content-Type',
            'Expires',
            'Last-Modified'
        ];
        const v480 = function (entityHeader) {
            const v477 = res.headers;
            const v478 = v477[entityHeader];
            const v479 = delete v478;
            v479;
        };
        const v481 = v476.forEach(v480);
        v481;
        res.status = HTTP_STATUS_NOT_MODIFIED;
        const v482 = res.status;
        const v483 = res.headers;
        const v484 = res.writeHead(v482, v483);
        v484;
        const v485 = res.end();
        v485;
        const v486 = server.emit('response', req, res);
        v486;
        return true;
    } else {
        return false;
    }
};
const parseRanges = function (req, res, size) {
    var ranges;
    var start;
    var end;
    var i;
    var originalSize = size;
    const v487 = req.headers;
    const v488 = v487.range;
    if (v488) {
        const v489 = req.headers;
        const v490 = v489.range;
        const v491 = RANGE_REQUEST_HEADER_TEST.test(v490);
        const v492 = !v491;
        if (v492) {
            const v493 = req.headers;
            const v494 = v493.range;
            const v495 = 'Invalid Range Headers: ' + v494;
            const v496 = sendError(req, res, null, HTTP_STATUS_BAD_REQUEST, v495);
            return v496;
        }
        const v497 = req.headers;
        const v498 = v497.range;
        ranges = v498.match(RANGE_REQUEST_HEADER_PATTERN);
        size = 0;
        const v499 = !ranges;
        if (v499) {
            const v500 = req.headers;
            const v501 = v500.range;
            const v502 = 'Invalid Range Headers: ' + v501;
            const v503 = sendError(server, req, res, null, HTTP_STATUS_BAD_REQUEST, v502);
            return v503;
        }
        i = ranges.length;
        const v504 = --i;
        let v505 = v504 >= 0;
        while (v505) {
            const v506 = ranges[i];
            range = v506.split('-');
            const v507 = range[0];
            const v508 = range[0];
            const v509 = Number(v508);
            if (v507) {
                start = v509;
            } else {
                start = null;
            }
            const v510 = range[1];
            const v511 = range[1];
            const v512 = Number(v511);
            if (v510) {
                end = v512;
            } else {
                end = null;
            }
            const v513 = start > originalSize;
            const v514 = end > originalSize;
            const v515 = v513 || v514;
            const v516 = start && end;
            const v517 = start > end;
            const v518 = v516 && v517;
            const v519 = v515 || v518;
            if (v519) {
                const v520 = res.headers;
                v520['Content-Range'] = 'bytes=0-' + originalSize;
                const v521 = sendError(server, req, res, null, DEFAULT_STATUS_REQUEST_RANGE_NOT_SATISFIABLE);
                return v521;
            }
            const v522 = start !== null;
            const v523 = end !== null;
            const v524 = v522 && v523;
            if (v524) {
                size += end - start;
                const v525 = end + 1;
                const v526 = {};
                v526.start = start;
                v526.end = v525;
                ranges[i] = v526;
            } else {
                const v527 = start !== null;
                if (v527) {
                    size += originalSize - start;
                    const v528 = originalSize + 1;
                    const v529 = {};
                    v529.start = start;
                    v529.end = v528;
                    ranges[i] = v529;
                } else {
                    const v530 = end !== null;
                    if (v530) {
                        size += end;
                        const v531 = originalSize - end;
                        const v532 = {};
                        v532.start = v531;
                        v532.end = originalSize;
                        ranges[i] = v532;
                    }
                }
            }
            v505 = v504 >= 0;
        }
    }
    const v533 = {};
    v533.ranges = ranges;
    v533.size = size;
    return v533;
};
const sendError = function (server, req, res, err, status, message) {
    const v534 = res.status;
    const v535 = status || v534;
    status = v535 || HTTP_STATUS_ERR;
    const v536 = http.STATUS_CODES;
    const v537 = v536[status];
    message = message || v537;
    const v538 = status >= 400;
    if (v538) {
        const v539 = [
            'Content-Encoding',
            'Content-Language',
            'Content-Length',
            'Content-Location',
            'Content-MD5',
            'Etag',
            'Expires',
            'Last-Modified'
        ];
        const v543 = function (entityHeader) {
            const v540 = res.headers;
            const v541 = v540[entityHeader];
            const v542 = delete v541;
            v542;
        };
        const v544 = v539.forEach(v543);
        v544;
        res.status = status;
        const v546 = mime.lookup('text');
        v545['Content-Type'] = v546;
        const v547 = res.headers;
        const v548 = res.writeHead(status, v547);
        v548;
        const v549 = res.write(message);
        v549;
        const v550 = res.end();
        v550;
    }
    const v551 = server.emit('response', req, res, err);
    v551;
};
const sendFile = function (server, req, res, stat, file) {
    var headersSent = false;
    const v552 = stat.size;
    var contentParts = parseRanges(req, res, v552);
    var streamOptions = {};
    streamOptions.flags = 'r';
    var contentType = mime.lookup(file);
    var rangeIndex = 0;
    const v553 = !contentParts;
    if (v553) {
        return;
    }
    const v555 = stat.ino;
    const v556 = stat.size;
    const v557 = stat.mtime;
    const v558 = v557.getTime();
    const v559 = [
        v555,
        v556,
        v558
    ];
    const v560 = v559.join('-');
    const v561 = JSON.stringify(v560);
    v554['Etag'] = v561;
    const v563 = new Date();
    const v564 = v563.toUTCString();
    v562['Date'] = v564;
    const v566 = stat.mtime;
    const v567 = new Date(v566);
    const v568 = v567.toUTCString();
    v565['Last-Modified'] = v568;
    const v569 = contentParts.ranges;
    const v570 = contentParts.ranges;
    const v571 = v570.length;
    const v572 = v571 > 1;
    const v573 = v569 && v572;
    if (v573) {
        const v574 = res.headers;
        v574['Content-Type'] = 'multipart/byteranges; boundary=' + MULTIPART_SEPARATOR;
    } else {
        const v575 = res.headers;
        v575['Content-Type'] = contentType;
        const v576 = contentParts.ranges;
        if (v576) {
            const v577 = res.headers;
            const v578 = req.headers;
            const v579 = v578.range;
            v577['Content-Range'] = v579;
        }
    }
    const v580 = req.method;
    const v581 = v580 === 'HEAD';
    if (v581) {
        res.status = HTTP_STATUS_OK;
        const v582 = res.headers;
        const v583 = res.writeHead(HTTP_STATUS_OK, v582);
        v583;
        const v584 = res.end();
        v584;
        const v585 = server.emit('response', req, res, null, file, stat);
        v585;
    } else {
        const v586 = validateClientCache(server, req, res, stat, file);
        const v587 = !v586;
        if (v587) {
            const v639 = function sendNext() {
                var range;
                const v588 = contentParts.ranges;
                if (v588) {
                    const v589 = contentParts.ranges;
                    const v590 = rangeIndex++;
                    range = v589[v590];
                    const v591 = range.start;
                    streamOptions.start = v591;
                    const v592 = range.end;
                    streamOptions.end = v592;
                }
                const v593 = fs.createReadStream(file, streamOptions);
                const v602 = function () {
                    const v594 = !range;
                    const v595 = contentParts.ranges;
                    const v596 = v595.length;
                    const v597 = rangeIndex >= v596;
                    const v598 = v594 || v597;
                    if (v598) {
                        const v599 = res.end();
                        v599;
                        const v600 = server.emit('response', req, res, null, file, stat);
                        v600;
                    } else {
                        const v601 = setImmediate(sendNext);
                        v601;
                    }
                };
                const v603 = v593.on('close', v602);
                const v629 = function (fd) {
                    const v604 = !headersSent;
                    if (v604) {
                        const v605 = res.status;
                        const v606 = !v605;
                        if (v606) {
                            if (range) {
                                res.status = HTTP_STATUS_PARTIAL_CONTENT;
                            } else {
                                res.status = HTTP_STATUS_OK;
                            }
                        }
                        const v607 = res.status;
                        const v608 = res.headers;
                        const v609 = res.writeHead(v607, v608);
                        v609;
                        headersSent = true;
                    }
                    const v610 = contentParts.ranges;
                    const v611 = v610.length;
                    const v612 = v611 > 1;
                    const v613 = range && v612;
                    if (v613) {
                        const v614 = MULTIPART_SEPARATOR + NEWLINE;
                        const v615 = v614 + 'Content-Type: ';
                        const v616 = v615 + contentType;
                        const v617 = v616 + NEWLINE;
                        const v618 = v617 + 'Content-Range: ';
                        const v619 = range.start;
                        const v620 = v619 || '';
                        const v621 = v618 + v620;
                        const v622 = v621 + '-';
                        const v623 = range.end;
                        const v624 = v623 || '';
                        const v625 = v622 + v624;
                        const v626 = v625 + NEWLINE;
                        const v627 = v626 + NEWLINE;
                        const v628 = res.write(v627);
                        v628;
                    }
                };
                const v630 = v603.on('open', v629);
                const v632 = function (err) {
                    const v631 = sendError(server, req, res, err);
                    v631;
                };
                const v633 = v630.on('error', v632);
                const v637 = function (chunk) {
                    const v634 = contentType === 'text/html';
                    if (v634) {
                        const v635 = server.port;
                        chunk = emberScript(chunk, v635);
                    }
                    const v636 = res.write(chunk);
                    v636;
                };
                const v638 = v633.on('data', v637);
                v638;
            };
            const v640 = v639();
            v640;
        }
    }
};