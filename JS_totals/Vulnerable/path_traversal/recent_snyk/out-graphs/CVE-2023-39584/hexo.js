import {
    exists,
    readFile
} from 'hexo-fs';
import {
    basename,
    extname,
    join,
    posix
} from 'path';
const rCaptionTitleFile = /(.*)?(?:\s+|^)(\/*\S+)/;
const rLang = /\s*lang:(\w+)/i;
const rFrom = /\s*from:(\d+)/i;
const rTo = /\s*to:(\d+)/i;
const v80 = ctx => {
    const v79 = function includeCodeTag(args) {
        const v41 = ctx.config;
        let codeDir = v41.code_dir;
        let arg = args.join(' ');
        const v42 = codeDir.endsWith('/');
        const v43 = !v42;
        if (v43) {
            codeDir += '/';
        }
        let lang = '';
        const v44 = (match, _lang) => {
            lang = _lang;
            return '';
        };
        arg = arg.replace(rLang, v44);
        let from = 0;
        const v45 = (match, _from) => {
            from = _from - 1;
            return '';
        };
        arg = arg.replace(rFrom, v45);
        let to = Number.MAX_VALUE;
        const v46 = (match, _to) => {
            to = _to;
            return '';
        };
        arg = arg.replace(rTo, v46);
        const match = arg.match(rCaptionTitleFile);
        const v47 = !match;
        if (v47) {
            return;
        }
        const path = match[2];
        const v48 = extname(path);
        const v49 = v48.substring(1);
        lang = lang || v49;
        const v50 = ctx.source_dir;
        const src = join(v50, codeDir, path);
        const v51 = match[1];
        const v52 = basename(path);
        const title = v51 || v52;
        const v53 = ctx.config;
        const v54 = v53.root;
        const v55 = posix.join(v54, codeDir, path);
        const caption = `<span>${ title }</span><a href="${ v55 }">view raw</a>`;
        const v56 = exists(src);
        const v58 = exist => {
            if (exist) {
                const v57 = readFile(src);
                return v57;
            }
        };
        const v59 = v56.then(v58);
        const v77 = code => {
            const v60 = !code;
            if (v60) {
                return;
            }
            const lines = code.split('\n');
            const v61 = lines.slice(from, to);
            const v62 = v61.join('\n');
            code = v62.trim();
            const v63 = ctx.extend;
            const v64 = v63.highlight;
            const v65 = ctx.config;
            const v66 = v65.syntax_highlighter;
            const v67 = v64.query(v66);
            if (v67) {
                const v68 = lines.length;
                const options = {};
                options.lang = lang;
                options.caption = caption;
                options.lines_length = v68;
                const v69 = ctx.extend;
                const v70 = v69.highlight;
                const v71 = ctx.config;
                const v72 = v71.syntax_highlighter;
                const v73 = [
                    code,
                    options
                ];
                const v74 = {
                    context: ctx,
                    args: v73
                };
                const v75 = v70.exec(v72, v74);
                return v75;
            }
            const v76 = `<pre><code>${ code }</code></pre>`;
            return v76;
        };
        const v78 = v59.then(v77);
        return v78;
    };
    return v79;
};
export default v80;