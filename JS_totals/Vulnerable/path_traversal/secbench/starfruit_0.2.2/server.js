// Generated by CoffeeScript 1.7.1
var Server, Writable, datetime, env, fs, http, path, style, url, util;

fs = require('fs');

url = require('url');

path = require('path');

http = require('http');

util = require('util');

Writable = require('stream').Writable;

env = process.env.NODE_ENV || 'development';

style = {
  head: function(str) {
    return '\x1b[1m' + str + '\x1b[0m';
  },
  tag: function(str) {
    return '\x1b[32m' + str + '\x1b[0m';
  },
  int: function(str) {
    return '\x1b[34m' + str + '\x1b[0m';
  },
  tip: function(str) {
    return '\x1b[36m' + str + '\x1b[0m';
  }
};

datetime = function() {
  var date, day, month, year;
  date = new Date();
  year = date.getFullYear();
  month = date.getMonth() + 1;
  if (month < 10) {
    month = '0' + month;
  }
  day = date.getDate();
  if (day < 10) {
    day = '0' + day;
  }
  return [util.format('%s-%s-%s', year, month, day), date.toLocaleTimeString()];
};

module.exports = Server = (function() {
  function Server() {}

  Server.error = function(callback) {
    if (typeof callback !== 'function') {
      throw new TypeError(typeof callback + ' is not a function');
    }
    return this._error = callback;
  };

  Server.contentType = function(extname, type) {
    if (this._types == null) {
      this._types = {
        ".html": "text/html",
        ".htm": "text/html",
        ".js": "text/javascript",
        ".css": "text/css",
        ".jpeg": "image/jpeg",
        ".jpg": "image/jpeg",
        ".png": "image/png",
        ".gif": "image/gif"
      };
    }
    if (typeof type === 'string') {
      return this._types[extname] = type;
    }
    if (typeof this._types[extname] === 'string') {
      return this._types[extname];
    }
    return 'text/plain';
  };

  Server.listen = function() {
    var server;
    server = http.createServer(this);
    return server.listen.apply(server, arguments);
  };

  Server.log = function(arg1, arg2) {
    var date, msg, time, _ref, _ref1;
    if (this._log || env !== 'production') {
      if (this._format == null) {
        this._format = function(req, res) {
          return util.format('%s %s, %s %s, %s ' + style.tip('(%sms)'), style.head(req.method), req.url, style.tag('Content-Type'), res.getHeader('Content-Type'), style.int(res.statusCode), res.elapsedTime);
        };
      }
      if (arg1 instanceof Writable) {
        return this._log = arg1;
      }
      if (typeof arg1 === 'function') {
        arg2 = arg1;
      }
      if (typeof arg2 === 'function') {
        return this._format = arg2;
      }
      if (typeof arg1 === 'string') {
        msg = util.format.apply(util, arguments) + '\n';
      }
      if (arg1 instanceof http.IncomingMessage && arg2 instanceof http.ServerResponse) {
        msg = this._format(arg1, arg2);
      }
      if (typeof msg !== 'string') {
        return;
      }
      _ref = datetime(), date = _ref[0], time = _ref[1];
      msg = util.format('%s - %s', time, msg);
      if (env !== 'production') {
        console.log(msg);
      }
      return (_ref1 = this._log) != null ? _ref1.write(util.format('%s %s\n', date, msg.replace(/\x1b\[[0-9;]*m/g, ''))) : void 0;
    }
  };

  Server["do"] = function(req, res) {
    var controller, dynamic, dynamicfile, elapsedTime, extname, file, pathname, rs, staticfile, status;
    elapsedTime = new Date().getTime();
    res.on('finish', (function(_this) {
      return function() {
        res.elapsedTime = new Date().getTime() - elapsedTime;
        res.getHeader = function(name) {
          var reg;
          reg = new RegExp("^" + name + ":(.+)$", 'm');
          return reg.exec(res._header)[1].toString().trim();
        };
        return _this.log(req, res);
      };
    })(this));
    status = (function(_this) {
      return function(code, text) {
        var codefile, file, rs;
        res.writeHead(code, {
          "Content-Type": "text/html;charset=utf-8"
        });
        codefile = path.join(process.cwd(), _this["static"], "_" + code + ".html");
        if (fs.existsSync(codefile)) {
          file = codefile;
          rs = fs.createReadStream(codefile);
          return rs.pipe(res);
        } else {
          return res.end(util.format('<title>%s %s</title><center><p><br><br></p><h1>%s %s</h1><p><i>starfruit.js<i></p></center>', code, text, code, text));
        }
      };
    })(this);
    res.setTimeout(this.timeout * 1000, function() {
      status(503, 'Service Unavailable');
      return typeof this._error === "function" ? this._error(new Error('Service unavailable')) : void 0;
    });
    pathname = url.parse(req.url).pathname.toLowerCase();
    file = false;
    staticfile = path.join(process.cwd(), this["static"], pathname);
    extname = path.extname(staticfile);
    if (extname.length < 1) {
      staticfile = path.join(staticfile, this["default"] + '.html');
    }
    if (fs.existsSync(staticfile)) {
      file = staticfile;
      res.writeHead(200, {
        "Content-Type": this.contentType(extname)
      });
      rs = fs.createReadStream(staticfile);
      rs.pipe(res);
    }
    if (file === false) {
      dynamic = path.join(process.cwd(), this.dynamic, pathname);
      dynamicfile = dynamic;
      extname = path.extname(dynamicfile);
      if (extname.length < 1) {
        dynamicfile = dynamicfile + '.js';
      }
      if (!fs.existsSync(dynamicfile)) {
        dynamicfile = path.join(dynamic, this["default"] + '.js');
      }
      if (fs.existsSync(dynamicfile)) {
        file = dynamicfile;
        controller = require(dynamicfile);
        if (typeof controller === 'function') {
          controller = new controller();
        }
        controller.error(function(err) {
          status(500, 'Internal Server Error');
          return typeof this._error === "function" ? this._error(err) : void 0;
        });
        if (typeof controller.init === "function") {
          controller.init();
        }
        controller["do"](req, res);
      }
    }
    if (file === false) {
      status(404, 'Not Found');
      return typeof this._error === "function" ? this._error(new Error(util.format('Can not found files in %s folder or %s folder.', this["static"], this.dynamic))) : void 0;
    }
  };

  return Server;

})();
