import {
    basename,
    extname,
    join
} from 'path';
import { url_for } from 'hexo-util';
const rCaptionTitleFile = /(.*)?(?:\s+|^)(\/*\S+)/;
const rLang = /\s*lang:(\w+)/i;
const rFrom = /\s*from:(\d+)/i;
const rTo = /\s*to:(\d+)/i;
const v68 = ctx => {
    const v67 = function includeCodeTag(args) {
        const v35 = ctx.config;
        let codeDir = v35.code_dir;
        let arg = args.join(' ');
        const v36 = codeDir.endsWith('/');
        const v37 = !v36;
        if (v37) {
            codeDir += '/';
        }
        let lang = '';
        const v38 = (match, _lang) => {
            lang = _lang;
            return '';
        };
        arg = arg.replace(rLang, v38);
        let from = 0;
        const v39 = (match, _from) => {
            from = _from - 1;
            return '';
        };
        arg = arg.replace(rFrom, v39);
        let to = Number.MAX_VALUE;
        const v40 = (match, _to) => {
            to = _to;
            return '';
        };
        arg = arg.replace(rTo, v40);
        const match = arg.match(rCaptionTitleFile);
        const v41 = !match;
        if (v41) {
            return;
        }
        const path = match[2];
        const v42 = extname(path);
        const v43 = v42.substring(1);
        lang = lang || v43;
        const v44 = join(codeDir, path);
        const source = v44.replace(/\\/g, '/');
        const Page = ctx.model('Page');
        const v45 = { source };
        const doc = Page.findOne(v45);
        const v46 = !doc;
        if (v46) {
            return;
        }
        let code = doc.content;
        const lines = code.split('\n');
        const v47 = lines.slice(from, to);
        const v48 = v47.join('\n');
        code = v48.trim();
        const v49 = match[1];
        const v50 = basename(path);
        const title = v49 || v50;
        const v51 = doc.path;
        const v52 = url_for.call(ctx, v51);
        const caption = `<span>${ title }</span><a href="${ v52 }">view raw</a>`;
        const v53 = ctx.extend;
        const v54 = v53.highlight;
        const v55 = ctx.config;
        const v56 = v55.syntax_highlighter;
        const v57 = v54.query(v56);
        if (v57) {
            const v58 = lines.length;
            const options = {};
            options.lang = lang;
            options.caption = caption;
            options.lines_length = v58;
            const v59 = ctx.extend;
            const v60 = v59.highlight;
            const v61 = ctx.config;
            const v62 = v61.syntax_highlighter;
            const v63 = [
                code,
                options
            ];
            const v64 = {
                context: ctx,
                args: v63
            };
            const v65 = v60.exec(v62, v64);
            return v65;
        }
        const v66 = `<pre><code>${ code }</code></pre>`;
        return v66;
    };
    return v67;
};
export default v68;