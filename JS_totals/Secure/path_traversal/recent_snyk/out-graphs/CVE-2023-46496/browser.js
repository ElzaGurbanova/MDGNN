const v52 = require('path');
const join = v52.join;
const v53 = require('fs');
const existsSync = v53.existsSync;
const readdirSync = v53.readdirSync;
const v54 = require('@evershop/evershop/src/lib/helpers');
const CONSTANTS = v54.CONSTANTS;
const v55 = require('@evershop/evershop/src/lib/router/buildUrl');
const buildUrl = v55.buildUrl;
const v56 = require('@evershop/evershop/src/lib/util/httpStatus');
const INVALID_PAYLOAD = v56.INVALID_PAYLOAD;
const OK = v56.OK;
const v102 = (request, response, delegate, next) => {
    const v57 = request.params;
    const v58 = v57[0];
    const path = v58 || '';
    const v59 = /^(?!\/|.*\/{2,})[a-zA-Z0-9_\-/]+$/.test(path);
    const v60 = v59 === false;
    const v61 = path && v60;
    if (v61) {
        const v62 = response.status(INVALID_PAYLOAD);
        const v63 = {};
        v63.status = INVALID_PAYLOAD;
        v63.message = 'Invalid path';
        const v64 = { error: v63 };
        const v65 = v62.json(v64);
        v65;
        return;
    }
    const v66 = CONSTANTS.MEDIAPATH;
    const v67 = join(v66, path);
    const v68 = existsSync(v67);
    const v69 = !v68;
    if (v69) {
        const v70 = response.status(INVALID_PAYLOAD);
        const v71 = {};
        v71.status = INVALID_PAYLOAD;
        v71.message = 'Requested path does not exist';
        const v72 = { error: v71 };
        const v73 = v70.json(v72);
        v73;
    } else {
        const v74 = response.status(OK);
        v74;
        const v75 = CONSTANTS.MEDIAPATH;
        const v76 = join(v75, path);
        const v77 = { withFileTypes: true };
        const v78 = readdirSync(v76, v77);
        const v80 = dirent => {
            const v79 = dirent.isDirectory();
            return v79;
        };
        const v81 = v78.filter(v80);
        const v83 = dirent => {
            const v82 = dirent.name;
            return v82;
        };
        const v84 = v81.map(v83);
        const v85 = CONSTANTS.MEDIAPATH;
        const v86 = join(v85, path);
        const v87 = { withFileTypes: true };
        const v88 = readdirSync(v86, v87);
        const v90 = dirent => {
            const v89 = dirent.isFile();
            return v89;
        };
        const v91 = v88.filter(v90);
        const v97 = f => {
            const v92 = f.name;
            const v93 = [`${ path }/${ v92 }`];
            const v94 = buildUrl('staticAsset', v93);
            const v95 = f.name;
            const v96 = {};
            v96.url = v94;
            v96.name = v95;
            return v96;
        };
        const v98 = v91.map(v97);
        const v99 = {};
        v99.folders = v84;
        v99.files = v98;
        const v100 = { data: v99 };
        const v101 = response.json(v100);
        v101;
    }
};
module.exports = v102;