let net = require('net');
let http = require('http');
let fs = require('fs');
let path = require('path');
let os = require('os');
let args = process.argv;
const v86 = process.env;
const v87 = v86.PORT;
const v88 = +v87;
let port = v88;
let root = './';
let i = 2;
const v89 = args.length;
let v90 = i < v89;
while (v90) {
    let arg = args[i];
    const v92 = +arg;
    port = v92 || port;
    const v93 = fs.existsSync(arg);
    if (v93) {
        root = arg;
    }
    const v91 = i++;
    v90 = i < v89;
}
let contentTypes = {};
contentTypes['.html'] = 'text/html';
contentTypes['.php'] = 'text/plain';
contentTypes['.woff'] = 'font/woff';
contentTypes['.woff2'] = 'font/woff2';
contentTypes['.ttf'] = 'font/ttf';
contentTypes['.txt'] = 'text/plain';
contentTypes['.md'] = 'text/plain';
contentTypes['.js'] = 'text/javascript';
contentTypes['.mjs'] = 'text/javascript';
contentTypes['.ts'] = 'text/plain';
contentTypes['.css'] = 'text/css';
contentTypes['.csv'] = 'text/csv';
contentTypes['.json'] = 'application/json';
contentTypes['.xml'] = 'application/xml';
contentTypes['.wav'] = 'audio/wav';
contentTypes['.weba'] = 'audio/webm';
contentTypes['.webm'] = 'video/webm';
contentTypes['.webp'] = 'image/webp';
contentTypes['.mp3'] = 'audio/mpeg';
contentTypes['.aac'] = 'audio/aac';
contentTypes['.avi'] = 'video/x-msvideo';
contentTypes['.mp4'] = 'video/mp4';
contentTypes['.mpeg'] = 'video/mpeg';
contentTypes['.oga'] = 'audio/ogg';
contentTypes['.ogv'] = 'video/ogg';
contentTypes['.opus'] = 'audio/opus';
contentTypes['.png'] = 'image/png';
contentTypes['.jpeg'] = 'image/jpeg';
contentTypes['.jpg'] = 'image/jpeg';
contentTypes['.epub'] = 'application/epub+zip';
const checkPort = function (port) {
    const v104 = resolve => {
        const v95 = socket => {
            const v94 = socket.end();
            v94;
        };
        let server = net.createServer(v95);
        const v98 = () => {
            const v96 = server.close();
            v96;
            const v97 = resolve('used');
            v97;
        };
        const v99 = server.on('error', v98);
        v99;
        const v102 = () => {
            const v100 = server.close();
            v100;
            const v101 = resolve('not used');
            v101;
        };
        const v103 = server.listen(port, v102);
        v103;
    };
    const v105 = new Promise(v104);
    return v105;
};
const getPort = async function () {
    if (port) {
        return port;
    }
    (port = 8080)
    let v106 = port < 65535;
    while (v106) {
        let res = await checkPort(port);
        const v107 = res === 'not used';
        if (v107) {
            return port;
        }
        v106 = port < 65535;
    }
    return 0;
};
const end = function (res, status, content) {
    const v108 = res.writeHead(status);
    v108;
    const v109 = res.write(content);
    v109;
    const v110 = res.end();
    v110;
};
let templatePart1 = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>
`.trim();
let templatePart2 = `
  </title>
</head>
<body>
`.trim();
let templatePart3 = `
</body>
</html>
`.trim();
const main = async function () {
    let port = await getPort();
    const v154 = (req, res) => {
        try {
            const v111 = new Date();
            let now = v111.toLocaleString();
            const v112 = `[${ now }]`;
            const v113 = req.method;
            const v114 = req.url;
            const v115 = console.log(v112, v113, v114);
            v115;
            const v116 = req.method;
            switch (v116) {
            case 'GET': {
                    const v117 = req.url;
                    const v118 = decodeURIComponent(v117);
                    let filename = v118.replace(/^\//, './');
                    let file = path.join(root, filename);
                    const v119 = path.relative(root, file);
                    const v120 = v119.startsWith('..');
                    if (v120) {
                        const v121 = `Escape above root: ${ filename }`;
                        const v122 = end(res, 404, v121);
                        v122;
                        break;
                    }
                    const v123 = fs.existsSync(file);
                    const v124 = !v123;
                    if (v124) {
                        const v125 = `File not found: ${ file }`;
                        const v126 = end(res, 404, v125);
                        v126;
                        break;
                    }
                    let stat = fs.statSync(file);
                    const v127 = stat.isDirectory();
                    if (v127) {
                        let dir = file;
                        let files = fs.readdirSync(dir);
                        const v128 = res.setHeader('Content-Type', 'text/html');
                        v128;
                        const v129 = res.write(templatePart1);
                        v129;
                        const v130 = path.basename(filename);
                        const v131 = res.write(v130);
                        v131;
                        const v132 = res.write(templatePart2);
                        v132;
                        let file;
                        for (file of files) {
                            const v133 = req.url;
                            let href = `${ v133 }/${ file }`.replace(/^\/\//, '/');
                            const v134 = path.join(dir, file);
                            let stat = fs.statSync(v134);
                            let type;
                            const v135 = stat.isDirectory();
                            if (v135) {
                                type = 'D';
                            } else {
                                type = 'F';
                            }
                            const v136 = `[${ type }] <a href="${ href }">${ file }</a><br>`;
                            const v137 = res.write(v136);
                            v137;
                        }
                        const v138 = files.length;
                        const v139 = v138 === 0;
                        if (v139) {
                            const v140 = `[empty directory]`;
                            const v141 = res.write(v140);
                            v141;
                        }
                        const v142 = res.write(templatePart3);
                        v142;
                        const v143 = res.end();
                        v143;
                        break;
                    }
                    let ext = path.extname(filename);
                    let contentType = contentTypes[ext];
                    if (contentType) {
                        const v144 = res.setHeader('Content-Type', contentType);
                        v144;
                    }
                    const v145 = fs.createReadStream(file);
                    const v146 = v145.pipe(res);
                    v146;
                    break;
                }
            default: {
                    const v147 = res.writeHead(405);
                    v147;
                    const v148 = req.method;
                    const v149 = `unknown method: ${ v148 }`;
                    const v150 = res.write(v149);
                    v150;
                    const v151 = res.end();
                    v151;
                }
            }
        } catch (error) {
            const v152 = String(error);
            const v153 = end(res, 500, v152);
            v153;
        }
    };
    let server = http.createServer(v154);
    const v168 = () => {
        const v155 = server.address();
        const v156 = v155.port;
        port = port || v156;
        const v157 = `listening on http://localhost:${ port }`;
        const v158 = console.log(v157);
        v158;
        const v159 = os.networkInterfaces();
        const v160 = Object.entries(v159);
        const v166 = ([name, addresses]) => {
            const v164 = address => {
                let host = address.address;
                const v161 = host.includes(':');
                if (v161) {
                    host = `[${ host }]`;
                }
                const v162 = `listening on http://${ host }:${ port } (${ name })`;
                const v163 = console.log(v162);
                v163;
            };
            const v165 = addresses.forEach(v164);
            v165;
        };
        const v167 = v160.forEach(v166);
        v167;
    };
    const v169 = server.listen(port, v168);
    v169;
};
const v170 = main();
v170;