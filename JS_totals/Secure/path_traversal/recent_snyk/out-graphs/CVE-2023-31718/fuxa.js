var express = require('express');
const authJwt = require('../jwt-helper');
const fs = require('fs');
const path = require('path');
var runtime;
var secureFnc;
var checkGroupsFnc;
const v138 = function (_runtime, _secureFnc, _checkGroupsFnc) {
    runtime = _runtime;
    secureFnc = _secureFnc;
    checkGroupsFnc = _checkGroupsFnc;
};
const v273 = function () {
    var commandApp = express();
    const v144 = function (req, res, next) {
        const v139 = runtime.project;
        const v140 = !v139;
        if (v140) {
            const v141 = res.status(404);
            const v142 = v141.end();
            v142;
        } else {
            const v143 = next();
            v143;
        }
    };
    const v145 = commandApp.use(v144);
    v145;
    const v182 = function (req, res, next) {
        var groups = checkGroupsFnc(req);
        const v146 = res.statusCode;
        const v147 = v146 === 403;
        if (v147) {
            const v148 = runtime.logger;
            const v149 = v148.error('api post command: Tocken Expired');
            v149;
        } else {
            const v150 = authJwt.adminGroups;
            const v151 = v150.indexOf(groups);
            const v152 = -1;
            const v153 = v151 === v152;
            if (v153) {
                const v154 = res.status(401);
                const v155 = {
                    error: 'unauthorized_error',
                    message: 'Unauthorized!'
                };
                const v156 = v154.json(v155);
                v156;
                const v157 = runtime.logger;
                const v158 = v157.error('api post command: Unauthorized');
                v158;
            } else {
                try {
                    const v159 = req.body;
                    const v160 = v159.params;
                    const v161 = v160.cmd;
                    const v162 = CommanTypeEnum.reportBuild;
                    const v163 = v161 === v162;
                    if (v163) {
                        const v164 = runtime.jobsMgr;
                        const v165 = req.body;
                        const v166 = v165.params;
                        const v167 = v166.report;
                        const v168 = v164.forceReport(v167);
                        if (v168) {
                            const v169 = res.end();
                            v169;
                        } else {
                            const v170 = res.status(400);
                            const v171 = {
                                error: 'not_found',
                                message: 'report not found!'
                            };
                            const v172 = v170.json(v171);
                            v172;
                            const v173 = runtime.logger;
                            const v174 = 'api post buildreport: ' + 'report not found!';
                            const v175 = v173.error(v174);
                            v175;
                        }
                    }
                } catch (error) {
                    const v176 = res.status(400);
                    const v177 = {
                        error: 'error',
                        message: error
                    };
                    const v178 = v176.json(v177);
                    v178;
                    const v179 = runtime.logger;
                    const v180 = 'api post buildreport: ' + error;
                    const v181 = v179.error(v180);
                    v181;
                }
            }
        }
    };
    const v183 = commandApp.post('/api/command', secureFnc, v182);
    v183;
    const v232 = function (req, res) {
        var groups = checkGroupsFnc(req);
        const v184 = res.statusCode;
        const v185 = v184 === 403;
        if (v185) {
            const v186 = runtime.logger;
            const v187 = v186.error('api post command: Tocken Expired');
            v187;
        } else {
            const v188 = authJwt.adminGroups;
            const v189 = v188.indexOf(groups);
            const v190 = -1;
            const v191 = v189 === v190;
            if (v191) {
                const v192 = res.status(401);
                const v193 = {
                    error: 'unauthorized_error',
                    message: 'Unauthorized!'
                };
                const v194 = v192.json(v193);
                v194;
                const v195 = runtime.logger;
                const v196 = v195.error('api post command: Unauthorized');
                v196;
            } else {
                const v197 = req.query;
                const v198 = v197.cmd;
                const v199 = CommanTypeEnum.reportDownload;
                const v200 = v198 === v199;
                if (v200) {
                    try {
                        const v201 = req.query;
                        const v202 = v201.name;
                        const v203 = new RegExp('../', 'g');
                        const fileName = v202.replace(v203, '');
                        const v204 = runtime.settings;
                        const v205 = v204.reportsDir;
                        var reportPath = path.join(v205, fileName);
                        const v206 = fs.existsSync(reportPath);
                        const v207 = !v206;
                        if (v207) {
                            const v208 = process.cwd();
                            const v209 = runtime.settings;
                            const v210 = v209.reportsDir;
                            reportPath = path.join(v208, v210, fileName);
                        }
                        const v211 = fs.existsSync(reportPath);
                        if (v211) {
                            const v215 = err => {
                                if (err) {
                                    const v212 = runtime.logger;
                                    const v213 = 'api get download: ' + err;
                                    const v214 = v212.error(v213);
                                    v214;
                                }
                            };
                            const v216 = res.sendFile(reportPath, v215);
                            v216;
                        } else {
                            const v217 = res.status(400);
                            const v218 = {
                                error: 'not_found',
                                message: 'report not found!'
                            };
                            const v219 = v217.json(v218);
                            v219;
                            const v220 = runtime.logger;
                            const v221 = 'api get download: ' + 'report not found!';
                            const v222 = v220.error(v221);
                            v222;
                        }
                    } catch (error) {
                        const v223 = res.status(400);
                        const v224 = {
                            error: 'error',
                            message: error
                        };
                        const v225 = v223.json(v224);
                        v225;
                        const v226 = runtime.logger;
                        const v227 = 'api get download: ' + error;
                        const v228 = v226.error(v227);
                        v228;
                    }
                } else {
                    const v229 = res.status(400);
                    const v230 = {
                        error: 'not_found',
                        message: 'command not found!'
                    };
                    const v231 = v229.json(v230);
                    v231;
                }
            }
        }
    };
    const v233 = commandApp.get('/api/download', v232);
    v233;
    const v271 = function (req, res, next) {
        var groups = checkGroupsFnc(req);
        const v234 = res.statusCode;
        const v235 = v234 === 403;
        if (v235) {
            const v236 = runtime.logger;
            const v237 = v236.error('api post setTagValue: Tocken Expired');
            v237;
        } else {
            const v238 = authJwt.adminGroups;
            const v239 = v238.indexOf(groups);
            const v240 = -1;
            const v241 = v239 === v240;
            if (v241) {
                const v242 = res.status(401);
                const v243 = {
                    error: 'unauthorized_error',
                    message: 'Unauthorized!'
                };
                const v244 = v242.json(v243);
                v244;
                const v245 = runtime.logger;
                const v246 = v245.error('api post command: Unauthorized');
                v246;
            } else {
                try {
                    const v247 = req.body;
                    const v248 = v247.id;
                    const v249 = req.body;
                    const v250 = v249.value;
                    const v251 = v248 && v250;
                    if (v251) {
                        const v252 = runtime.devices;
                        const v253 = req.body;
                        const v254 = v253.id;
                        const v255 = req.body;
                        const v256 = v255.value;
                        const v257 = v252.setTagValue(v254, v256);
                        if (v257) {
                            const v258 = res.end();
                            v258;
                        } else {
                            const v259 = res.status(400);
                            const v260 = {
                                error: 'not_found',
                                message: 'tag id not found!'
                            };
                            const v261 = v259.json(v260);
                            v261;
                            const v262 = runtime.logger;
                            const v263 = 'api post setTagValue: ' + 'id not found!';
                            const v264 = v262.error(v263);
                            v264;
                        }
                    }
                } catch (error) {
                    const v265 = res.status(400);
                    const v266 = {
                        error: 'error',
                        message: error
                    };
                    const v267 = v265.json(v266);
                    v267;
                    const v268 = runtime.logger;
                    const v269 = 'api post setTagValue: ' + error;
                    const v270 = v268.error(v269);
                    v270;
                }
            }
        }
    };
    const v272 = commandApp.post('/api/setTagValue', secureFnc, v271);
    v272;
    return commandApp;
};
const v274 = {};
v274.init = v138;
v274.app = v273;
module.exports = v274;
const CommanTypeEnum = {};
CommanTypeEnum.reportBuild = 'REPORT-BUILD';
CommanTypeEnum.reportDelete = 'REPORT-DELETE';
CommanTypeEnum.reportDownload = 'REPORT-DOWNLOAD';