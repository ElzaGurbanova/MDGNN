const v124 = require('events');
var EE = v124.EventEmitter;
const v125 = require('url');
var parse = v125.parse;
var http = require('http');
var path = require('path');
var fs = require('fs');
var fileExists = require('utils-fs-exists');
var htmlls = require('html-ls');
var filed = require('filed');
var xtend = require('xtend');
var replace = require('stream-replace');
var defaults = require('./lib/config');
var RESPONSE_HEADERS = {};
RESPONSE_HEADERS['content-type'] = 'text/html;charset=utf-8';
module.exports = createGlance;
const Glance = function (options) {
    const v126 = EE.call(this);
    v126;
    const v127 = {};
    const v128 = options || v127;
    options = xtend(defaults, v128);
    const v129 = options.port;
    this.port = v129;
    const v130 = options.hideindex;
    this.hideindex = v130;
    const v131 = options.indices;
    this.indices = v131;
    const v132 = options.dir;
    const v133 = path.resolve(v132);
    this.dir = v133;
    const v134 = options.nodot;
    this.nodot = v134;
    return this;
};
const v135 = EE.prototype;
const v136 = Object.create(v135);
Glance.prototype = v136;
const v137 = Glance.prototype;
const Glance$start = function () {
    var self = this;
    const v139 = function (req, res) {
        const v138 = self.serveRequest(req, res);
        v138;
    };
    const v140 = http.createServer(v139);
    self.server = v140;
    const v141 = self.server;
    const v142 = self.port;
    const v143 = v141.listen(v142, emitStarted);
    v143;
    const v144 = self.server;
    const v146 = function (con) {
        const v145 = con.setTimeout(500);
        v145;
    };
    const v147 = v144.addListener('connection', v146);
    v147;
    const v148 = self.on('error', showError);
    v148;
    const emitStarted = function () {
        const v149 = self.server;
        const v150 = self.emit('started', v149);
        v150;
    };
};
v137.start = Glance$start;
const v151 = Glance.prototype;
const Glance$stop = function () {
    const v152 = this.server;
    if (v152) {
        const v153 = this.server;
        const v154 = v153.close();
        v154;
    }
};
v151.stop = Glance$stop;
const v155 = Glance.prototype;
const Glance$serveRequest = function (req, res) {
    var request = {};
    var self = this;
    const v156 = self.dir;
    const v157 = req.url;
    const v158 = parse(v157);
    const v159 = v158.pathname;
    const v160 = decodeURIComponent(v159);
    const v161 = path.join(v156, v160);
    request.fullPath = v161;
    const v162 = req.socket;
    const v163 = v162.remoteAddress;
    request.ip = v163;
    const v164 = req.method;
    const v165 = v164.toLowerCase();
    request.method = v165;
    request.response = res;
    const v166 = self.dir;
    const v167 = request.fullPath;
    const v168 = path.relative(v166, v167);
    const v169 = v168.startsWith('..');
    if (v169) {
        const v170 = self.emit('error', 403, request, res);
        return v170;
    }
    const v171 = request.method;
    const v172 = v171 !== 'get';
    if (v172) {
        const v173 = self.emit('error', 405, request, res);
        return v173;
    }
    const v174 = self.nodot;
    const v175 = request.fullPath;
    const v176 = path.sep;
    const v177 = v175.split(v176);
    const v179 = function (dir) {
        const v178 = dir.startsWith('.');
        return v178;
    };
    const v180 = v177.some(v179);
    const v181 = v174 && v180;
    if (v181) {
        const v182 = self.emit('error', 404, request, res);
        return v182;
    }
    const v183 = request.fullPath;
    const v184 = fs.stat(v183, statFile);
    v184;
    const statFile = function (err, stat) {
        if (err) {
            const v185 = self.emit('error', 404, request, res);
            return v185;
        }
        const v186 = stat.isDirectory();
        const v187 = !v186;
        if (v187) {
            const v188 = self.emit('read', request);
            v188;
            const v189 = request.fullPath;
            const v190 = filed(v189);
            const v191 = v190.pipe(res);
            return v191;
        }
        const v192 = self.hideindex;
        if (v192) {
            const v193 = self.emit('error', 403, request, res);
            return v193;
        }
        const v194 = self.indices;
        const v195 = !v194;
        const v196 = self.indices;
        const v197 = v196.length;
        const v198 = !v197;
        const v199 = v195 || v198;
        if (v199) {
            const v200 = listFiles();
            return v200;
        }
        const v201 = self.indices;
        var indices = v201.slice();
        const v202 = indices.shift();
        const v203 = findIndex(v202);
        v203;
        const findIndex = function (indexTest) {
            const v204 = request.fullPath;
            const v205 = path.join(v204, indexTest);
            const v206 = fileExists(v205, check);
            v206;
            const check = function (hasIndex) {
                if (hasIndex) {
                    const v207 = req.url;
                    const v208 = v207 + '/';
                    req.url = v208 + indexTest;
                    const v209 = self.serveRequest(req, res);
                    return v209;
                }
                const v210 = indices.length;
                const v211 = !v210;
                if (v211) {
                    const v212 = listFiles();
                    return v212;
                }
                const v213 = indices.shift();
                const v214 = findIndex(v213);
                v214;
            };
        };
        const listFiles = function () {
            const v215 = request.fullPath;
            var listPath = v215.replace(/\/$/, '');
            const v216 = res.writeHead(200, RESPONSE_HEADERS);
            v216;
            var listingHtml = '<h3>Directory Listing</h3>';
            const v217 = self.nodot;
            const v219 = function (str) {
                const v218 = encodeURI(str);
                return v218;
            };
            const v222 = function (str) {
                const v220 = str.replace(/\</g, '&lt;');
                const v221 = v220.replace(/\>/g, '&gt;');
                return v221;
            };
            const v223 = {
                hideDot: v217,
                transformHref: v219,
                transformLinkText: v222
            };
            var listing = htmlls(listPath, v223);
            const v224 = function (buf) {
                listingHtml += buf.toString();
            };
            const v225 = listing.on('data', v224);
            v225;
            const v227 = function () {
                const v226 = renderPage('Directory Listing', listingHtml, res);
                v226;
            };
            const v228 = listing.on('end', v227);
            v228;
            const v229 = self.emit('read', request);
            return v229;
        };
    };
};
v155.serveRequest = Glance$serveRequest;
const showError = function (errorCode, req, res) {
    const v230 = res.writeHead(errorCode, RESPONSE_HEADERS);
    v230;
    var errorHtml = '';
    const v231 = errorCode + '.html';
    const v232 = path.join(__dirname, 'errors', v231);
    var errorPage = fs.createReadStream(v232);
    const v233 = function (buf) {
        errorHtml += buf.toString();
    };
    const v234 = errorPage.on('data', v233);
    v234;
    const v236 = function () {
        var title = errorTitle(errorCode);
        const v235 = renderPage(title, errorHtml, res);
        v235;
    };
    const v237 = errorPage.on('end', v236);
    v237;
};
const renderPage = function (title, body, res) {
    const v238 = path.join(__dirname, 'errors/shared/layout.html');
    var layout = fs.createReadStream(v238);
    const v239 = replace(/{{\s*title\s*}}/g, title);
    const v240 = layout.pipe(v239);
    const v241 = replace(/{{\s*body\s*}}/g, body);
    const v242 = v240.pipe(v241);
    const v243 = v242.pipe(res);
    v243;
};
const errorTitle = function (errorCode) {
    var mappings = {};
    mappings[404] = 'File Not Found';
    mappings[403] = 'Forbidden';
    mappings[405] = 'Method Not Allowed';
    mappings[500] = 'Internal Server Error';
    const v244 = errorCode.toString();
    const v245 = mappings[v244];
    return v245;
};
const createGlance = function (options) {
    const v246 = new Glance(options);
    return v246;
};