'use strict';
const v104 = require('chalk');
const blue = v104.blue;
const bold = v104.bold;
const green = v104.green;
const red = v104.red;
const path = require('path');
const semver = require('semver');
const v105 = require('child_process');
const exec = v105.exec;
const v106 = require('util');
const promisify = v106.promisify;
const validatePackageName = require('validate-npm-package-name');
const execAsync = promisify(exec);
const isValidNpmPackageName = function (name) {
    const v107 = validatePackageName(name);
    const errors = v107.errors;
    if (errors) {
        const v108 = new Error(`NPM package name: "${ name }" is invalid. ${ errors }`);
        throw v108;
    }
};
const getLatestVersions = async function (name) {
    const v109 = isValidNpmPackageName(name);
    v109;
    const v111 = `npm view ${ name } versions --json`;
    const v110 = await execAsync(v111);
    const stdout = v110.stdout;
    try {
        const v112 = JSON.parse(stdout);
        return v112;
    } catch (err) {
        const v113 = err.toString();
        const v114 = new Error(`Failed to parse output from NPM view - ${ v113 }`);
        throw v114;
    }
};
const getLatestTag = async function (name) {
    const v115 = isValidNpmPackageName(name);
    v115;
    try {
        const v117 = `npm view ${ name } dist-tags --json`;
        const v116 = await execAsync(v117);
        const stdout = v116.stdout;
        const v118 = JSON.parse(stdout);
        const latest = v118.latest;
        return latest;
    } catch (err) {
        const v119 = err.toString();
        const v120 = new Error(`Failed to parse output from NPM view - ${ v119 }`);
        throw v120;
    }
};
const getLatestVersion = async function (name, wanted) {
    const versions = await getLatestVersions(name);
    const latest = await getLatestTag(name);
    const v122 = i => {
        const v121 = semver.satisfies(i, wanted);
        return v121;
    };
    const applicableVersions = versions.filter(v122);
    const v124 = (a, b) => {
        const v123 = semver.rcompare(a, b);
        return v123;
    };
    const v125 = applicableVersions.sort(v124);
    v125;
    const v126 = applicableVersions[0];
    const v127 = semver.lt(latest, v126);
    const v128 = latest && v127;
    if (v128) {
        return latest;
    }
    const v129 = applicableVersions[0];
    return v129;
};
const getInstalledVersion = function (currentDir, name) {
    try {
        const v130 = path.join(currentDir, 'node_modules', name, 'package.json');
        const v131 = require(v130);
        const v132 = v131.version;
        return v132;
    } catch (err) {
        return null;
    }
};
const pushPkgs = function ({dir, logger, deps = {}, type, pkgs}) {
    const v133 = Object.keys(deps);
    const v151 = async name => {
        let wanted = deps[name];
        const v134 = wanted.startsWith('^');
        const v135 = !v134;
        if (v135) {
            wanted = `^${ wanted }`;
        }
        const installed = getInstalledVersion(dir, name);
        const latest = await getLatestVersion(name, wanted);
        const wantedFixed = wanted.slice(1);
        const v136 = installed === null;
        const v137 = wantedFixed !== installed;
        const v138 = v136 || v137;
        const v139 = installed !== latest;
        const shouldBeInstalled = v138 || v139;
        if (shouldBeInstalled) {
            let warning;
            const v140 = installed !== null;
            const v141 = wantedFixed !== installed;
            let v142;
            if (v141) {
                v142 = wantedFixed;
            } else {
                v142 = installed;
            }
            const v143 = red(v142);
            const v144 = green(latest);
            const v145 = red('not installed');
            if (v140) {
                warning = `outdated: ${ v143 } â†’ ${ v144 }`;
            } else {
                warning = v145;
            }
            const v146 = red(name);
            const v147 = `${ v146 } is ${ warning }`;
            const v148 = logger.info(v147);
            v148;
        }
        const v149 = {
            installed,
            latest,
            name,
            shouldBeInstalled,
            type,
            wanted
        };
        const v150 = pkgs.push(v149);
        v150;
    };
    const v152 = v133.map(v151);
    return v152;
};
const getPkgIds = function (filteredPkgs) {
    const v154 = ({latest, name}) => {
        const v153 = `${ name }@${ latest }`;
        return v153;
    };
    const v155 = filteredPkgs.map(v154);
    const v156 = v155.join(' ');
    return v156;
};
const verifyDeps = async function ({autoUpgrade = false, dir, logger = console} = {}) {
    const v158 = path.join(dir, 'package.json');
    const v157 = require(v158);
    const dependencies = v157.dependencies;
    const devDependencies = v157.devDependencies;
    const v159 = blue('Verifying dependencies\u2026\n');
    const v160 = logger.info(v159);
    v160;
    const pkgs = [];
    const v161 = {
        deps: dependencies,
        dir,
        logger,
        pkgs,
        type: 'prod'
    };
    const v162 = pushPkgs(v161);
    const v163 = {
        deps: devDependencies,
        dir,
        logger,
        pkgs,
        type: 'dev'
    };
    const v164 = pushPkgs(v163);
    const v165 = [
        ...v162,
        ...v164
    ];
    await Promise.all(v165);
    const v166 = ({shouldBeInstalled}) => {
        return shouldBeInstalled;
    };
    const toInstall = pkgs.filter(v166);
    const v167 = toInstall.length;
    const v168 = v167 > 0;
    if (v168) {
        const v170 = ({type}) => {
            const v169 = type === 'prod';
            return v169;
        };
        const prodPkgs = toInstall.filter(v170);
        let upgradePackages = '';
        const v171 = prodPkgs.length;
        const v172 = v171 > 0;
        if (v172) {
            const v173 = getPkgIds(prodPkgs);
            const v174 = `npm i ${ v173 } `;
            upgradePackages = upgradePackages.concat(v174);
        }
        const v176 = ({type}) => {
            const v175 = type === 'dev';
            return v175;
        };
        const devPkgs = toInstall.filter(v176);
        const v177 = devPkgs.length;
        const v178 = v177 > 0;
        if (v178) {
            const v179 = getPkgIds(devPkgs);
            const v180 = `\nnpm i -D ${ v179 } `;
            upgradePackages = upgradePackages.concat(v180);
        }
        if (autoUpgrade) {
            const v181 = logger.info('UPGRADING\u2026');
            v181;
            const v182 = logger.info(upgradePackages);
            v182;
            const v183 = getPkgIds(prodPkgs);
            const v184 = `npm i ${ v183 }`;
            const prodResult = await execAsync(v184);
            const v185 = getPkgIds(devPkgs);
            const v186 = `npm i -D ${ v185 }`;
            const devResult = await execAsync(v186);
            const v187 = bold('Upgraded dependencies:\n');
            const v188 = prodResult.stdout;
            const v189 = `${ v187 }${ v188 }`;
            const v190 = green(v189);
            const v191 = `${ v190 }`;
            const v192 = logger.info(v191);
            v192;
            const v193 = bold('Upgraded development dependencies:\n');
            const v194 = devResult.stdout;
            const v195 = `${ v193 }${ v194 }`;
            const v196 = green(v195);
            const v197 = `${ v196 }`;
            const v198 = logger.info(v197);
            v198;
        } else {
            const v199 = bold('To resolve this, run:');
            const v200 = `\n${ v199 }`;
            const v201 = logger.info(v200);
            v201;
            const v202 = logger.info(upgradePackages);
            v202;
            const v203 = red('Please update your installed modules.');
            const v204 = new Error(v203);
            throw v204;
        }
    } else {
        const v205 = green('All NPM modules are up to date.');
        const v206 = logger.info(v205);
        v206;
    }
};
module.exports = verifyDeps;