'use strict';
const path = require('path');
const v105 = require('util');
const promisify = v105.promisify;
const graphviz = require('graphviz');
const v106 = require('child_process');
const v107 = v106.execFile;
const exec = promisify(v107);
const v108 = require('fs');
const v109 = v108.writeFile;
const writeFile = promisify(v109);
const setNodeColor = function (node, color) {
    const v110 = node.set('color', color);
    v110;
    const v111 = node.set('fontcolor', color);
    v111;
};
const checkGraphvizInstalled = async function (config) {
    let cmd;
    const v112 = config.graphVizPath;
    const v113 = config.graphVizPath;
    const v114 = path.join(v113, 'gvpr');
    if (v112) {
        cmd = v114;
    } else {
        cmd = 'gvpr';
    }
    try {
        const v115 = ['-V'];
        await exec(cmd, v115);
    } catch (err) {
        const v116 = new Error(`Graphviz could not be found. Ensure that "gvpr" is in your $PATH. ${ err }`);
        throw v116;
    }
};
const createGraphvizOptions = function (config) {
    const v117 = config.graphVizOptions;
    const v118 = {};
    const graphVizOptions = v117 || v118;
    const v119 = config.rankdir;
    const v120 = config.layout;
    const v121 = config.backgroundColor;
    const v122 = {
        overlap: false,
        pad: 0.3,
        rankdir: v119,
        layout: v120,
        bgcolor: v121
    };
    const v123 = graphVizOptions.G;
    const v124 = Object.assign(v122, v123);
    const v125 = config.edgeColor;
    const v126 = { color: v125 };
    const v127 = graphVizOptions.E;
    const v128 = Object.assign(v126, v127);
    const v129 = config.fontName;
    const v130 = config.fontSize;
    const v131 = config.nodeColor;
    const v132 = config.nodeShape;
    const v133 = config.nodeStyle;
    const v134 = config.nodeColor;
    const v135 = {
        fontname: v129,
        fontsize: v130,
        color: v131,
        shape: v132,
        style: v133,
        height: 0,
        fontcolor: v134
    };
    const v136 = graphVizOptions.N;
    const v137 = Object.assign(v135, v136);
    const v138 = {};
    v138.G = v124;
    v138.E = v128;
    v138.N = v137;
    return v138;
};
const createGraph = function (modules, circular, config, options) {
    const g = graphviz.digraph('G');
    const nodes = {};
    const v140 = (a, b) => {
        const v139 = a.concat(b);
        return v139;
    };
    const v141 = [];
    const cyclicModules = circular.reduce(v140, v141);
    const v142 = config.graphVizPath;
    if (v142) {
        const v143 = config.graphVizPath;
        const v144 = g.setGraphVizPath(v143);
        v144;
    }
    const v145 = Object.keys(modules);
    const v172 = id => {
        const v146 = nodes[id];
        const v147 = g.addNode(id);
        nodes[id] = v146 || v147;
        const v148 = modules[id];
        const v149 = v148.length;
        const v150 = !v149;
        if (v150) {
            const v151 = nodes[id];
            const v152 = config.noDependencyColor;
            const v153 = setNodeColor(v151, v152);
            v153;
        } else {
            const v154 = cyclicModules.indexOf(id);
            const v155 = v154 >= 0;
            if (v155) {
                const v156 = nodes[id];
                const v157 = config.cyclicNodeColor;
                const v158 = setNodeColor(v156, v157);
                v158;
            }
        }
        const v159 = modules[id];
        const v170 = depId => {
            const v160 = nodes[depId];
            const v161 = g.addNode(depId);
            nodes[depId] = v160 || v161;
            const v162 = modules[depId];
            const v163 = !v162;
            if (v163) {
                const v164 = nodes[depId];
                const v165 = config.noDependencyColor;
                const v166 = setNodeColor(v164, v165);
                v166;
            }
            const v167 = nodes[id];
            const v168 = nodes[depId];
            const v169 = g.addEdge(v167, v168);
            v169;
        };
        const v171 = v159.forEach(v170);
        v171;
    };
    const v173 = v145.forEach(v172);
    v173;
    const v178 = (resolve, reject) => {
        const v176 = (code, out, err) => {
            const v174 = new Error(err);
            const v175 = reject(v174);
            v175;
        };
        const v177 = g.output(options, resolve, v176);
        v177;
    };
    const v179 = new Promise(v178);
    return v179;
};
const v180 = module.exports;
const v185 = function (modules, circular, config) {
    const options = createGraphvizOptions(config);
    options.type = 'svg';
    const v181 = checkGraphvizInstalled(config);
    const v183 = () => {
        const v182 = createGraph(modules, circular, config, options);
        return v182;
    };
    const v184 = v181.then(v183);
    return v184;
};
v180.svg = v185;
const v186 = module.exports;
const v199 = function (modules, circular, imagePath, config) {
    const options = createGraphvizOptions(config);
    const v187 = path.extname(imagePath);
    const v188 = v187.replace('.', '');
    options.type = v188 || 'png';
    const v189 = checkGraphvizInstalled(config);
    const v197 = () => {
        const v190 = createGraph(modules, circular, config, options);
        const v192 = image => {
            const v191 = writeFile(imagePath, image);
            return v191;
        };
        const v193 = v190.then(v192);
        const v195 = () => {
            const v194 = path.resolve(imagePath);
            return v194;
        };
        const v196 = v193.then(v195);
        return v196;
    };
    const v198 = v189.then(v197);
    return v198;
};
v186.image = v199;
const v200 = module.exports;
const v208 = function (modules, circular, config) {
    const options = createGraphvizOptions(config);
    options.type = 'dot';
    const v201 = checkGraphvizInstalled(config);
    const v203 = () => {
        const v202 = createGraph(modules, circular, config, options);
        return v202;
    };
    const v204 = v201.then(v203);
    const v206 = output => {
        const v205 = output.toString('utf8');
        return v205;
    };
    const v207 = v204.then(v206);
    return v207;
};
v200.dot = v208;