var path = require('path');
const v150 = require('child_process');
var spawn = v150.spawn;
const v151 = require('child_process');
var exec = v151.exec;
const v152 = require('child_process');
var execFile = v152.execFile;
const v153 = require('events');
var EventEmitter = v153.EventEmitter;
const v154 = require('debug');
var debug = v154('launchpad:local:instance');
var rimraf = require('rimraf');
var safe = function (str) {
    const v155 = str.replace(/['"]+/g, '');
    return v155;
};
var getProcessId = function (name, callback) {
    name = safe(name);
    const v156 = 'ps -clx | grep \'' + name;
    const v157 = v156 + '$\' | awk \'{print $2}\' | head -1';
    const v158 = 'ps -ax | grep \'' + name;
    const v159 = v158 + '$\' | awk \'{print $2}\' | head -1';
    const v160 = 'ps -clx | grep \'' + name;
    const v161 = v160 + '$\' | awk \'{print $2}\' | head -1';
    const v162 = 'ps -ax | grep \'' + name;
    const v163 = v162 + '$\' | awk \'{print $2}\' | head -1';
    var commands = {};
    commands.darwin = v157;
    commands.linux = v159;
    commands.freebsd = v161;
    commands.sunos = v163;
    const v164 = process.platform;
    const v165 = commands[v164];
    const v173 = function (err, stdout) {
        var pid = stdout.trim();
        const v166 = debug('Got process ID', name, pid);
        v166;
        const v167 = !pid;
        if (v167) {
            const v168 = 'There does not seem to be a ' + name;
            const v169 = v168 + ' process running';
            const v170 = new Error(v169);
            const v171 = callback(v170);
            return v171;
        }
        const v172 = callback(null, pid);
        v172;
    };
    const v174 = exec(v165, v173);
    v174;
};
var Instance = function (cmd, args, settings, options) {
    const v175 = {};
    this.options = options || v175;
    var self = this;
    let childProcess;
    const v176 = args === null;
    const v177 = {};
    const v178 = settings || v177;
    const v179 = exec(cmd, v178);
    const v180 = {};
    const v181 = settings || v180;
    const v182 = spawn(cmd, args, v181);
    if (v176) {
        childProcess = v179;
    } else {
        childProcess = v182;
    }
    const v183 = args === null;
    let v184;
    if (v183) {
        v184 = 'exec';
    } else {
        v184 = 'spawn';
    }
    const v185 = v184 + ' child process with process id';
    const v186 = childProcess.pid;
    const v187 = debug(v185, v186, cmd, args);
    v187;
    const v190 = function (code, signal) {
        const v188 = {
            code: code,
            signal: signal
        };
        const v189 = self.emit('stop', v188);
        v189;
    };
    const v191 = childProcess.on('exit', v190);
    v191;
    const v192 = settings.timeout;
    const v193 = settings && v192;
    if (v193) {
        const v194 = settings.timeout;
        var timeout = v194 * 1000;
        const v198 = function () {
            const v195 = self.id;
            const v196 = debug('Intance timed out', v195, timeout);
            v196;
            const v197 = self.stop();
            v197;
        };
        const v199 = setTimeout(v198, timeout);
        v199;
    }
    const v200 = childProcess.stdout;
    this.stdout = v200;
    const v201 = childProcess.stderr;
    this.stderr = v201;
    const v202 = childProcess.pid;
    this.id = v202;
    this.process = childProcess;
    this.cmd = cmd;
    this.args = args;
};
Instance.prototype = new EventEmitter();
const v203 = Instance.prototype;
const v212 = function (callback) {
    const v204 = this.options;
    const v205 = v204.process;
    if (v205) {
        const v206 = this.options;
        const v207 = v206.process;
        const v208 = getProcessId(v207, callback);
        v208;
    } else {
        const v209 = this.process;
        const v210 = v209.pid;
        const v211 = callback(null, v210);
        v211;
    }
};
v203.getPid = v212;
const v213 = Instance.prototype;
const v269 = function (callback) {
    var self = this;
    var command;
    const v214 = self.running;
    if (v214) {
        const v215 = this.id;
        const v216 = debug('Instance was open already, not stopping', v215);
        v216;
        const v217 = {};
        const v218 = callback(null, v217);
        return v218;
    }
    if (callback) {
        const v221 = function (data) {
            const v219 = debug('Instance stopped');
            v219;
            const v220 = callback(null, data);
            v220;
        };
        const v222 = this.once('stop', v221);
        v222;
    }
    const v223 = this.options;
    const v224 = v223.clean;
    if (v224) {
        try {
            const v225 = this.id;
            const v226 = debug('Killing process', v225);
            v226;
            const v227 = this.id;
            const v228 = -v227;
            const v229 = process.kill(v228);
            v229;
        } catch (error) {
        }
    } else {
        const v230 = this.options;
        const v231 = v230.command;
        const v232 = v231.indexOf('open');
        const v233 = v232 === 0;
        if (v233) {
            const v234 = self.options;
            const v235 = v234.process;
            const v236 = safe(v235);
            const v237 = 'osascript -e \'tell application "' + v236;
            command = v237 + '" to quit\'';
            const v238 = debug('Executing shutdown AppleScript', command);
            v238;
            command = command.split(' ');
            const v239 = command[0];
            const v240 = command.slice(1);
            const v241 = execFile(v239, v240);
            v241;
        } else {
            const v242 = process.platform;
            const v243 = v242 === 'win32';
            if (v243) {
                const v244 = this.options;
                const v245 = v244.imageName;
                const v246 = this.cmd;
                const v247 = path.basename(v246);
                const v248 = v245 || v247;
                command = 'taskkill /IM ' + v248;
                const v249 = debug('Executing shutdown taskkil', command);
                v249;
                command = command.split(' ');
                const v250 = command[0];
                const v251 = command.slice(1);
                const v252 = execFile(v250, v251);
                const v254 = function (data) {
                    const v253 = self.emit('stop', data);
                    v253;
                };
                const v255 = v252.once('exit', v254);
                v255;
            } else {
                const v256 = this.id;
                const v257 = debug('Killing process', v256);
                v257;
                const v258 = this.process;
                const v259 = v258.kill();
                v259;
            }
        }
    }
    const v260 = this.options;
    const v261 = v260.tmpdir;
    if (v261) {
        const v262 = this.options;
        const v263 = v262.tmpdir;
        const v264 = debug('Removing tmpdir', v263);
        v264;
        const v265 = this.options;
        const v266 = v265.tmpdir;
        const v267 = function () {
        };
        const v268 = rimraf(v266, v267);
        v268;
    }
};
v213.stop = v269;
exports.Instance = Instance;
const v298 = function (cmd, args, settings, options, callback) {
    var getInstance = function () {
        const v270 = debug('Starting instance', cmd, args);
        v270;
        const v271 = new Instance(cmd, args, settings, options);
        return v271;
    };
    const v272 = options.process;
    const v273 = options.multi;
    const v274 = !v273;
    const v275 = v272 && v274;
    if (v275) {
        const v276 = options.process;
        const v294 = function (err, pid) {
            const v277 = !err;
            const v278 = options.opensTab;
            const v279 = !v278;
            const v280 = v277 && v279;
            if (v280) {
                const v281 = options.process;
                const v282 = v281 + ' seems already running with process id ';
                const v283 = v282 + pid;
                const v284 = new Error(v283);
                const v285 = callback(v284);
                return v285;
            }
            var instance = getInstance();
            const v286 = !err;
            const v287 = options.opensTab;
            const v288 = v286 && v287;
            const v289 = options.clean;
            const v290 = !v289;
            const v291 = v288 && v290;
            if (v291) {
                const v292 = debug('Marking instance as already running (but is able to open a tab)');
                v292;
                instance.running = true;
            }
            const v293 = callback(null, instance);
            return v293;
        };
        const v295 = getProcessId(v276, v294);
        v295;
    } else {
        const v296 = getInstance();
        const v297 = callback(null, v296);
        v297;
    }
};
exports.start = v298;