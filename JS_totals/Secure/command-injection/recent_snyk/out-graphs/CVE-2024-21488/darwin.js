'use strict';
var os = require('os');
const v109 = require('child_process');
var exec = v109.exec;
var async = require('async');
const trim_exec = function (cmd, cb) {
    const v117 = function (err, out) {
        const v110 = out.toString();
        const v111 = v110 != '';
        const v112 = out && v111;
        if (v112) {
            const v113 = out.toString();
            const v114 = v113.trim();
            const v115 = cb(null, v114);
            v115;
        } else {
            const v116 = cb(err);
            v116;
        }
    };
    const v118 = exec(cmd, v117);
    v118;
};
const ensure_valid_nic = function (str) {
    const v119 = str.match(/[^\w]/);
    if (v119) {
        const v120 = 'Invalid nic name given: ' + str;
        const v121 = new Error(v120);
        throw v121;
    }
};
const determine_nic_type = function (str) {
    const v122 = str.match(/Ethernet/);
    const v123 = str.match(/Wi-?Fi|AirPort/i);
    const v124 = str.match(/FireWire/);
    const v125 = str.match(/Thunderbolt/);
    const v126 = str.match(/Bluetooth/);
    const v127 = str.match(/USB 10\/100\/1000 LAN/);
    let v128;
    if (v127) {
        v128 = 'USB Ethernet Adapter';
    } else {
        v128 = 'Other';
    }
    let v129;
    if (v126) {
        v129 = 'Bluetooth';
    } else {
        v129 = v128;
    }
    let v130;
    if (v125) {
        v130 = 'Thunderbolt';
    } else {
        v130 = v129;
    }
    let v131;
    if (v124) {
        v131 = 'FireWire';
    } else {
        v131 = v130;
    }
    let v132;
    if (v123) {
        v132 = 'Wireless';
    } else {
        v132 = v131;
    }
    let v133;
    if (v122) {
        v133 = 'Wired';
    } else {
        v133 = v132;
    }
    return v133;
};
const v148 = function (cb) {
    var cmd = 'netstat -rn | grep UG | awk \'{print $NF}\'';
    const v146 = function (err, stdout) {
        if (err) {
            const v134 = cb(err);
            return v134;
        }
        const v135 = stdout.toString();
        const v136 = v135.trim();
        var raw = v136.split('\n');
        const v137 = raw.length;
        const v138 = v137 === 0;
        const v139 = [''];
        const v140 = raw === v139;
        const v141 = v138 || v140;
        if (v141) {
            const v142 = new Error('No active network interface found.');
            const v143 = cb(v142);
            return v143;
        }
        const v144 = raw[0];
        const v145 = cb(null, v144);
        v145;
    };
    const v147 = exec(cmd, v146);
    v147;
};
exports.get_active_network_interface_name = v148;
const v152 = function (nic_name, cb) {
    const v149 = ensure_valid_nic(nic_name);
    v149;
    const v150 = 'networksetup -getmacaddress ' + nic_name;
    var cmd = v150 + ' | awk \'{print $3}\'';
    const v151 = trim_exec(cmd, cb);
    v151;
};
exports.mac_address_for = v152;
const v156 = function (nic_name, cb) {
    const v153 = ensure_valid_nic(nic_name);
    v153;
    const v154 = 'ipconfig getoption ' + nic_name;
    var cmd = v154 + ' router';
    const v155 = trim_exec(cmd, cb);
    v155;
};
exports.gateway_ip_for = v156;
const v160 = function (nic_name, cb) {
    const v157 = ensure_valid_nic(nic_name);
    v157;
    const v158 = 'ipconfig getoption ' + nic_name;
    var cmd = v158 + ' subnet_mask';
    const v159 = trim_exec(cmd, cb);
    v159;
};
exports.netmask_for = v160;
const v164 = function (nic_name, cb) {
    const v161 = ensure_valid_nic(nic_name);
    v161;
    const v162 = 'netstat -rn | grep ' + nic_name;
    var cmd = v162 + ' | grep UG | wc -l | sed -e "s/1/active/" | sed -e "s/0/inactive/"';
    const v163 = trim_exec(cmd, cb);
    v163;
};
exports.status_for = v164;
const v216 = function (cb) {
    var count = 0;
    var list = [];
    var nics = os.networkInterfaces();
    const append_data = function (obj) {
        const v167 = function (cb) {
            const v165 = obj.name;
            const v166 = exports.gateway_ip_for(v165, cb);
            v166;
        };
        const v170 = function (cb) {
            const v168 = obj.name;
            const v169 = exports.netmask_for(v168, cb);
            v169;
        };
        const v173 = function (cb) {
            const v171 = obj.name;
            const v172 = exports.status_for(v171, cb);
            v172;
        };
        const v174 = [
            v167,
            v170,
            v173
        ];
        const v185 = function (err, results) {
            const v175 = results[0];
            if (v175) {
                const v176 = results[0];
                obj.gateway_ip = v176;
            }
            const v177 = results[1];
            if (v177) {
                const v178 = results[1];
                obj.netmask = v178;
            }
            const v179 = results[2];
            if (v179) {
                const v180 = results[2];
                obj.status = v180;
            }
            const v181 = list.push(obj);
            v181;
            const v182 = --count;
            const v183 = cb(null, list);
            const v184 = v182 || v183;
            v184;
        };
        const v186 = async.parallel(v174, v185);
        v186;
    };
    const v214 = function (err, out) {
        if (err) {
            const v187 = cb(err);
            return v187;
        }
        const v188 = out.toString();
        const v189 = v188.split(/Hardware/);
        var blocks = v189.slice(1);
        count = blocks.length;
        const v209 = function (block) {
            var parts = block.match(/Port: (.+)/);
            var mac = block.match(/Address: ([A-Fa-f0-9:-]+)/);
            var name = block.match(/Device: (\w+)/);
            const v190 = !parts;
            const v191 = !mac;
            const v192 = v190 || v191;
            const v193 = !name;
            const v194 = v192 || v193;
            if (v194) {
                const v195 = --count;
                return v195;
            }
            var obj = {};
            var port = parts[1];
            const v196 = name[1];
            obj.name = v196;
            obj.desc = port;
            const v197 = determine_nic_type(port);
            obj.type = v197;
            obj.ip_address = null;
            const v198 = mac[1];
            obj.mac_address = v198;
            const v199 = obj.name;
            const v200 = nics[v199];
            const v201 = [];
            const v202 = v200 || v201;
            const v206 = function (type) {
                const v203 = type.family;
                const v204 = v203 == 'IPv4';
                if (v204) {
                    const v205 = type.address;
                    obj.ip_address = v205;
                }
            };
            const v207 = v202.forEach(v206);
            v207;
            const v208 = append_data(obj);
            v208;
        };
        const v210 = blocks.forEach(v209);
        v210;
        const v211 = count == 0;
        if (v211) {
            const v212 = new Error('No interfaces found.');
            const v213 = cb(v212);
            v213;
        }
    };
    const v215 = exec('networksetup -listallhardwareports', v214);
    v215;
};
exports.get_network_interfaces_list = v216;