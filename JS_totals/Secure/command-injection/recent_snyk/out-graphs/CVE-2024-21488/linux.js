'use strict';
var os = require('os');
const v101 = require('child_process');
var exec = v101.exec;
var async = require('async');
const trim_exec = function (cmd, cb) {
    const v109 = function (err, out) {
        const v102 = out.toString();
        const v103 = v102 != '';
        const v104 = out && v103;
        if (v104) {
            const v105 = out.toString();
            const v106 = v105.trim();
            const v107 = cb(null, v106);
            v107;
        } else {
            const v108 = cb(err);
            v108;
        }
    };
    const v110 = exec(cmd, v109);
    v110;
};
const ensure_valid_nic = function (str) {
    const v111 = str.match(/[^\w]/);
    if (v111) {
        const v112 = 'Invalid nic name given: ' + str;
        const v113 = new Error(v112);
        throw v113;
    }
};
const v135 = function (cb) {
    var cmd = 'netstat -rn | grep UG | awk \'{print $NF}\'';
    const v133 = function (err, stdout, stderr) {
        if (err) {
            const v114 = cb(err);
            return v114;
        }
        const v115 = stderr.toString();
        const v116 = v115.match('not found');
        if (v116) {
            const v117 = stderr.toString();
            const v118 = v117.trim();
            const v119 = 'Command failed: ' + v118;
            const v120 = new Error(v119);
            const v121 = cb(v120);
            return v121;
        }
        const v122 = stdout.toString();
        const v123 = v122.trim();
        var raw = v123.split('\n');
        const v124 = raw.length;
        const v125 = v124 === 0;
        const v126 = [''];
        const v127 = raw === v126;
        const v128 = v125 || v127;
        if (v128) {
            const v129 = new Error('No active network interface found.');
            const v130 = cb(v129);
            return v130;
        }
        const v131 = raw[0];
        const v132 = cb(null, v131);
        v132;
    };
    const v134 = exec(cmd, v133);
    v134;
};
exports.get_active_network_interface_name = v135;
const v142 = function (nic_name, cb) {
    const v136 = ensure_valid_nic(nic_name);
    v136;
    const v137 = 'cat /proc/net/wireless | grep ' + nic_name;
    const v140 = function (err, out) {
        let v138;
        if (err) {
            v138 = 'Wired';
        } else {
            v138 = 'Wireless';
        }
        const v139 = cb(null, v138);
        return v139;
    };
    const v141 = exec(v137, v140);
    v141;
};
exports.interface_type_for = v142;
const v146 = function (nic_name, cb) {
    const v143 = ensure_valid_nic(nic_name);
    v143;
    const v144 = 'cat /sys/class/net/' + nic_name;
    var cmd = v144 + '/address';
    const v145 = trim_exec(cmd, cb);
    v145;
};
exports.mac_address_for = v146;
const v151 = function (nic_name, cb) {
    const v147 = ensure_valid_nic(nic_name);
    v147;
    const v148 = 'ip r | grep ' + nic_name;
    const v149 = v148 + ' | grep default | cut -d \' \' -f 3 | head -n1';
    const v150 = trim_exec(v149, cb);
    v150;
};
exports.gateway_ip_for = v151;
const v155 = function (nic_name, cb) {
    const v152 = ensure_valid_nic(nic_name);
    v152;
    const v153 = 'ifconfig ' + nic_name;
    var cmd = v153 + ' 2> /dev/null | egrep \'netmask|Mask:\' | awk \'{print $4}\' | sed \'s/Mask://\'';
    const v154 = trim_exec(cmd, cb);
    v154;
};
exports.netmask_for = v155;
const v200 = function (cb) {
    var count = 0;
    var list = [];
    var nics = os.networkInterfaces();
    const append_data = function (obj) {
        const v158 = function (cb) {
            const v156 = obj.name;
            const v157 = exports.mac_address_for(v156, cb);
            v157;
        };
        const v161 = function (cb) {
            const v159 = obj.name;
            const v160 = exports.gateway_ip_for(v159, cb);
            v160;
        };
        const v164 = function (cb) {
            const v162 = obj.name;
            const v163 = exports.netmask_for(v162, cb);
            v163;
        };
        const v167 = function (cb) {
            const v165 = obj.name;
            const v166 = exports.interface_type_for(v165, cb);
            v166;
        };
        const v168 = [
            v158,
            v161,
            v164,
            v167
        ];
        const v181 = function (err, results) {
            const v169 = results[0];
            if (v169) {
                const v170 = results[0];
                obj.mac_address = v170;
            }
            const v171 = results[1];
            if (v171) {
                const v172 = results[1];
                obj.gateway_ip = v172;
            }
            const v173 = results[2];
            if (v173) {
                const v174 = results[2];
                obj.netmask = v174;
            }
            const v175 = results[3];
            if (v175) {
                const v176 = results[3];
                obj.type = v176;
            }
            const v177 = list.push(obj);
            v177;
            const v178 = --count;
            const v179 = cb(null, list);
            const v180 = v178 || v179;
            v180;
        };
        const v182 = async.parallel(v168, v181);
        v182;
    };
    let key;
    for (key in nics) {
        const v183 = key != 'lo0';
        const v184 = key != 'lo';
        const v185 = v183 && v184;
        const v186 = key.match(/^tun/);
        const v187 = !v186;
        const v188 = v185 && v187;
        if (v188) {
            const v189 = count++;
            v189;
            var obj = {};
            obj.name = key;
            const v190 = nics[key];
            const v194 = function (type) {
                const v191 = type.family;
                const v192 = v191 == 'IPv4';
                if (v192) {
                    const v193 = type.address;
                    obj.ip_address = v193;
                }
            };
            const v195 = v190.forEach(v194);
            v195;
            const v196 = append_data(obj);
            v196;
        }
    }
    const v197 = count == 0;
    if (v197) {
        const v198 = new Error('No interfaces found.');
        const v199 = cb(v198);
        v199;
    }
};
exports.get_network_interfaces_list = v200;